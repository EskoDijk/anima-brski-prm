<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To enable the establishment of a trust relation between a pledge and the domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode also.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>
CA:  </dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>
RA:  </dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>
POP:  </dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>
POI:  </dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>
IED:  </dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>
on-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>
off-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>
asynchronous communication:  </dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
synchronous communication:  </dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
authenticated self-contained object:  </dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support to support the communication between a pledge and a registrar over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the considered application examples, this is not sufficient to provide data origin authentication and therefore needs to be bound to the existing credential of the pledge (IDevID) additionally.
This binding supports the authorization decision for the certification request through a proof of identity.
The binding of data origin authentication to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID).</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection from the pledge to the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to ensure reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM).
This allows independence from protection provided by the utilized transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges with the domain registrar are performed with the help of a registrar-agent component.
The registrar-agent may be an integrated functionality of a commissioning tool.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes the same logical components as BRSKI with the registrar-agent component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like Bluetooth or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects from one or multiple pledges at once and performs a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agent-proximity"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.richardson-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.
Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.1.4.1 |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.1.4.1 |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.1.4.3 |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.1.4.3 |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Example of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
}
]]></artwork></figure>

<t>If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained, they enable the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Verification of usage of ietf-ztp-types to convey the 
P10 in enrollment request. 
*/</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In this case it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to achieve proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
"know" its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledges is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The bootstrapping exchange between the registrar-agent and the domain registrar resembles the exchanges between the pledge and the domain registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own LDevID(RegAgt) EE credential of registrar domain.
It knows the address of the domain registrar through configuration or discovery by, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request   objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors / manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using the LDevID(RegAgt) of the registrar-agent instead of the IDevID of the pledge in the TLS handshake.
This allows the registrar to distinguish between pledge-initiator-mode and pledge-responder-mode. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note that the authorization will be verified based on the agent-signed-data received in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one contained in the pledge-voucher-request.</t>

<t>In pledge-responder-mode the registrar has no direct connection to the pledge but via the registrar-agent. 
The registrar can receive request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JOSE objects from the pledge for voucher-request and enrollment-request (instead of the objects for voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar with an HTTP-over-TLS POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The pledge-voucher-request Content-Type used in the pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>(see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the "Accept" header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain the own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not contained in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if an "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and that the corresponding registrar-agent was authorized to be involved in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar is able to fetch the LDevID(RegAgt) certificate data (including the intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code to the registrar-agent.
If the pledge-voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JOSE object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the product-serial-number contained in the IDevID EE certificate of the pledge matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request a
The pledge-voucher-request was provided by the registrar-agent.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: May contain the certificate or certificate chain of the registrar-agent as array.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c or x5bag header objects.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue:
choice between x5c and x5bag has to be taken. If the pledge wants to verify the agent-signed-data, it needs to know where to finde the registrar agent certificate in the array. Currently it is placed on the first position. Does this rule out the use of x5bag?
*/</t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate. If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent-proximity to provide corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]

  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA with an HTTP-over-TLS POST at the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an "Accept" header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following additional processing <bcp14>SHALL</bcp14> be done for components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> be consistent with the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to be able to provide "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert either in the registrar-voucher-request or in the prior-signed-voucher, which can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion "logged" or "verified".<br />
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted Accept header fields or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the registrar.
After receiving the voucher the registrar may evaluate the voucher for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge's enrollment-request to the registrar.
Deviating from BRSKI the enrollment-request is not a raw PKCS#10 request.
As the registrar-agent is involved in the exchange, the PKCS#10 is contained in the JOSE object. The signature is created using the pledge's IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request to the registrar with an HTTP-over-TLS POST at the endpoint "/.well-known/est/simpleenroll".</t>

<t>The enrollment-request Content-Type is: <spanx style="verb">application/jose</spanx></t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
If the voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and results in additional processing at the domain registrar as EST server as following.
Note that the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content Type application/jose, it <bcp14>MUST</bcp14> verify the signature using the certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained in the pledge's IDevID certificate contained in the JOSE header as being accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JOSE body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the content type "application/pkcs7-mime".</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:
Communication between domain CA and registrar is of content
type "application/pkcs7-mime"
Communication between registrar, registrar-agent and further to the pledge
should be of content type "application/jose" . 
22.12.2022: decision to deliver only the EE certificate and perform specific configuration including security afterwards.*/</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
                  min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
                         It is defined as list to enable inclusion of further
                         certificates along the certificate chain if different 
                         issuing CAs have been used for the registrar-agent 
                         and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='3' month='December' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-12.txt' type='TXT'/>
</reference>


<reference anchor='I-D.richardson-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <date day='1' month='December' year='2021'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-rfc8366bis-04'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-rfc8366bis-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Housekeeping: Removed already addressed open issues.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues</t>
  <t>Exchanged bullet list for endpoints in <xref target="pledge_ep"/> with table for 
better readability</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/>. 
This also required changes in the YANG module in 
<xref target="voucher-request-prm-yang-module"/></t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAB54xGEAA+2921YkR5Yg+h5f4YMeBBIRCWQqJVGq6kIkKtHKCw1Iqh4d
HbUT4YBXBuHR7h4gKjN7zYecWWu+5XzKfMnZV7Nt5uYRQaaqqmfmsKqUEOFu
l23b9v0yHA4HbdlOi/3s69Oz746zu7K9zk6mxeSqyMpZdlo082o2KersRTUp
sk16aHhy+mJrkF9c1MWtvIcfDSbVeJbfwFCTOr9sh2XRXg7zWXmTDy/q5nU5
nNc3w53dQV4X+X72al7UeVtWsybLZ5PsRT7Lr4qbYtYO7q72s4OXxy8Osh//
NJjkLQy4t7O3O2haePCXfFrN4JO2XhSDcl7Tb027t7Pz5c7eYJy3+1nTTgbz
cn+QZW013s8+vi+aj+GPcXUzz8et/6C5v6mLy8Z8UNVt+AlMMKva8rIsJvDh
rKKn2rr0w+SL9rqq9wdDgBa8eDbKvqnLooHnGBRnbXF5Wczcp1UNuzsrcadN
dvAn+EThKB/yDEUBM7xq22r4bX49G56Ws6vsKW6ibO/3sxeLWTm+pj1NYI6P
v9j9/PGXvMfFrK3hiT8V9U0+u4ePipu8nCJQaB2jS1zHHxueawQwgUcWdbmf
XbftvNl/9Oju7m5kvn6kOzsfZT8W9ayo3dbOr6ubvPGf/qO21tI6hne0jvfZ
2tEoe17kfmNH07Jq9SPa1WHZjKvs7B6geGO3cQprbUv4K2+aIvvc7eLHfDot
m2I6LWZuK4ffDr94vPPEbuUMbttfi3oKeA0fz68Jszc+fbKbPXmSffH5F9mX
gNcbfqdTWNIfx7gW2p4s/8WI1pHXk6aauU28wI+KaXYYfcunBDMWUwBjdlZd
tndwI7Mfq/p146e6Gdef4gX+Y6OPjsa5BajC03z9aDCr4Gza8rbA23f6zeHT
vSe7+uvnT/f8r4/l1893Hu/or5/tfia/frHzRD/94vHTp/rrk53P9dcvv6Rn
j4fPRobM/OWuGd5Wi/F1UQffzop2XM0uh81f2/lw3LgvawcYGaC+HOOEF2Wz
Pyhnl9Fu9r78Qtfy2d4XfoW82OOjo6PhFzt7o92DU/wbyA8TVvwiky+ys2K8
AGg/K27LcZEdT4DgIXmp6QUlJvj7kE/qeNbAMIu2yKpLQMxijNQnnxLN5D8r
uDBNdjS7KmdFUTf0slLN3S+GO0/pk6bAi4974uF5vXjBZGEfDwbD4RCuLGLz
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
qR/UWe1hZmzHn0wZP5+mz4gQSK8Bhe5YKpsqUB0o+YVsQ17k7PgvrWmx9/CW
mby763dLZxlKLWDKQpfYfs0+kkJVovDaEpVvu3t0oQKVsHWnWKorWk941z/A
KhiyhrGGT9mWKaBV2zSjUg2YThFhZ8CyuiiqtxlQbhk/wRIxJrDGxzkF8RXv
ltsLpKVVhs8ej0QBuOub2S4xYdXLLmiUYehDDu4D4xzW8/Gfkvrheg5ojYZ+
P9MoywZ9Yl/YOLJrDnf3yCUnZFhpqKYk2ak9I+2HWdlOmTg1l2rfRjBQ4uhq
Y3ppd5xj/sTwkLst4AKNfRQ+ZdOtYdPb+rwZEavIcx0jvDAXeBYFcP82ZZ4g
wJDqdtBYsmG4kaqe21rUg/XDtA7BWmDK4m0gnLJ2qwV6iaFb7J/uAVZYXqOB
uc90/DQy6G5nX/2X4TD785//jFF8XBrsBlC1UVVQXM08/JOdx9tofcf/POXE
6ye7n0VGBveOr75C1RQibyEck2R9s6gRSBpUiSKwsiCcPm6kufUCIwOaNpes
2EuheaHJj/RRtkjbiI/IXJ0KZFkhmDzElEy754ahfFrNPcW/lmNp6klEWh7X
+lVGpOCHvDTx+OlTjGF58wbhMaToBay6QWVMC1Mx49pFM9AEzlj/0Ay21389
PDw4X6r5xNrOOnrHGtrL2opQr3r1earqFag85Yz4DXeu16JTuNn5M9gs7PVu
WbadV0vkCBKqCTdBZhom0FmqlNDzXh9x5QBn4mzTq8MiaocKHFy2dO8SJT4j
ZRpjwArUv5SLBz4cymnOMW/MNVW/Imv+op5XDWdfV4t2upqsxB4pGP4ur6Pt
IZlDI5DmBvW2z12yv56Mwij26eMmFUHVBeQzzh/CAiA+94g1u1SxIWRHeVbn
dy4X0IlVy1LXQs+1RgLzTnwqc1dONO6sEZfitSKY1kXpz4Q14m639EJ0tG/e
zEWv+vGaeqfgoFR3Yzm80z0EQyR8b0UaRnvUUCkPnkaV6FVJ43154SFTFrKZ
yKM37Pq9PNTOFf2380EfYLT+QlwaqKyNqQbCBbFwxjcpKHpTzmgHLUY4Sqrt
phYPQU2Usho5PeNRkP3kc6aopuOC/DDo3Lvf0kBnZaZehgGRIZZj6NRIhMcy
DgwCn7rnjYUajsdFcDRIkD2nO4930NIxmwSjJPXoPJAZg8JvR1jAhBPF8sYr
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
IsJo1MTGOSgV+sYMo8H/B894nbLZfwEA

-->

</rfc>

