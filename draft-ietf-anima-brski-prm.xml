<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-00" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to the bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping 
in domains featuring no or only timely limited connectivity between
a pledge and the domain registrar. This specifically targets situations, 
in which the interaction model changes from a pledge-initiator-mode as 
in BRSKI to a pledge-responder-mode as desribed here. To support this 
functionality BRSKI-PRM introduces a new registrar-agent component, 
which facilitates the communication between pledge and registrar during 
the bootstrapping phase. To support the establishment of a trust relation 
between a pledge and the domain registrar, BRSKI-PRM relies on the exchange
of authenticated self-contained objects (signature-wrapped objects). The 
defined approach is agnostic regarding the utilized enrollment protocol, 
deployed by the registrar to communicate with the Domain CA.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch 
(automated) bootstrapping of devices (pledges) in a (customer) site domain. 
This includes the discovery of network elements in the target domain, 
time synchronization, and the exchange of security information necessary 
to establish trust between a pledge and the domain. Security information 
about the target domain, specifically the target domain certificate, 
is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>. These 
vouchers are signed objects, which are provided via the domain registrar 
to the pledge and originate from a Manufacturer’s Authorized Signing 
Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the 
bootstrapping and is the initiator of the bootstrapping. In industrial 
environments the pledge may behave as a server and thus does not initiate 
the bootstrapping with the domain registrar. In this scenarios it is expected 
that the pledge will be triggered to generate request objects to be 
bootstrapped in the registrar’s domain. For this, an additional component 
is introduced acting as an agent for the domain registrar (registrar-agent) 
towards the pledge. This may be a functionality of a commissioning tool or 
it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be usable also for a pledge in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the 
communication between the pledge and the registrar, when the pledge is
in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of 
arbitrary transport means between the pledge and the domain registrar, 
by keeping the registrar-agent in the communication path. 
Examples may be connectivity via IP based networks (wired or wireless) 
but also connectivity via Bluetooth or NFC between the pledge and the 
registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain specific device certificates. 
EST in turn relies on a binding of the certification request to an 
underlying TLS connection between the EST client and the EST server. 
According to BRSKI the domain registrar acts as EST server and is also 
acting as registration authority (RA).</t>

<t>To be done:
* include reasoning for not using TLS (IDevID does not contain SAN, 
  TLS server flag) between the pledge and the registrar-agent.
* Enhancements to EST state machine necessary to process 
  self-contained objects on the registrar-agent and domain-registrar
* accepting</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of Solution">

<section anchor="sup-env" title="Supported Environment">

<t>The solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
in situation, in which the pledge acts as a server and only answers 
specific requests.</t>

<section anchor="building-automation" title="Building Automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.</t>

<t>Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure Isolation Policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to a domain registrar 
may be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less Operational Security in the Target-Domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirements Discussion and Mapping to Solution-Elements">

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the request and response messages to 
support the communication over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples in scope for certification 
requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
</list></t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To BRSKI wirh pledge in responder mode, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the use case.
The pledge-responder-mode) allows delegated bootstrapping using a 
registrar-agent instead a direct connection from the pledge to the 
domain registrar. The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and responds to 
requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-PRM relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2" title="Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar this approach relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-PRM). This allows independence of a 
potential protection provided by the used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of Pledge in Pledge-Responder-Mode">

<t>In contrast to BRSKI the pledge acts as a server component. It is triggered 
by the registrar-agent for the generation of pledge-voucher-request and 
pledge-enrollment-request objects as well as for the processing of the 
response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent" title="Behavior of Registrar-Agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-PRM, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Discovery of Registrar by Registrar-Agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Discovery of Pledge by Registrar-Agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping Objects and Corresponding Exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request Objects Acquisition by Registrar-Agent from Pledge">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request-prm:agent-signed-data element
(defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request-prm:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request-prm:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module ietf-ztp-types with the grouping for csr-grouping for 
the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. In this case it MUST sign it additionally with its IDevID 
credential to achieve proof-of-identity bound to the PKCS#10 as 
described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certification request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request Handling - Registrar-Agent (Infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTP-over-TLS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional 
parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTP-over-TLS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTP-over-TLS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:<vspace />
Communicaion between domain CA and registrar is of content
type “application/pkcs7-mime” 
Communicaion between registrar, registrar-agent and furter to the pledge
should be of content type “application/jose” . */</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response Object Supply by Registrar-Agent to Pledge">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang" title="Voucher Request Artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-15.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-19 {
    description
     "Initial version";
    reference
     "RFC XXXX: VBRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
    
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion Attack on Pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired Voucher and Enrollment responses by Registrar-Agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of Registrar-Agent Credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='24' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-08.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of Changes [RFC Editor: please delete]">

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-internal-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from 
draft-ietf-anima-brski-async-enroll-03 to this document 
This required changes and adaptations in several sections to remove 
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="voucher-request-prm-yang"/> as well as in the 
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to 
to allow better listing of voucher related extensions; aligned with 
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the 
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not 
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOtEcWEAA+2961YjV5oo+D+eYjf5I6EsKYG82Kbc7sKAbbryQgMuVx8f
j1cgBRCVkkIdEYKk0tnrPMiZteZZ5lHOk8x33bfYIUGmq6tm5rCqnCBF7Mu3
v/3dL8PhMGvafD75JZ9W82LPtPWyyMpFTb817e729pfbu9mkGs/zGXw9qfPL
dlgW7eUwn5ezfHhRN2/L4aKeDbe3s3He7pmmnWSLci8zpq3Ge+bxXdE8hj/G
1WyRj1v3QXM3q4vLxvugqtvwE1jHvGrLy7KYwIfzip5q69IN05btFJb1zenZ
H4/Nbdlem5NpMbkqTDk3p0WzqOaTojavqklhNumh4cnpq60sv7ioixt5Dz/K
8rrI98ybRVHnbVnNGwMwMa/yeX5VzIp5m91e7Zn918ev9s2P32WTvIVJd7d3
d7J82V5X9V42hBlh5Wcj821dFg0slAF21haXl8XcflrVMNBZiYM2Zv87+ETX
Ih/yFosCtvimbavh9/n1fHhazq/MC4Ri2d7tmVfLeTm+hj/r4goWC/vIb/K6
zAnME5j18Rc7nz/9ksG+nLc1vPNdUc/y+R18VMzycornRCsbXeLK/tDw7CM4
JnhkWZd75rptF83ekye3t7cj7+snutfzkfmxqOdFbTd7fl3N8sZ9+o+z2ZZW
NryllX3MZo9G5mWRu60eTcuq1Y9onwdlM67M2R3AdeZv7BRW35bwV940hfnc
7uvHfDotm2I6LeZ2KwffD794uv3M38oZYPVfi3oK+AgfL67plm589mzHPHtm
vvj8C/Ml3NENt9MpLOkPY1wLbU+W/2pE68jrSVPN7SZe4UfF1BxE3/K5wYzF
FMBozqrL9hYuiPmxqt82bqrZuP4MScEfGn10NM59gCo8va+fZPMKzqYtbwok
EaffHrzYfbazZ4z88fmL3T3761P59fPtp9v66/Od5/LrF9vP9NMvnr54ob8+
2/5cf/3yS3r2eHg48kjWX26b4U21HF8XdfDtvGjH1fxy2Py1XQzHDXxZzi+j
xe5++YVO9Gx3Z9v9uiO/Pt/9fNf++oU+8PzF891grmk+WzTDaXl13d4W+N/h
eLYAMlpdltMi8SR+u1wg3Wnslt3uv/jymb4DCIXQrof5uBiOq3wxLJp2WAE6
1Dzu0cHwxe7T5zvDL/FPINJMQR/DF4a+MENzUsFFAQJNqGxmlgoSUQQ0rsYl
rGRiLHyquSneAQLNrwoa1MAgh3mb0wuAhjO8w0JYm2IMCNLe4Tx53ZovAe3v
LnA+/eJtcedPCnPIoAtvXab4j2W5wAce07dKiHlywuDjeQv3nabNp3Bji3Fb
V20xvsbFANbDusqmKQnljVGivvP5cPs5fdIUSBpxk3uyAAASgErgZ3Di10en
B8OD4xNgf8+HzwOQ8q7O3HZlBTC7+/QE5pgVbVH3beI1cMVrsz+D58Y5MrVp
mV+UU3z3AGjEuJyGq3863NntWT0sc8/QOgkRjo6GX2zvjnb2T4Nl4xdGvuB1
FuawuCnHhTmeALiRHfeu9njewDDLtjDVpeyXYI144LbfmKP5VTkviroJF//F
cPtFL+iPjpDWy8IQ9sdnb4aIzzvPd+DN3Qifz948QZyWL81plU/MTXFdjqdF
A8v9E/86BK7zXV1OCBssljLqXMIdsuhMuLoL51G0t0AG+SosFlN9A+4uyDvV
FNgUIGZNqNvcEzXPUAID6lv+lcd6U18BqZI/nqzBY1mh6cXnZ0PiKEmgMpAA
XAomXPGbg5OTAJggFs3NAfAHEKxOqhLu5Inudne0Pdoxm4coF2717dZ/fx+4
Xj4XwNo1folYmw2HQ5AQkFWO2yw7vy4bA5LnkqjApLgEjGlMMb/G1wm8IGEC
Zy/MRVW1+NZigaJDDkcwA/gwQSkyJCewaeC/INKOW8RnlgUH5v17YRMfPpgt
HA2OHO8WLCsaFHgBrAX4HlCwyyKHUfDTeQUbNNV8egegmhXwz7SclUgagZPM
4ZzKG7yoF4AzBbD53CxYOkXkwYXziCTZ4FT1yNCmm0UxhmsGh4sDI9hgrw3c
KyahA1rNLeDvNY1SIn4AyBBbZiBHTA2TYlhpXc2Mzjos52ULhLuqh/gUEHIa
h2Vn2Lt9rlbB2T43KZq6vIBtAc8sYJGVaZaLBVAmmB/Wm10CIWL0xO1aqRpX
VleT5RiWkpt5cet2OgTqDqeKWgFINPMW9sQbcifQ0OYC7qGQ9OFohzQTPpSs
ixKL67yJ110Y4Iz5Bchg14RgQLByVnpgyClPl+l8a09u4O0aXod7BmjBsyhj
xAngbiAJHRP7BF59CTx63sJI8Gd18RfAmMZsNuXVHDGsGN7iBtxXW4gfhcn4
LhD9qascgAZnkF/NK6C9Y1wSkhLYNc6+bAGaf4Vni3ldTae0UyVVAxxpMa3u
4OuLO3rcARMQwoG+YN0KnzjkjR/sj0zGN3ZWTibTIsseIaGi40bYZYxXhDy8
WnjLv2+C5IQaTTVdEsCB18u1NSD0VkCdQU4z2SYADuYFoG1FJwtAnRBzArjx
ETVbOFNuNsdwlBXwzS28OnpisGq6YuV8PF1OBMcmKC7fFPUdDjcXAl9MhciU
fI58D2UYAB1eeJBF5uNr5GlMrAcWP/TUcUQr2PjyElCHomlymDMDUFtUFAxc
g3cjJ0D4Y4JeWy3b1GpDihJ/b8ZF3dLXbYHEpbHLnwgCIahFZrZ4mjpakMM/
fCAsBV0nkzfgUThPxGqHygOhX/gN4ONNOYHvbso8ebkIRPiFB4yqLkGEQNQU
IgfK+hKIB96b+jGom8SGCPXPYGYiDPIZQG3z1f7Z/tYoUyydTIDoNYAOzbiY
g3ZZ0bE7EqsTy77HcMFZMqVvs4gBwfLKRkizkFzEgw5dGsGNgUcmSzRqAGvP
ivlNCdgkzM3NO8uRiVznN0SNc+TkgK6CFEvkkrD0OSikMl+RIoL2Cne5zvGc
Cbm3+9YQGgDeIKmC4fLWX9FtOZ3CkgBdy6srYAoTJBhA0tF+UpAMBChtUQW+
uwjAxDgTUJzHjUXubwmuZYPXCc+mFNHHcgvCUctcJnguBPiGXrjyz6aDS5sR
D9pC7LpF3dfbnzBihjsAPGRwxCrGVtwiWluBMARTZgA4eau4gQs8robTism9
hb8DfHaMT8zRNtAikIQX+88Io1yAOAr3nNfIYHWcxY7s3Q+5VM2TuoAzgrU0
KG3l3pE8oYvjYJR5CPGtQM8XLXrxJ1xwxgsmBFk2SAnhcwQRb66YTxYoQjYj
lPAKc1XBwZaEIiLaOYkEgLhsgC7CjqZNRUdqCSItQA18KKeMhLA39jYjV8uy
31lEUZ4YwxbQBmUTh12hIEg33PQIIhHUg+GRxoWPlKjvdFZuNh3+8s0GymQM
rBzgMZnqsi0bgel9zWOa3xUqhCIQGWDeA4CuaHqrL0pcFTxV5/OGpKBZAb+t
2ktXzIGRLlBFLxZ94JSLHcJrkbfXI3z56F0+W6AKJrckEJSRARyfmIscD08Y
MTD22xIJDJw+/gLvAovHZQCrI7zoDPHNdFnAhQR0hXdef3uwaodiWPQ2ILAH
Vlnd8tVWKcqMYR0ov8G0IDRcXgLhQ1Kj94iHfoyHfAwq8/GhCVh7bs5fntnV
onhYpYEM7zPrKRtPTkA+DYDB41w2quhEK4d1E0/Ws/Hv7ybdfyuYIAB8irBl
1RTjiR0RYhJ97V6gAFt8iMKKlJR4AqgntPFddxLz0dk5ixJo8wMpsa0yZSa0
YBy2vEADQyjBqIAjA/sSTQN4h8MiXi7ruTdZbi6A+4oYSThr30KA6cSoG4Fw
tcQLO73Dx6Nz9NELZxLxQMGCHzH4YCX743El4rlP7zs0VUUN97LKFYTzmTsZ
fYeWkjsR55QEnHMioxM0GxMpJLEX3skbZlxIVFFyYJTCjW0K7lqhQlQUc7b/
mu4/PiRLupzmV1v3IoaKob8zR5EGTzskSjsDXQbkSQ/n4WtgZPgXTtyjMFXz
NFlHfCGwDh1zgns9HhcLgl2GOst5Uc/KeTWtru6YIaG5AOgOiAMbr344O98Y
8L/m9Rv6/fTo3344Pj06xN/Pvt9/+dL+kskTZ9+/+eHlofvNvXnw5tWro9eH
/DJ8aoKPso1X+/++wSrExpuT8+M3r/dfbjA59S0hKDIzc6TbvQAGjyJQA8pc
M2Y1HdX6g5P/+//aeQaX6Z/Qbr2z8yXcJv7ji53Pn8EfyJx4NuId/CcA8i5D
AQ1QENUoYOLjfAGMcIrSGJCB6+p2zmaALDbRhHpv6wDbowKOCN6XlSW0BQo4
uD2r4FrZb3q3l2UH+3vZnjkILqlF+AHcjWZJTrbg8sMyT+m90+Q9IRmzWoiE
ybZlcVdaYUBUFVB6YWVT0K/ROOFN4lmr4VWVFQFYqLyiUCq6CE8NKtH4La3r
+OgQF4b2vem0JKT1bMRidN0EoKE0g5IRelf4guHVzqr5EFVbHONQzr5hyVTW
Ttp0TcOQET0UY/ObvJyStBCpuGQUYKsbS+Q41+XlbzcZgRxVBXhHKF/ITtF7
vGpBkXgOagsc7JQVfZQS8QSn1XKiKxq4YyRkBz2zgHWTOOQRcqSuus4BOcIc
IyajgltlPgHsFny6KTxA5WoTqEAxC4SgGHRsMiSJEFC/Xi7YcJgSMwFgIDgb
lD0Qlmh7Nid/PPYRFed++NTwxG81+T2MW9EyyNdIXwwcnMf13aKtrkBLvBZ7
xUW1nE9UWDo68m8eDKDsyr+PcG4vD4/+FH66xXqbU/DwbRUA8OSBfMxYkb3w
jBItAHR5dU2Hf4WE0Fj7HC6fBQe0O8A3opgxL2UhuBZZn8yQdXmDy0MWU10K
jocbQkACVzobw/3Awc/EMgYfwqdsvIRFHTlDgXn/qFkuhsX85gMzMGtMYx0Z
js5uSrQCuYViz3bGZDGgGTI0zCvYcI3buY/ESsJ4XTiLAU/IhLFrXpQLjB4t
fKpqCTCTDJ7TRTgru3/tyO3BTAVkhvFbPGrvJdRRq2WbIcqq3rl++Wo5Do0z
GVuxdGjc3bR8W7CaBQfOFEEEIZBtGafqAiSqghhpJrLQdU5yToV7cPov8klB
+lYB4awp6PTEpYpJRdQ4MagNY/sKuVl9tph5RrpbYC6GlyBILWeBeNkUvpHG
M4BkhHH7nhppNbf3jwBCw0L+FKxzbFy/IIj5CKjHzNqsGOLhHrjT9XQEtW0X
RHkZDFNxQHtUzr2R+TbOASKFr/d7VjZPNW5Io2oG4nsYV8vpxEwLOFDAWmMt
2MTHrbopDj5/B6iAqHtmsNJyGNjumBXNm1u0kdr1q97R8Bk8Mt8syynRj322
ghM5OAaE0c9z+zlIM2R0IUVRkMqJhRfI+CZFi2CFu6avi4KGWrfzhNhvyc++
UPsVyCFNBfedCB6w72YgPn6E9XSKG5H7VkwGBDN6jXaqvjHSOLLutRQuTjZb
O70XCMDCGZOOLOloE4FArjMrwEAmpuLOIZO9nmMmT1Ua80Vfj8xhz8siIymU
YN+Zijviiy1ztOZNp3ybrotAd3dWejUXZBbgc8+nrHY7fGIWQSYFlYyhMjDF
6Go0sJaBaQ5MdIGgJjNkDpfvogSyTwFENKw1AuFSvPUJafZXjGBFVl+XSA/z
OqeIBSY7TdEilW0yuRbWsGvhCusm/5vySkah5omHQkhXAZ4+Cydh3jIOKy0i
6fXkDJNfIQsDnIXP6szKI7o2Oh81NcrZRIErgjOW3/MliThElk9BZZ7cOa4i
uwxQRM7R2dPxGmYBhqrHGlgXylQgRukCnMXR7lrWnzn8etzIycKWDshwXN8N
ZCFuS3jxiVRd+Ju2eKccjdn79M7Huwl7grscUh2FyPQ8ip3ccmNSe+7AdO3G
TXrjRBSPQ4/+MUg9vPmTCqj7neimwI0RUcmCc8dU0VJnvXVRbADa3BCSwEWy
kkb1YCexGEXLtBzg3Rbk21nQrAO4ZoCMIiYgD7dGW7a4NAQo1gtpOQNLFdEu
0TQ94FdYkVGST2EM7PVyifKxJb4TVM9rchaU1aRBzoQ0bUBGHmHLbJMG+p63
qAxdkulbrXGse/NJE/XOSrhQTVOSSVluGdFJy5xe4qLfeHfd80wSxM5Jhxuy
35gvYmCxImlI/RtKeUONmf0tntSv8k9JGijMRkFGeJmcOioWKJbHDOxjygYB
c11eIa3w6ZM9pfYaVVPapUdLnA+UbhpRJp9YNeptKr0oNpZf0fp4sM+qKl3J
STHDlckimghYIWTQ8jXhMY5IOrDu24P9J9/U1S3ckwymXs4MDIP3cYojjRHX
xLXt4Z8LS7Imeg+kuCvyvrhZaVeL5QUADqdFx3QxiYwrJPEqCaMJVQ4y1mUY
WmqtWZHk4ayYk3blTqASYl94hmYPUcJjvc1hO5myM5Sv2Y+p9KMiTGdaS+uh
SRFr+ABI2JviRUmhAyljoI2d+rA7LJvxkvx+EiPO3lWYSnW14ZGGDrx/BGAf
AhEBIfkbcmpUyjZULGbYeI5fE5jx3r9X5e4DTkc6gVWXAi+Pit1Z9H4gq3+g
2a2sTiJIiBpMAkBRZVagQu4q5d5XNvTDGulTfed8RM6GbxWPGQpHyIhgnswP
zAnNEBWJywlfx36L0c5NG+4JEXiBOCr0TOWSPXSOnNQVEBP430mF7v6GAsqR
9fEqFvypL9KyEM+KO2jsqLqHSr2qTXRP5Hu1evA9CyySnmMBGPfdQm0cd2Ts
JNnN2hdYmhM7gWc8GAVb4ahMDCm3siP6dYYcIeGfnNLSzPieHxUdAxLr1uiI
n6dUWw/XyDPHwno5RJnogfrMIkJD1xBtXhoVwO9MYE96f5wGucnuB/wD7TcX
eoWsFOaZA+CsMyvEWF/1ZQWXNXjl+Oj8W2uzbggrDpJuH8Hq2OCs2hlNSGH+
LDg0FFdVsFuGvbFy0a9qCRpg3FbkwCNAey6tmU9+gWc6hP/JYQ/hsIcLi6pE
kDGcYEq2Ow23mBDWLfKyRkahsEOdlKxI+FKIf+Shc7sAGBgDCPXHg7NHO9ts
ocdA9w8f0FrHYZe52yhFbrIvPonWHKQWCFQS+9NW9C7I/8vaB40CTkjqQjHb
2zmZyzoXQYEqMxP5z1vvgqpVg152oHeXdYR7f10JXvYcWRI9YFtqmNQb2k8C
esa4wGOMRB93+51matE5ID2EPI4osAhOGNbAJah7+MOAWSSFIuD1apaXsK5S
XB1qIWL6kKQgeETzoiDYogW1CA20zu5mneUKSLGFiMUWw4V9B48onmqRFYbQ
yPGFEuEEhCF7I1Z4btl2ayko7E0DdtgWrJhWCg1l3PW8wnJJ05Cw2nlqbpaJ
kNSKy8hCyIaKLxu29PX4ksQWvF+Pr0u8H0s0Aby5QdkGZHY8hjBo/eidxv2+
f5S7l4oP5AXWHLn6ujeEZmAtHJpk4Q+TeV48HswP5yxtaPYkET+jNil2+SXj
jLdYuWk8eIXxa2rayLoBJ7DWfEJ24thgHcVm6BFkqcjrWPDgWGr1giTcy2rg
Zc9BY+IgOVRPugEUKgExcco8a99ray+Ko9zvI4Ypw8pijPKtqjXSikXL0Q/o
wZotZxw2RDS5LpZkqLH2DuuJ9RDBhcZSRIILMWm8cI97hTrbC9C5RpmVP/ri
qnVlIkWaW8WTWYHXoGxmTSZ0JxH73HDIgcjIKqWDjH0BsqAYv0+S4fCbmEHq
vMmKDuFV9FJR8TYux7t8CfUcZ0vyF3GwbycOXQw0A6LPaqXJrF21141BhN0G
hafD0Olw7xWGjm9pzK+cxhOV3X2R/+0cQwLooonFXGOgHdhXve/FcV54yQNb
wg+EKgBJLhaoM6GOSsQ7WwDbZv7iCRC+HU8oz8Qzdur5j7Jk7CVTwCi+slEW
7QuW18V0QbBcldMgx52KxkLbzLUXTtsfm2sDSvO5yCbkKrtXSKrAENSkiR9i
SbdXbwdIz2Q+iQPe5TD9i28DQOjWAFZfllfIYCSUo0uYeb+NiSNUyYPGbpR8
bhVNQHKV5siSHASsIpkIGIIfQk6mFRu0nvkBSauD1fxQtVdVXaCyyUigoomT
MYNxMpqynF9Ol4iSam35D/nLhh8HMXfdQKmsbzmxGSCKmlGHGIXP6mSdrXri
nwSk9xJ4zy95mV4QCpXsNu+gHsErtpC7N93YiMkoO2YNGlgDdESi+5/wY/PZ
1v98Nuz5+SzrfntYVwtzdl0uomd/NX+C9VWYqclGI/35FQf59bdYyT0H+dW8
Ml4Sg3vrISv51ewbl/pgfn1zC4jSwLYfNsiZkaQJ+vO8Rhta/bErASTx3/oE
wH72UYCNfv6Pj38V3mIGhUP8CT9x4sn9hzCYfZLpXj6jj72dwV+jVT+/2t+y
X71BAxDjGOtWQT9rx/BP4DP5ij+70c86Y1jhSMbwgf1r9K/8DmNI6Q4ZY59I
mFsH/vOvQEXCMSQdzY6xei/4z0ldvbsLxrCrDcf4irb3tQU2/+19YD8afg1S
IfDK0/2t+69jPTwePsZn3iXhc5HgKB3jJf+56myj1dwXxxIU0FvHSlz3Rvxj
cRd79iw8zIoff4xNNmfigfi2yQeNwT82X2zLfXHfMfo5wtox7vdzTz65wTdk
w/NnMZt9v2ceWQmOM73/+fG+L+1VampgzTuSLh6D4EUO1CGIAVfzf96YFpft
hkQD5clxYqlRbcQNiX1NPnPCqO/Jb/z6PilRzDn9SpcvJrpox2TjUr26yS2p
wZfoSithHS/F4H2eMCWlpC+5ayDyZBKBz7EFTYEhFK0K2PVyTknk5HTkhBza
xQ1KRiT+lxhcgbK9jaRCGY5dvVNy1KSntpJ8rfnHk/yuoaDWoqAI5ONL37GC
oUGslDkbuGZZ2lzyGDycKEghhSjFwxlJ4JPvUCPF2dMQVd1CvsmamJ7aIC17
kvvUj/sQ1a7WaeZXWeoM0KLJupufR5jwLos07ptKxhwNYw3qlJuMnnualx2H
sWm0LmgZUfbV9+fnJx0/TC17yDlJOFhT1lZvsWaS4oXG5MAnS7IQNBofGqQG
jOJQvCkAwyoSNp9eL9aKNGl2lhFM9owz2QU5oW2lhix3M13EkxpO+7Q3NWIk
kq9wvq7Gzpp8f6pJN5GrG9RLB2Hz00A7fdcqENFQq2A0bzjOobMGG3LOa5GY
Vz4T9AX1nApwkiCdN7AL2ojAVBAqEB5426rvDRyUDYYds8+SLpK4cA79RPbk
RRKriFsImphQIysmXL0jWGg3yzcO5LXO2OT0Mkz6JTPjTHeaV6NMZKT9ZtUb
ltwomfINBdY91SkU4FY08FdHg3IwAr4aenf9dFVcWMrMgTihfhOPytCigqDa
AU2Qwj8LYma07EfjGd/UEw4xcuYoHQFV6Eu46jbu0WUnNNZd1jVPSYTiBSVI
ajq+2OSjCGMaxY8ylsccnYxjkQcUJ0TJKl40o65m1rn2auVTq6UNlNFbJk5D
S8bh2k3fdg+3oajdqYYyeccVWJFsPYyVBhrna+zJZuOKBqHhNLCqBoBbVdEj
Q0obGZM9T36eyKMlQ54rtxXs7wG5vEpqYwTxK7D4RWeCsOZuqqcSExtVWBdw
nnRTA6IzMEVJ5HWyxNVzvNvK+H54kMLH0bTpxfPfUIROeg9ym5osOEasaQKr
6hT38WMnNWdLLoJzlQfXoGvadpwOxRwU9igJaractiWG3dk0Av92aFJ/Eqkp
2gFZqNILDeTEA+/beMSgNaDF3yETHOJ3sfwrJ3NBDmyS0q2wAp/ZtBZ815J6
627pzfIznBfBCCI+D+LLizWp9AmWnjcSNX8fR5hh2zAKYxjP6MzFlrN7RUdS
/j3j3AkONN46Y7urk15W7LHPIO0CYw2dPacoA/Bv56pLpDWNgekmA9dBdlbg
SemRk0PxmtWkzHSJtU8FMdDYxfmUTVfbYlTB1S0xBX7c9ZLZXPMeBcO4sB/f
j2VPmYKhyDBElp091iOj5MOm35xO0R+0UbiarnoHS3hpwUUdzoFMwbQMbkCn
CkR5qWnUrPhOaMliubKkH/NArVk/KbtdLqeXIJBpRERin2HtpxUCkCk5zT8t
/eO+LRdwqWxBUJ4SkdiBhaZNG38ZsR40ychXGK2SmcAB5x3KoIdC+YVu2LUU
4ZBlPhi7bDT+IymyRqisum+peXkRi/CdgCERsHNWSh5SNSVwtpln3XeUxWlk
TzRhgesTEfis/T5r2Qi/RRSM0LO3uBYXcMGQXlSMc2VmA3dCJLN2NWPOTca7
FguCVryDk6IIaGOHRd8s4QWSINwtFjJ9h2Htd95V8cI27NdwEX6CRZsjWEAF
N2CB8ZwFRYC0xc/myX//XZZR8cBjSu1mVVRnTRef0kKBpIfDcJdIhtEMiMQU
Y1SWM+UEQL0QlbBUzzsOx6UScTwAZqf6JgM7CK4Xp1JCUYPA2dCryuRcLHZW
za8qqr2EiQYcMycrvSibkfnvv3uSZV/903CY/WT+ff/1d0PQGTHLBccsbhHR
ha42LlOKppxVN6QMUxA0xZ0BijAHwPVt0hg2ERQDnBCAIG3+iJeREzxzmtLW
V+BDlXvsq6/mx4I0RDr5ObvqpZzfTT5dFlaUjs6ek0LFPjQXyAtFQPtVwdoA
1zEAxaeRUNh5NR/SgXDaAeUvYVan3GOnlYMKXCGxawC8mLh3hYnYS/gLKfkt
L3pg0Evb0myA15wufpdzmDDum5PUEA90OIbEHhrHYBAeOp8VQsocInhGj9sO
3uNuGTwDDCcLy+7wmHJrlHNqiUR4seCiqfI6ZTK1nJSmQzR9Y+h65AU+oI1o
dRsUK0j6H+c/AjBAp3tXNn6dN0yZINesMGuaEA2RV3Pk98j65/bPCU/F0jE/
epmXU+XalgDZNO/iXU5EUw8LI/lHZv9tvof8Ek7sNmdKr9iFhJOZNMEWiSB+
jRbTVvDIYc3AnXlL15KXdEFpzYzp/4J3gZJ6q+qtVkKhGyGXECSWCdpgn1jj
q+SMXkp5Mh4Izre6ps+uQRNvkX7A2bl7JItC06ZNId0s8aHp3ZZDogvSIVha
lIEoPAtBfc029GskpLak1ByNBw4b7TTIT/AcphUVmOOJmPJbgiBIjfIgXhiW
/iiFlK8gpiTkIQ7Z20Fm0A46clUAh7v28RvkitEFAMq3T0Gkt4o1vKC/cPFN
iQsR4ispUeffHJrj/df7ylnv3OUUgg1UhAr1kClhUVMZPOpXYCuD4bEzF4XF
gpb9aOeL7ERYDmd1sMhdzvI/YPHtUVVfIf0gEcalfZBiK+bU2+tqamUjZGg/
Z8Ph16DUb+xHd46TlW6LHB3p7txQXjYb3tWkuCRJl+xcXCWnHL3GeagadZjZ
x1y9m6EfB4g3qlNrsRPWggfjqfFhpj5gIbVj6NYLJQQguw2LQCRlqPwV560L
7aUSiC74WtOFMEsX5AVS1VX6jEYIDHjCx2ltPDmrS5sgW29F9RVonddEWrxo
ez/OnAbor9vQjVbEoBjS97BaGyWrSMy5SK9IAzTCzwP8BsiVIL4MpUSRN96G
5o3IpsNYtYGPLb6hKIESVjqnMLvMhce2VnTuniI+rAZWhmnWD6kANmnL5vnL
swxB01wD6kfuM6I2XJEJQLPi2OCMMx//4FoXtY8ZdKgXVBuYkSuW00eSTI9l
NEsuyOl6hUiop20ZMqSWIe8f8au/FIsP6XjBwGgRp/h7+jd58TwzetajWSp2
hWUf0rZZOqxsrUHWLwGhw7v7p4eUdcpBqO4WLgWRbBnYk0bZ4dLGVS9dmnfH
SIEfxvUks6Sii/RGlPww4tCawEGR/mU53v1lh+LhbNXDZLnK5ELkzKx92oWo
ueItfMKlloIP7BDZxpMRQnVI0a9PqA3OhvnhFDCiLoq4spUb3a9uZU/DomEg
eJMPrjvLkzQ27Cl2OWMn6tds7ozCeAkf6wKr4fnunnjI0eoFdFFu5Rq6JtMR
crPEMroDr1mJdvOQIFLWcJXTwQp0+2gQleo/qwHAWH7v/duJ+SNS/+U2bQYF
iHoXYA0p/ubvtYqDfQxyaewS5G8GvSbcaH2zLU4picig8z6QzJKlY3lVPwmC
Ldw1EaKPG8ssU0pVwb+PayLjLImlZjHfLzhVQ1C1kkrCFH3cdgrM+5W67+FK
SVKswLZ83R82b51kGe+qNz7e86Y56k1l6dHaTXiRWfunplyEFroUe9F4m/BR
j/jF0fPKOs8DxVspla24oxHGlkKSox3VHXXn2RAYJq9SSMArRKs5GyJvhpgm
VN+riDQNaP2DUGs1R9lFNOm7Ab5rReOdXc6wJ7/sX7VbWY9RPe2MS3lzMltE
mcAdDs+aoJUslWlxcU5uA9JfsbkrqSEzorKmVLt0iPcpC635vMRoEb6MRmUy
tcJonp0tCUH/WNy5vjFmE2jF4ZZnB1BDJlXqoOQOEX69tWlR7yHnkQ69azoK
kjel/rNfNFzr0mgrIbWKxkI83bT37/22OB8+sK9JRuCDw/VbsxVtlRk5oeOs
mJDaebAflUmQ1Exb4ikKELLBUANR8AgqAIjL/IZpdFgcB+SHK6z8WYrr5qYq
J3Gh9CXbbZB//NBI+ra4kRJnHXtuiNyjL50pBPlmfAN92IFECx9r2WMv9VM3
4yKxMje1SWGYJ0NGyOYcWJ38PTK8OEcTOV06Fnytji/1XHLN3wNwpJ1PrNVO
gH066RXhq3W5s1yr+YKinO03XjQ48a6VXsoUs8nuQcEkSzOsXCw+KM1jdWEW
vi5AXoyIwnuryFzqcTHDIjB6TaLj5WPSlTuH3AP2YBG8oy+WTRawFRaZ//XN
2ZF16/rxgrrREFOSkZz+7r2S+dyxZIjNkfLpcL6cXWCBkACsWqrA71/gys0H
1YrZpqYGIxsMpeOIcaTDl+mCzg5fnzFsKW4vVZgqKDqacbRo7IQ2LioJ7XiM
uM79j/YHySQT9hn3D5B6XA3aVQTFklDyh800O/ffTqmXIVWDLWfllGqAB0Wv
gyYw4td4PnrqR346AIWNDxSrgvjNbqwX7gcGYWWKHZq+C1lGSRdT7MRQ+rAr
xZxMbhdX0VaMLdGpkv4W4uUeOfP9yFit3DDyHq7R/uGR+72wtmlaAqYBzvzj
2Wy29tIHB984pIQ/2HXdQXDSFB6FUX0uVwLQMVIczPtHFulJloLFSTz4ZG1g
ooawoYyYW9GSiETmY4ziamaZk1HPPR33vLhXsEW35cX+VLqs3RRqL08F+nHL
AnHku5sjPSd6t6fz+iWX+k8yAfgTG0q5DuqLRd4HdRePGW8NRGJxkCAIMxvt
AyRpyJdH0+PcquhYsE0nCkpo8HqFwU5jtI/Ba5l+vUtl/O1i2FQtF7k1/+t/
/M8kjo6kszArIL+048WIKp+M/tf/+D+9IgJU7YJyRVBgoSfMNdZgww6n7tpL
VwD63i92aDaTk1sBFc4U9kTG042HLXODVHw0m5OF/wIQVgDQH1eCpJmZgBNq
ubCh04+I3HnRVy5apV9tUWsulY9kQRSh48OBg82UQCrLIT7UR/6dLSEgvm88
++FBYEb361NYvesXyY2/jtOjA/t1jy1Pi2ygGIYF3sjAzojrhRRG7U42XTQ3
N5LKtBKgDT4sC+y1pm2IXIV7NnFKxD4Hk4NSSiW8WIvR0hgBObFR4wfV/snA
607ysrrNjkCbvbozm9+8PAKsw34lRV4D4ZvG1T02X397oDnxqpFkcVa8b9BI
S5gpc4YXYkTlMizAbCE0v7JxGOfaVz0An98z/YGvfmheJoLgumTpbqhcD877
RVQ7PSACGrzZ73PYCoO3Y6UP3Y0EPeeko0szXOOG2+CoFNFye0z7qtzSabNx
Owrcc96ZQeYxQHxGasp5p4rOab+VUFCpyZlGwjI0Ea/rkXIQZeUWXhYtFhbu
o26WGGPdnVJVUFuqJQvLYPRXROimC/Uef9dqIJiq+UJ9ci2rWNUEBAGpXWXX
E0p0ogasOSJCXKArjq2EC77NqQp7xzGn5rc3Cy2S1EsFNQHBZapZO1RQfS1A
aTZcAEKTR48c6P3uALScbTiIEk4zMo+yyAgjyFPBLZAaK8ym83Ie1DrkpJb8
Emshzye35QT2fR/pTeFyfOk3qMFon9RbZJci5EwcYACdQE1YYb9SDMGIDCwl
KhUQYmyLYwwRLGofW7OSQOuYt3GuVNdTgzOR36OUNkfiKm2imUKTneuEaYlw
D0XapDuru4u+VYBkH0cL8VjJUExREboQNaJvqNN3A2nNBlwj4G0bmReE6znE
BxIEZcPNuyWhPATL+vnKcdIC1QO7br23zkXJYKc3CedoMrCBDhJlx2RMQ2cl
unyvdFy6ZoksrksWrcSnSLDisAk2EjwWBoU0S6phTFWJo43I0SYCWoLDltS7
27LhEC6HFR4aZB4ajIKQUE/cZn9YmYp0yTrXySaxJRwCQHVBgXEsZe7ymaWG
j0vMwtr65dSB0VkRmuWFGjtcpZPPvJzwTip+/MFnyT+Gn2W/qm74a6eYQadC
gvub/5DSJ+ZXm+XPo9jiCzpKOOyvaOF2Q6pqGI9ikVVHMZv/enqw5V50D+PT
1JMV1/LbwMUt3/0kqn4knrBFvn/NfkqY8X7WoVFXM3An6rvuOOsm/1UG+Wro
/3zkIMEYX3/kICvfWD/IT6HvPxWtkq1IH3RhJj9byJibcxnz4yHzJ1nGafEf
fy/I8D+wneLTt2OOCHSfsp3/DB+J/lz3xH9mP6mo2XPQFCbul/D4OQ1GwXxS
A5KIe5+zgPe9EzYfN4j79SeORRN70b/8/HGDqBx/Q9T14waxH8mtjrbJ8PoY
/PypeNdS5gwzguPDnuNZMwqXbTb5EhQxVG3uP4qleLol48jfCkwJnv6voGch
mqdSPu+L6UP/2pqPxPTE+odU4CaJ+Pcf5KuhVyVneJ9BvvL30yy61OxvSnVU
1gt7XhWZC66S8u2ULusHLDrG4iPTR7Ncc3PGY388y/1q6MHxE1ZSfOpKfuvT
kdi1OFdaPqXKDSJP/m2ZA4zgHdNvdu+GSAJG6lWwNNA8hCQzUesO0U8Gvd9/
UrvSw8nvij9XgrH4zcG4chBboyqlkGm5KlsMO1lR2ilmK2tVpZU004D26IV9
SIXjwDxlfQxZUFWnrfYyKesQRWJjydNG4hbISNt4yiM5I6JwkHQJj9gM5k3l
zLy/wfiJ7I4IHpnpmBqiVOAoAuRgX5YbxDlq8KouOtSqPxYwYp6xhfU5bNIE
ieOC1BZs4sct4jX4RqNEVYKEX4J9uPZg1C227+FAwplLDhjR5yMv2S87HYTl
pPaFJLdGRcg7i5ToWM8P6SFR0FFXvfB+0nz2/n3Xz/zBmUzJcakLxKYbZar2
dL9HSJqduFjU/jD59+9dXgZGa55ght5c0sXk7mnxKgnPLDR4KV1uJXooCuBj
9KdKDHD4kSEOnUYu3K1Titd2LPa9Fj3oK/Y0z+diox3MykgOBx78IBXLETe5
SDs+8PgpN5gSaShGi6tShXVUnE1EcGoUQPWj4PmEbdMWkjQkUhB/NIyecY80
ZlOFwUaq1b4t7gaUcGRsEo7v0POCqdMLszYezBpg29iTMG2fsnFLkJRtLOfL
1EjkHO8Y+Vb8BGatwKa34iewywXGt5Uveda9+7/kGfM+bk/rJ/HnG3LayAPf
6pq2eQAUtswaA5WTvH4d3tONET7uG9TTy+s8TqN4+Rmpx++9eRmdxLUVe1Tj
AcjoVf1gAK+oEyZCu4VzQmP21XyddLOYLVyJ1f6NfQwchissjr8JHMJxRyvE
1h0VWlUiEA2VYjtiTqDr3uqXXF29uDBGQdKtVrjyNE6OGS6FsZy8OTuPG2tY
uwcz5FTGW08u2kZfWEZ6PdjIFAF4frdQlyqsEfi4FyX/5C8Ntmqb2HZU/3r2
5rUXmOP3tq4Lr0stRWHe8zrvkTTz4tmQstfDhFSs7AS6aKdb++9MdJtXDELk
U1hVZgLGE6Ro/a5Lxjqj/uuPZ0Mbser53ysXKhCKvzHR8UMWhOd58Qp+a72O
WzHh6OYuFVmYh92Zs2wxXCgu6KYZGQf7QR9iqSTcIa2UmuAFhNtufdgJOHS7
+ePt8XiCX307sQMx3kyv9vA/WAT6eub1a/JT01WFUSjRAb4tJ3vhoqLzS0YX
2KpK/c5ePO1zCU5ZvwusYoOVDOI7B1dgttd9TVqAZJtBbZ3Eu0MsofLhw5YI
20xzJkO8ohRtIfNzyCsBC4Mwra+6nOEm4XscZg8/H8LnQ8r85wMjIAbCaWLk
pBCbcRFTpCVSpqK3TNKAxEQmwbujp6MdaV0XyMR+M7l14ng3DuDPz3e3OSr7
NT9BoX1ObdaEmW6At1XuRY58TxxqA7BxY89sHJ3tPn+xwQVFNwDZ8DPGMEEw
Kqzxz/+8kX2gNzfujwUwlMzljhWH393e3RluPxvuvDjf3t7D/+2Mtre3/5uu
IoAEvoC1RIri2ec7OxvwxAdZiTFnx9+93j//4fQIPrH8Mm8myiCl4jKlPcWL
6+WHPyyoMse4KG96akaoXBIkgJ99/+aHl4eZjSK2gV/hMfQE6IWolQUVuEif
lsSai0KKshDbGpbzIZDv5BiYgjY8HNFpUSGS4V9uG53dpiaGRKxniWff7798
GdwXRxcte0xdjs+f78AOPpEAvns+Xk0A5QC6FyBF4VafQkwYMq8ZrL9R+MNW
pei9D9a/0GRpqrEXU7xgl1L8KyR2XG5vNbGbY1lQbzBsbH23aKsrUOGvpS4P
4GiFBYKx0MiMC4wummI5qYbykY3M7hDP9UfRR9RYINGCNdFI2nlz4vwy+qSe
41pI+60DuZyfy2S059c8TJAjlPDDdbmc5yoo9EcCw4ubNkIqb5wiaZErHfLa
K8t1OFm4FGRhHd68Gd9UoJjAgfFZV2g5vby0mPoqv1uxhjg40cQVWcrLtZPS
8QetDOXyUZmtGeDa1FWPS6GJza9puKoZRguGNTTWCChCL136o0TzuiIfmpnX
zVx1/a1he0DOvOOWbZAQyrR4FLDpBJfegBHgo582Xh0ff7P7l4OD0Wg02QcG
/fNaDi2fKV9ey5Z3Pba8QWQFnysOm88+e/Lt8vD7736Yn757/fRo59nBv8EC
+LlV3JufsBcbv43j+OSR+13PXmHFHyWUSO73/OrR1wshi5s6IYSkmc9Kn9J9
NN0ykh1W8X24YZE+rEPDY5+hbuzPK1KNF2sMc6W0bM4z8cp3IvO0JJOy2VmS
1kvqCluw/yaZfo9+onxuMh2XBDO/MC0H2VBWEvo7csuUu8NzeD2zySDitluA
rFPjN/SecGGHN5gok7K9X1MNAhQfA79IhyKVktQl5C60vWhHbq532VORiRLF
bQ9d8o/0VRNnXVcacw8yv1uyUjKBg2RmkyFAY6Al330aNIAtZ43fOSG39TT8
Wgigx4f2+hb2e7HEkilIfC3dD/IFRvczSiXg8tsbpLqTrLFJJVaVuDBZ2iyV
MZ/CQ0dTJkmuI98ow+zGbUwKGVBBWP8lr0SkZ9HKoqYSkp99cHbqH0wV5GNj
I9tl6wHcZHiR9yxOUIVY2bZtHe7k5ggtS/9yZXmTQK1RUgfz4JpWv0RHYe3L
Kx2QOpF8TUUFvV94zgQdKdGCrlGs35FuLK8B71rGLir+p02+U83jA6deWB/M
OzNnP3NiB9/XQbcDuV+lYJR9X1DGXWDuwjo7hTRY1xbGrhQHaU1BXy1f2CL+
8td2MURk8NqyXtXVcqHVPcdNPQw+oGEIoH2q6rxo0Ws5bHBseJ9o7brSzkFl
59PCq/vRLC+GWEeN16uD7sH/uYMoVW3OtGcMJV622n+CDwt5N2ax0bal0PIh
pUpSRQNtoLLIL0q/iakWQChbP7EYzzNBo1GjnHJdcyLQYRqUdYNLsSRtgU4H
PM3HjCryKo6lv2biBqY0TJdB5RJak+2siSQcnZ0PzMGrE/zP2YCqaJ0dHJ0A
nobF3xt7NWyRX6kQ48bOdGybiDGlFitXssOw8rwti6nGPs2N6GNtIjlIUEne
ZiuxSYQKRzZt1homXwWdw6N5GtvRA+CCVO/g1cEoJSyFJqCVREhOKtOdHMsR
8/GKPQJvPf4RMG26cJiiJ+pG5ukb1BP5ugQgu8qklioANZ9bfushTebI8kUB
0AGJKdv3EnH8A6BqUpzRzr2/iPU7D3ZQYUivvV+ckJUwDmjwiqh7rXos8C+X
dYuSXNYdu6GGCLZoCp0mqoZaFWMd5fidCQhHeKspgCjzUgwHYU8HBAkCmoJl
TFwnlauVcZjMBooVG7Q0h+rS4kvifaQQCAGGrbsBMgL95c5a2trLbZE6guVy
GAPXJQaIrA3CUWFyknmygGKIfSMAbO4GVV+Cx6AN2yS5aDJVdNdTCuKI0Jqg
ndWzQHuXltd9YpzwJ0RSzSDPHNXCrY0M0uHVNx3vIey0dgQReznQ1HiDqazA
qwPcavrai0ktine5lfIEXo2jUlrJhKgYUHRqN9N6lfxk9CZjCcyu50xbvUcO
M502sj6WNcW++BcuWn5aWL2flMpyZabxVbqXruxaNUXSK9aJeP//sE15BSI7
xkC7BUUMaL7b5SYuWoC75e+ZKFogaO0tdrYRvSNFv4v93HdxZ3v1NvVEO56i
8+siFhV7DF6pWm1C0jPf46XSr4epdCZekmOvFSztrLqfHcyCznmjBIafYt4p
Vph3unjQa+H5UcVm15NrjZtI+lmtK9aczl9vgKuJFJoscJwoIPQg0TvFBRxR
tKEAJBIAev6JS/ZzlGGbv4WRuGyIc2fajHWVlIzZJIqZ9ppSY1UCwGu4W1QF
JbS+t1iPDiP4MhLkVxpx3JmscByhN2Bt5WxVA+YkRsZJwyRdN8V8EjhCbHBx
XwtLsmFxtxnk61R35gHlSwfUEVADh1D4lYml8dyMBRIMrpw74zaqHKIsDViK
5mJt2HUu67SJ6vSsc8SD6gZ1c+mTvXf7+w5KbLQGQn2vwdfDTjj0ZtgMfKsT
E621g8JNJGvI3LcUGApQxczGxiRjwNPH5I3hNTsO6ypIDcpKUhToEnNbV61n
1vRENH9U1PI9QpYJhzrRyq1B+VeLU68rb6aNHuK2gZnfKfDibmC4NzvGij+B
/58dJuve4j3GScdU5aiXuK7sR+ri/DebrYfGJ1uuIEHAuJowDrjxYpg7nsO/
exCzK/394CDmMC4tEcY8fHh9go+vSfDxdQg+ufbAg/fZE0CaSHPy6wt0SJVH
WX7OfopvBtrJR+bnB0zm/vCDdB+WWfdxM31MbvZH5WJ/VO71ilzrCEAMpBUv
JXKz173U/agvMfu+b6cTslO502sTsB+eK51WxW1WVYTFgNdKgZIJ1HgOYcb0
R+JocI6pBOl0VnVvjYX+l1Zk8rp752dND++TNf0bZk3uxuHnXg8YJT0pCSk8
n0jO0n6VK33hHSOGbYaE1qqwCJyLsPQrszpzNfU46oRxkkyybKiiKo63M3pK
LRDnxS32y6T4onG1RNv1ZGTkkV2jT+ADp0f/9sPx6dGhlsDs6GDlpLCvBqOL
leDCKwjcGYT9ejrvq/1/tzU7Vw+ZuRrDMiTyqf7ROk2K/Mq5yZLr5Atgm+LE
9ngmcT6SGcWc2FFnwla4x0Gf4iC1kI33Ub3JsGp7xANjWdlT2sJEX7LAp1OA
Q5VNGn91a4KFZfEQvD390UYhSpP5W8IGOo6HwGkjjb77ggpH5kyrnmPxrAhM
Yrnnafxa6E7zdhX9spScnNByN6Ozs0Mmhtg8eHUmETkUwrrVO6gaxHosmE5h
7q8eE+CZUdc6es+HqEgMEfPJjS6ntjIgQMbVGKrR/eNzvBL1abQLI3jWRO6u
j+Axm01RYG7rDT4uDjVug4GCH05E+mAfaDtBP4XZ2CcRamNVvI+xRfBcVE4A
hyj2Z+iCc84Tn2bBuxurNrzxoBAoP75g0a0RnC6k59CILNeZtjym/VA9uaCf
dbdRYcKmjVX0vLr1+GrYY6i3PKlprrF4gZcgkwhU5jud9e/sIwJh/dhok1RZ
wxKhxRwDJqLFUwyz19l5RbFZzyDWFwIbklFapYWL+GwkfdM29ltdiTVoOiJt
cSecZUJXAZMkfFu1F6mq7vGwuiO8GxQX1ZHipCbXpihqit5FSXRFYqdIV4w0
8LniuRvy4C2qBm23d79N5G7QqxL26rbUrj0FDpqes0XVA7E6fMnNradFvSNv
QAbEasFovrCOMBsXQGHvbDbLNVjDC7dJFFe4lbAf7PjAc1Jc9001vXEE2oSS
KdotYKO0FOkSAYJUXJ9XKKbM7hCLArWebT/LirpGWzQJEumakWFkRSrVEj1H
82w5J6Yk7j2iC3PlajDVC+NNhXUYKq6OrY1sR/F2yMNfTJqYwpCkIIqzJxao
UQx28ZdKq22z0SV01q0gbFGx6DZoP7VKlpdCIFF8psyUPR89i2bC3nXVhfjc
1DgWVoGIWWAcSOZCodYVXM16snA8gn5+7bU/5om8GhlBJuLD+FnX89q7zH90
z6s7iW7AR8r52r/RT8jp+Tuk7nQLfiRS4wPiFyb7LEo+g9kKKvLQbJ50Eo+5
D8vty6jsMMF1eYsGYINNsqVwSOjvUzF0xZ5xvYEgpWFV2Ob9P5YcLtUzcmq9
vgQifRH6AvtX5jt1spy8DCi3G/R3RhkSW3ExcK9HAckafvCuRCjVhR/JFcur
XNLZF8mC8uXdJG25hn6xZCzS7hLGwyysUD714llX0Jv+TJy9pCRz8En5R8RX
kmAZ+nIqyRTiSgoKBRTeMXYyWhRcK0IpYqK3GdWwGWQSI/cbBVT8vdKKdvee
fr739MvR7tPnf5e0olXVyP/LcoPqZG5QL9m/n0k0CCDo44hiEiFsX2ENyTXc
/8HWkP6p/+YJSx1h3PYPnd/LepF5Vov+fKXIZuEezB5ioFifm20DU+isxGC3
7njL9p7GCcfUvHKDcZU2J8A/73Y/ji0TSfLuOQZCYRcNg97MHR676po+zGhx
riBE4zbLKCRIaJYZY0LAmHs6XJCC1lRIDDwJgmJMm7bw+8z4FDlWbgOtNCku
pA0c0R78xbMaS94C43Ml2yshzZRkOxqW0ckSvl+NDA4R8KS1zlnGZS26Jo7E
YbsykaTf9Y2QxdXvYoimGg3LkcC7NsnOZ+RBWG+pFVVsehxZf3DVK1J4VWTz
wLml+j0VFek9FSMtuUgMHKxDmESFlMgCkgjXCVrDpMxQGrxpOl05BASqhGO1
HfcpBXTZ2pxSOyW6TlHNIzV5dIr7qMVML7jXAgTvgMVwAzQHwI3pJFMHVpRV
pKkH9Xlx7T6Sphxv8JQZR1jkKgsOo5l7gHMb36LlJNTjHUl90bGJfPVPw6H5
85//jD7qjAsRzeBqNGo8lTKnPP6z7acDtCvhf14M6LY823k+CsVy+45LeqV8
O7Fo2gu6vODcoIy5ZMAkKRsw0AYQUI8baby1RBdG0+baQRhTfRZsY3EqLaUp
sf/Od01Zx0S/v20NTw0t6WvECNw993FhO0xzR+Ed5Vh6rVBImjyulQE8IxM/
5GqzPH3xAk/t/XuEx5AcLdgMntq6FE6qU26rNQusGeqhAc5v/3pwsH++UiaP
5fD7SMT3kKvvLaL3Cv6fp+oJgDBezok8clc9Fapxs4tD2Czs9XaVPO0EajmC
hFDNfayYTgl0VorT9LyTpG1dEUZ9d3VYuoocjCOzf9nSvUvUDorUPMzMKVBl
wLBk/zG6FJT0kmMTe9vw7YrsVct6UTWcnlMt2+k96EokG8Pwt3kdbQ/pHOb4
anhqvDHb1WjF/noCzhWUmU0WSLh6u/T0kENYMWvUhr9GWYC+ZRx5RW7q/NYm
NFgBgIOnu9EGTWz4t+G5vBOX6+KV7/DVatdYMZIZNJm2myiRia3LE9K6+Xnh
0aIXV1SCH6+pki71P8XszJXwTqRLdppVfbwKCKM9aSjhk6dR9W9dVlEycShm
ykI1bcKTA67HrmNtL+t1vXh8eWRU4uh6VzLyrphP9q7sYzDa0msnPdZ2yLBC
xjepTOQ3YDeSibGJKaaYFY9aFAXWc/ThkyDo1gXrUrmcJdkM0Xx9tyVBPAqO
wgkxIDLwLjx4ZJk0gdXexDCh64ZtI0I0coBTvTWagX0C20+3P3wgecUfJakD
5pyV3+1o3SBCa4Ry3jhlMsq982I5vMTj/Davvfy8MK4MZQ9WhplS5j3RPVJI
EgfwssdXtlWkJ/DChO1GbeV4kV37GrPCAD4dQd3v2I+fD3T+xMWyiC43DM3y
eMfi6+UM3l60QKKQQOjd7YqJoS3xd0T3OkfptYqU4+ipaujc6Z0sMm8RHWXS
WwRrGFy/gE03rGlHXsmwmEJgDcnM6sAPPRPqUChu0pj6aH2EgGd4/prkBsh9
hT1QT3a2NwJN0op0fqWCDRIKNLfKu1Daptll2hvTQQ+/XcLabK4gnav3lEl4
KWk1Yujv2T4s2xWyMS720/XOZf3P1R4hYwYhR1id54D7PzB/owPZxI+rugTB
CMiMSw/zY9UYOi7v2DZidkBBAYEfccXpo42gItDW1V1YCidRAsQhVFj4wysJ
MtDdeLnTZIsQT/spCLKqbms+1ohz1YJk/FXpezh6mKDvcFyz6ENNXFPwORJn
rlJiqjhSWjb0hB2fWYQK3OLtuPl8OCtnxcY9Egs9VNzrSjRh0w/Otm/YEDbv
SBj6GLPCbhXibl4Zsp09YzLbON1v9+rAzGzP40nVpe4/W7n/npG9MN9UBDWS
gKIOQ0wz0DpFwHCTJ4CPcNgwUr8kNNW7jEcQfQwGBzbX4oR0KWs2nLrLvtFW
kc9t55WEsTzbJFmCvWxl7nJvtrxr6nE4Od1Ni6xZkLcUFovCDDOcfzytxFgS
RY8IyiYX7lv+NGw1GB5zvogK6rnasIMABRvfwK85bL6O5VkNKPw4NhTT9893
v9gmWV/TGmWON5JGzhBONHuBJfe0enn6aa1eMH+OI2hsjFe0bysldm4RHgwS
IiAWQ8o8FvqZoFw2vruyrcvdx4NMCm8Iz9E8QN/sfL8WM2ixarCac1XTY9ZP
ntldXJZ10/b3Tw/zKX1Zl4PkO5Xi1qdc+ibvdMjLfdt/PLTzh5cEN7xP/46H
9vt4aKuPj+vyEWajDZUOKVi9Me/f/iHo/ICDRt3ovMQsMzQPa/uAz2hOZTCq
24fuIcXyPm0fPGJnG5+4j2DUFalDT13qkOyGhLqoc1YifzEiSw/KEvLCY4og
NoYSM241b2Tceh2jwiyOQCXtsbF7xdZUznBV+pySZQv3gNgPD1HQADWeX9sS
o6/sYMxre5pgrPZPdzsfuPAkp8l6/h+Qm52du7w0V6CqztkqYA3iYXEsTzUM
Rk+FcqIhc7TT8TqL/bEvksk7MdJ362KhhbJy7dnWUmOCtr4zM6xKoZwjEbX6
ecdDs99YlwWX8rHVHYj9ySAuyifCB98sksUKOOqFLGfIDlRvCuAlN0zadWSe
AMN16+Yhi9Yt9napP/efvhaHXX/aBcmQgyB6ieSYVK4WwhUdIoIUN7hyPENb
zCJHtJNAjMbGjmnqigX7FnF/SU2rXBE7qpCGXeAYGT6tXoy8BNjUsLNkR50j
BO+NPdBcC/mIV76xt3GspOQGYLecUfpWPpH4EQL8RvAKlZcs3qGT4z0s0OLC
hoGFYirUxrrAIQJib92ZmEdZVF9JLVMs5m9Hy9xsfeRMWMlKanZrLeEZGg49
QyRiXaKo4cBKqR3FtdVOlEFyasdQ7XS3PfQ2iL0RMJMKfyXiRwJjYRhyPnDV
JX1b1zWWy/gH14v91o5kBxaR3K/UZqIis862QKUH1Q0hoi7V7NMhtWKbRJOn
+v1mNqMo59qDczVo502cZ8RIbA0TXiEgiWxw4R2iGP9XMpgvO+kKf1sWo+bH
FWymA/B/GBbzcj2LKe7JYtgg3sdQshRD6bKTgJk8f7H8a8hMYlbSYSQPZiMP
ZyJJFlKsZiGherCegzygfpYneXM5LCBIYqTpYI+xtDmIzOJVKTYRNQhes4aT
c3sJY90i0R8vpnLd0lDPPt2GEsJCVtWTem0NJ/7us+idDsh6fAQUSKeVPPwu
Zl64i543DkHC/d/QzNHt5+603wAecdeq/7eVDbKWj3/sskH3f8n98V9f/kfL
4nCT7Y+diSvYcBUgdyn8dq3e0z9pA0P73KfUShpqVRfZwd8OWA99qd9a80z5
xDdhqZaQpD7IFkNik0/T47qXsUksFWqJCTS8BnVS+3UgJOBCSCCRTlsWzcp1
ILZhkZSq5XTYXqeBHyyDHA1dDLEPmLeW3S+BNYh6sDVosnSLkRQE47IXMV0V
04CGdM2qiSe/PiAA6OPUPFnMLyLukKiZpQ1SNj424abqWvO7pkT2o8Bzi3Ls
hSlYm1RgdUjm+CbjIUIJM8JGnFAilZwGiNXS51fEkVEA11AEITOwjmvqSkJl
HYNYBBccEAVh9qdGgvpKVWDGbsNh2m8SG9ByNh5XtXah8DOkPYNXOrJKo6Ez
H1nM7jZV00Y5OqNIsDuKzgowykVfjUyyOCNqfUvW2jKrI0iyBFZI5+tqntDQ
pPTZTE2CbVuMr+fluARJUpC0k04nufVYZ9flI6DvCAh64/2daYnmfNGyell6
8q/pdpPtgIkIjp/xqMVVRQjTGE5PlvOlsYs79ffrJjjMHrnPELmPFRLx80xB
0G9A/aITCXo/ihyqAF4l9jDU9dyJsfekwrFlx6tofF1Nhaj1Bk7clxymlv/3
ooa8ln8QWlh8Ki0MpXXv9P4WFDGdbCT7SsawrCWNKczwAgw5CjtOAe5Cw++n
5cVKwkXm6EZ7VlbnXGf1uRd1hvf+/0afw0cfRKGz7JEtSallCvcRVdCp//5R
b3J5pOZ7sWNwmdo4L8Dv5OKZ+LKwAolLRHV2UcmtCRtGWISJCmmH5Q3ignVo
8jDn2OLosMyv6nxmok1Q+6OJfEcxy00L6ADYu2Rak0pUyYKqiJanWSuAvCH7
6KS7Map6xnaXoRmEnZF1wr5Mraj8/DDaSbz+qDcfhdU829ayMrbygC4NUCUL
XjmTO3WUj69BBZjYWF5vDlYRvEZl4voMOmC5ofrLFQz5YbzlJ2zLr4FmFLed
0ajThmQZEa10BiaBdaeUnm3wQSocj7PX2yQ3y1xvrtRq9cuMjAr6COmU9IHL
7fmXrooZ/HRLnLhRineLEjD4E0exeU3rBgF0WM6EYbvXQ6ay6qehvu/uzRIp
/mRIGUX1yskvyjnca/dmN9mp7/X4Te8VOLCbirnTEE5n/LYJBgGyATjmbZQS
t9bCKDXpNG9wtnlxC4DCU+gdZdU5rcrjDgfsgKsno7u7jPjNDi3qXXn6zbVJ
5f+yas6VJ+vmVKNLj+kEKDrRhldMG/oZlpKXiOT7hMXnWz5jitkjMKrMcip1
wOTKM632EcsIiVRnauuoheXDd5JswMaAZv2sQIjcVwdvDo/MN0ffHb8++xpI
POyvtyzJHyj/cGd7uPN8hLDayDK/d2HiDUqbJLCK+8bsjHZ+n2Eycj4DtpuP
Gbc3lvV8DwfZo9j9Zu/dbLo3b/boKvQNvvF7ynUHMeGd2eDyYiTqbtAEIKKh
65ReBvpI3Xwki1Peqce/pz89zsAIaDbIJCYjkE1JO22Sc3qBXSjYm5KTwCav
Echpt+SlJTyhTXuiDPqiv9h+tj3a4MmtjG029Ks9c3p0dn7w5vW35kTc7fTw
h3hbMfsKdnczrldvT46O18Zo5SUZ515AFldIzOyVc/5nVio4qj33nIh+5S+5
IN7r1fyikpbDos52oKErJZjA23smNJmeFjNUM0BcQMn1j8WdCbuROIBV9VU+
L/9qGdbG8dH5t2b/9fGrffMjUAoc7Tvk1Iw2EqdKT/74nfmxuNiDX7+6btvF
3pMnLfCDhjKiRzDuk9urJ5QY/eRrWi88/xKuJbzwFTCYaVvt0bd/0Of5qX2q
l4ijnrXF5WUxN9/WZdF48MEfHaHhZ0aX+MwfmhIxsRmNq1k82NG0rFrzssjr
npGwVVD9hzEG8abeP78GrtjAhut50TtESw8Nb+mhVat5BQiSF1Nziv/Wk8bi
XmfI2bj+DAH0hwaIVjGd5fPROP+aDyNC3STeUna4XrQQ5QKRy0uNBc1pVlJ+
azd0Bc7/prgT0fwvQJ/m4zt5f8otYK7LRT/x7ljXM3oZmclbGBZYEzCOx2gi
ejzgf83rN/S7VjnH38mC8JhvHP+hT7HK5n5zbx+8efXq6PUhDwBKqryOnODx
m5Pz4zev918+VsFcYIh+b5LntXBnW9RAPtC0kDce8bhwtGt3Z+dLvq0odhPQ
OSv9i+HOl0KBOhRn41hSfNSJn7ztdNn/DD975k/cnoe6uNkml6eqpyEX1xsO
o4z3HM1NsXXLcnl1T54wN6fntXtVSPP8SncGFfZmpYCvK4GRv1OFwG84d7mU
oJGcys/dS2noA6XZsFO00nUV4AhLfGJvAXmXZU6UhZS48j7GtqqBnTeaUybK
l1czLxxWvowWZTa+0SihFPtfLiot0qM/cDWW07zGHliyLvwB2nSZKJnz3nuR
MnBY2vu993EXQgInvHPdEaPyRNK++ScpxvlzSKXEMmVjgkRnTeSK4Mcn6l8P
xuAC+4qCrlRdeqzw3SCGGJuLLaIOiY+bUPUaeSD9kKWgu1YY/ySY78/Nn0fP
t780N0/DMnrKlwfkpeOaJQSEcMNIATBlZ2ANAc8GRqsOuqCr/bPXo53wTa9V
AQbRaUnYeom9wjYPj063wqnDt+HCHJ//AGt/8eX2KD4/m8LSTVZ2Zjc0bIvj
I3jde+mXKTwLD8H1QHlvk02ok6GUKeCuUulXf28wiJeEoWfPXmypBGrRKHwx
zi1Mpr5ZpKZkSe/HC5tJYLKW6VpUi+VUs5lzh47dCqvez63k/sd1IF39Jr9a
k4/MXdFQMM4e25459pw/52gorabV1Z0ZMrpYnIhghQiy58roqH0IyFo5NkeK
R6eMR98gHoUDHOTzCrMOp52HD+BhAvWhj5vh2/E7iKjpK7HnYkz4ip1wr/uu
7ButL1IL/b9PrfGDBFdY8unLaHrQQFAp7K4JEZErqZ3bONWX+R0wChLK8Vg3
AaW7w5FCY/5k9cGna2mWq2P1v2lT8BXdyCDk2ev4LQxGM/6CFwOiMLDmAnKQ
As1I+a4izpjg1hRlV5JEbpMPbG258PUwfHsYqZoPoDt2E48jBSrWjdeSngjo
/5sO/UPSoYBW+P9+yLiqVSYWLVCFzr5eZxWUcN2mBx+dN6p21UfEH5WKLiIn
2fH+630Mx6awe9YYpSjMpBovbfkgtNmLzUVtjPQm5/FisgT96eMhd/9w1SFE
dMSkRgorm+yBNE56E/nNM66788PpcbORqBq9p2Gg+IRJ/9gVh1S1B0rw89P5
98dngCk/i3Ojr2p6f2/Q3iFSbUQj8uH9uFGi5FWbQN8dt//lREKIff9gHzG5
WTm5NAEl/70UGViDmYBIJxiqMb5L4FLRafYRF5Vw1oiwB0hYINDP+vKwP2rt
JeUQ5lWbaWHMBTBvIu++jxhlASCOVc0FcghzgfzPqJ8yLmVJ2alZNyMbiXA1
Lomqu9IbGttgG2GBlFm1vOus6xA3oUOcXx+QknxTlZjwelPkU/6ailMFJd2V
+1HAu5NgYtg/emSO3l3ny4be22/bfPwWQy1Y9UOCYr/M7ZfauUzjMg6rM/12
00U0unBHxDOQLNrxaIvC782rspESSrbtrvoakJIedbGzSZQ0yPbjYHIOLyGz
gB3Yz51P5UFhoWGJ76d0Uvl9V0WPSdFy9GkgfnRoReYX3Ql6nnj1t6mvn9TT
8iimPJgFao4nsvRqtiRSiubWV0Qqv0Jlu6WAGteMaRQ2PEivgnJxgpUoXnum
SUEGeM6F7DBqaGfCdKBOt6JzX4UlwJaLUsuHWuRD+/xl/hYd4TGcqSDfEpk6
2/0Cmx8zlEYvxDi4EJhbyqLwzs7oGTY/C7A1tpMcuM7KGLYFZzLHqOebgntI
1XkpscCc9lEXmsVWLVC9WCJd4opGM54j2dtcsse41ZEen59mJw2zGUczrjdF
YdjXMMlwWmJFOY86wS65MzaPKGEF+R1VTcm8lo3pvB1FqBSKSzxGgiJ2W5e4
AKKLIrBI5XiZsHQsH1XxDs6KAyCV4JCJnGU/iYAdmf0pCnGUJDW9Gxg/JUzB
pCSB5kgQ3JxS+6KelZm/X/Tq46RUKitywfbR2CDkJL6dycjMbFVvC4IC+u3C
rqQYycWEz+sDmalo7pU4W1NX3vhcrwGqg6bNLLolcUjpmbs0n5vNHkBsmSxq
vYSRjHeCMr4/2qmsRBp8SdN37jWw5BmLACQLZBxc2GC5YjZKtSTqjPNFIyoW
nTwZSH0Tql8SaUCuabe7deDax+nG1wO0XNswHNwMyRoUp4NTsGtROAk5W/xA
U45LEiJDkMCbyHvl960O0gxst9AN6yXYcD7dAcspU7kIJpsXtxz5KSUsnKsH
bqGNNovmlqnhTmT7J8fiFGb4gZ6E8h32eIcbHORQMygQO14fsbuXTvvF7rMd
OG0KjbeOYMaDbY7K+laLQHMGI/EjWBAodgBCOu9JRRnR0piJl6+eDndYsDxF
xad+dYZn259/+PAzi0L7Y1QjkIlQvbfsx0IKrU3LtxKemM/fsgMgBzJE6YQY
jwUi4gAREl3B5ZhM/tk3NdKNoxEoq/UC7Zf1IOEpHJjvgJxdlZU5BXo5L+ZX
1+Uge9O8hSEOclgGUGtgE0IiSwxiXSxbPbXxsmFX4JxOaUzXH+tDYRVmc4mN
bnFnmLd0ASIY7vH7Euu0kGn9QIpzrcoZf/8IbuIv1/wSyOrfIoaQV3lSA00c
ethPUcvDvLmbj0XRGG4/NcOv+XH/GaRY5H8D9Bpub1OpwFcVsqIfDnYZQ6Uk
qURGhqVwDbEV9Y+R3E6Ii07U+y2KjtKnHZkJZK+JLWZMIYaTfNHmNpexAeG6
xgBWRifi0XUxg/XjMC6KV/I7qf6MmFHo2R8Odkb4JGx633Lny6KY4BHRScec
wC9CyFtlp141hlPBoYq8nt5pbOCaBkjGC69R+dD0Cz1U/BRHxyCWCcdiMDij
KbZGnMK57jkEAWJEMoQGaZtxzr6LokW2OxV+7nJOLZI4R+DvDamVqlZxeAOH
yTi/3uaj3e0thv0PXHtzko7noaX7ClnqqYwMljq2q3aH+h+PLqHjaQ4/4oUc
a7FKfZ1O2MNkIKsY0GOreg63X6CsJFElcoCMEbY5L5Xzg0e56C6AQFsUx3Wd
7bJHnctttnft9ZUPntJd/R4oX/G2KBYkPjCpmKBOOudq6d7qaFlJsMVmpR1G
zY4tk5zzYUcwLxQa1RyutKpQdMsg/FbhoZjypDAVTOQW6NtEOR2jYzVFx2RT
e9JCWWkp7bP/dn6CMoWIJ1spIO7EQNwlIB6K09ySaprIa37t17qjrQBxHGkx
P1boYc1WeOPB8T1PiHEqrjhlhaLJTWmlQ8hMyqnq7GKY4KYHdYWhzt0TAzBy
KV+MMBG7L3+9J2jwaFc1N8mW/zphtcE98DWndhBTEi6uGEOnGpG/cpan5uSH
ly+fnPxw9j1OkbTsZOxg7mkWUekSRF3ymY1N2aFl2MKbTNwVOuuLjiE9omVP
OFkL+AVC/Pzl2fDk7I9KZ62c36kMvSU78MxHIVvhih+EBRwUkd9UNbcGm96x
6QGGuC6v8LEpOa/0OKkSkt+SkNGARM+mCD7DVWCFG71t2mVnlUEZ09eQilJC
D17mOIQpjmRPJUlsymHv7DKjOdS2G3OuYR7GLHVKojpncOb7jHXUZwPz6Dn8
/8sttzVHLoSziYGPj95RkF5VGs1H3TbCkQ7ZVtxRobumz3EtmfatTLJnoXwt
W1EEoi7KEgHOeW7dmFglYH88PmR67J5UNLAg32GQHykRtkVL5x7Tu9cVsJw9
DChwlqSY+IbVao1b01aSIn0yasjqdZrn/fhwtpiWFPepkjfZBZWWE8dFxmCl
xJ7ldvnFdswvdohf/LCYSLJNM64WkpbXLBcg1t6EmUKENRy26tExJv6NmDcK
zYWnOF80PsF4s6rFjElmhpdS7pS3JleA1Ltwzx5X5ZBCwk9hLa6sk4LdX9Hc
71WqjaydTFxq11ZKhwe4zYGJh+Xyu6N6UR+t1wPdREHlWqwxEJn8cWjD31Is
TJRNo2doKymxjLWJ1bilpwOCaYvYBaiCzsWJJmStKytu4yYuVeWqSBJ7TxqL
Lc93OaPee6oPI+nREt6exORnmpLDbOShFhmyptOl7SwhSaAoqgbNFISZ4ZFz
umpMuJ2ErgtD7kM19/G88rfwXyrDK8yDDXq0UdXKRg7tfWYXintBKK+R3hey
Ve7Wblfmjcu3Di3HN+Vk6YI1jaex6nXcs/Mpz+oeIqLFb3mGdIXRPKPyQN5Q
vbBc0gmRCtjkzp3R08w2RPD2RBtw1xzFSXVPoa+ObiXWwl821L6BjAe2+4GA
Cgt1phDCLx9GB/KqZAeHtsOyVlsL/Ugp9mmlvaa2HryQF6EsA4NWaVvqHvhw
RRiLhiuq/S8HI75H5cABAh28OvFTmsVHB4LwNZAQ/C894Wl88OdAyQXjgvYM
0ZJmcrYuDzO4W/Y0hXaSZYF1eM90MyO7Bx5JgekgbWEPlsDy/j0IQMOmmqIt
7AwljWLeTfCjbgIZRarYTkDqF0FYzySTAJ3qahy3ljlZHiwkn3IVeGoG7kxI
vk3CyYwBg8+MdynoUEmJ9S26pMDsOB/lpMJYCpRLa47NJmkJeJj2xByXReOx
HRQ2L3AyyRsvfbGHY7qJ9gJcmoUTz+SM2ry+Ii0VQLlku+qZ2nHEfooRPCLL
RLeABRdy3uSqKajNtAwK8LszHlgkzoKIAg5A0lVEpcA6SNAg4VWTnUUVOE1A
rvLdSkJGurso7B6B99QoOqKmmF4OncMNR/e8PBMyDQVPuJoOYQNTgdmtpKIT
A8b76rQ6cfi1hRVV2+uoiqRz3mTGc/xHnXzQFmU7mJSNX6/yotDLhXTJIPnK
nfeHjFjW5wPn2LTisHRtdM4w373T8zavx9clrnypLZtQ7VPapl09HCVFbGEw
wAiXDbxqTv54nJTXcyL0luQ5H92qg/AruUmKkUtKYtEenRezWUlkRi5CVU39
7il5JHqF7mePkcq9cFyGubUj4TbQl5U9wqPwMtG7buPsV/bqVShtHvi9W9U+
wZIETTo8OX3lJh6tuABkdxFji7sAIdlAuoNLnaoFlbwGtpVTTroxLEFq6bgi
+6Nw1IgeB9hCRQbmbHmxVgA6OIYiCdD+G6JgWHUr0PlYAhUanihW68Fbij3i
G5YBkNrlcSKfIyhRarqsZxWhIX2lo6TIcQIdbOKunRfLcjoRBK8kLIWsfFZA
v63oTvjo4fwbDK8FKD4yhVX7poU9ADTfXtfVvFo2ptMzQkM/MczHUNjm1Pm0
daKY5nQY4JiMGSoTXBRcgUGCNefhEmaovHCgCXfJYTdqxo1q/cK1XIPR3kUU
4HnI2nFoPl6frlE1GRvVCk9/W14h7u1YJcvZjUJ+tA79VNz8W2D4wccgtqI1
izsPRuwIrX9nXntSNvUZwTdsvxqTlJ2Sy7u484o2oVUT6xWjVOhKYY6y/wfC
Fr5z6WABAA==

-->

</rfc>

