<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to supply status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge).</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a plegde-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the plegde-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "vouchered" / 
      "enrolled" / 
      "error",
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occured during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enrolled",
  "status-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behaviour by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Enhanced error codes in section 5.5.1, issue #39</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y96VYbWbYg/F9PEU32WgmZSAaMnTY3a8AgbJwGY4nBdmZ1
3pAUoDCSQhURAuPhPsv3LN+T9Z7OGCeEsJ23srqbVZUGKeIM++yz56HZbDbK
tBwlW9GTTveX/eg6LYfR0SgZXCRROok6STHNJoMkjw6yQRIt00PNo87BSiPu
9fLkSt7DjxqDrD+JxzDUII/Py2aalOfNeJKO42YvLy7T5jQfN9ceNOI8ibei
l9Mkj8s0mxRRPBlEB/EkvkjGyaRsXF9sRduH+wfb0dnTxiAuYcCNtY2NRlHC
g7/Ho2wCn5T5LGmk05x+K8qNtbXHaxuNflxuRUU5aEzTrUYUlVl/K/r+Jim+
hz/62Xga90vzQXEzzpPzwvogy0v3E5hgkpXpeZoM4MNJRk+VeWqGiWflMMu3
Gk2AFrzYbUV7eZoU8ByDolsm5+fJRH+a5bC7boo7LaLtp/CJgqN8yDMkCczw
siyz5rN4OGl20slF9BA3kZY3W9HBbJL2h7SnAczx/aP1n+4/5j3OJmUOTzxN
8nE8uYGPknGcjhAotI7WOa7j7wXP1QKYwCOzPN2KhmU5Lbbu3bu+vm5ZX99T
OztuRWdJPklyvbXjYTaOC/Ppv2prJa2jeU3r+JKttVvRiyQ2G2uP0qxUH9Gu
dtKin0XdG4Di2N5GB9ZapvBXXBRJ9JPexVk8GqVFMholE72VnWfNR/fXNu2t
dOG2fUjyEeA1fDwdEmYv/bi5Hm1uRo9+ehQ9BrxeMjsdwZL+3se10PZk+Qct
WkecD4psojdxgB8lo2jH+5ZPCWZMRgDGqJudl9dwI6OzLL8szFTjfv4jXuC/
F+rRVj+2AargaX19r9HPYGNpb1bildDgLC6zaDd9d2lGT+Cj1gA++jtAGl4q
ZiO43P2b1mTUuEomM3gLHr7Is9mUfiMqEvG7H+mPv+PiWrCZz/ggEK1Zb4sf
a15f3POoTmOSAc6U6VWCq+rs7Ww8fvRQfn2w8WhNfn3408MN8+t9+fWntfvq
gZ8erD+QXx+tbapPH91/qAZ79HBdf/rTYzXYo8eP6bX95m7LIorvrovmVTbr
D5Pc+XaSIEjOm8WHctrsF3ng1fy8j7P20mKrkU7Ovd093NhcVyveeKBXsW5+
vW8Wv7n2k/z6eF0v/vHG/UeBaRmgMc2z3263m4/WNlrr2x38G6gt8xH8IpIv
om7SnwFy7SZXaT+J9gdA35Ga5vSCop34e5MRc39SwDCzMomyc7iHSR+JbTwi
FsF/ZkAfiqg9uUgnSZIX9LJiEuuPmmsP6ZMiQTqHoOHheb1IT2RhSFI052rG
PbzDQNXtjXy/LZ+aB6OjPAOmko2il1dJfpUm199bC9ie5umIeRV+yMei5j86
fGooUR5ftxhpZ7BSvDUAGKJJdSh8D5B/cm8Ke79Hn/0On/2eySJa08kFTLOz
/WTP2cHOdvQkz65himgvy2fjwLIcAtmPe+f4HN6re0grJtO4HMqQcX6BJG9J
PYy3Mc77Q8C7lrqM9/CDe+Pi4l4Rxxf3xuv541m2+f7Nh8nL/vmjB+2by7XO
cFY+ePzo3pK90KU+kCL4XzZp4oxRXJZx/xKWPcizKXD4+Pw87f+NX2E8aR/v
NRrNZjNSR9doHA/TIgIZZIZSRDRIzgFDiiiZDIGykGRRgEAQ9bKsxDemU2Q8
cZQn4wzQrWBEvUxugKieAz0HsaJf4kcs86xGHz/KVf78eQUHOo/76Sgt4eS9
MUFsGmR4XEV0nsQwBn44yWDhsL/RDex5nMA/o3SclskAuMFkAoidXgHniHpJ
eZ2AuBBHU5bBEPHLYSIjwmoviN3krcZ+GRXTpA/XCS4IDksHVEQF3B8WrFZx
KddDoP40RApYhpCCr6IxsKRRBGxhcgEwOs+zsZ6ymU7SMo2BhDfxqdUIeDxg
6QAHE1DA7vXTuZIQ6Wl8eJAUfWAC/EZpH0qrcZxFxWw6BUELgFYOV62rBcvL
s8GsD+uJo0lybfbaBMkQThQFOOCQk3JVNmVOoKANwgNjFB9o9xqUFiD1iNGA
TwXfcg9vOoyLpNWA60JfJiB09oCVDwmngCbFLG/CUKPaafyzsncJ7wFhAkTg
4d/zEdDIQA2RPMLyAXQgPJw3kTDASPBn1nsHOFJEy0V6MUGcSprXuGTz1QoA
F/GE0H4QwXd5FgOQAPzxxSQDstrHFYEcoDY+KwF6H+DZZJJnoxHtcCr0bRUG
mo6yG/i2dxNEQEQCA/CEFQd8cJcf3NluNfiGjtPBYJQ0Gt8BdecjRsA1WN8g
fOElw0vWHVPITehQZKMZQRvIk7qqIDhlzRL5Z7QMsINZAW4r3nECXAfEewB0
fELFCk4UR8t9OMZsnOQreGPU/lpMRdJJfzQbCFoNUOACSnuDowFzvgZJKUpG
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
QCgZIR+Ak8DcqcLRln0m65/l7/cpCOSYRDQUWFB69RRnlLyVWGHhzBLQJkCQ
ptQCtTbkR+O3nELcq07cvqXkBbFZqPv8LAIXpfBhNzlh3lHZhxO2PHiynGOW
piPggwLQ1CGNfxPi8zJxw/Z1JQnBcZ/Q61oxsFesUpsMLEIojR/qQiH9e+ff
Ar6DtfKhFfg+F7XR3UGE9YlUJqLges3pJcZId+drUne+j9/xOn5Ppp/nlGv3
2hSocrlMYk2FmhqzmbpzkvdkHb5T58VkRqgXrLwJU/VFRbGLaOEOijg8c7RS
rNSgTVEzk1tfUVzww8XKwSNtldAON6pFX21QUel2r7vREsHhgwsRgOvbaSIQ
jLLrhlyYJxxtbemeVbWd+0AtYfH2CNvRtSqlc5zy7zqaQ47jB17VD5WgTaGg
OCzZhnqwpYmE1yxZnd8kSJy6VgWWxetQbgocqUlh4+/5VojEkRT6qMjJo30i
LYmj8NpEwsOpbzDF6vVbjXq3YN0X7pc/Nj6ZpHjXDfjJfE4Qcb+MdpMyTkGE
/9T48S81P7VfuF/iGo4ly3DqFrP7FN3zPlGMnNbQFWXsE4ygq7IR89abmRup
8Cl60HrQWsffGug5R7JY0I12Hpo7gv7tm5yFBwczjYJDwJDmwiHwwJfCof2v
g8ORmPm1yT7z4KC+cNZgw0HIT/1Ca+Fw34PD3UYwcPjkY7NQ9n8NJK0wUp6m
ilHWGtybJdGmaNExUP0CSFawemFIWlitoHinEb4lJHe2STIrBCkNJHe2d+hz
Zw3fEie/xS5ezdC27FoHnF3orwyk3V3Ixzr3fvFdPPhGu9DRKMl06kajtMPZ
3rWRJ76waTxIpLSHQ5lT1avPan9kBw2L8E/CpRZ/gg0PF3AwSYaIzmey8tlr
fBUF+UclY8PUb/SNLPvVlkV2VDs5xO7UrMWJIK6NdV+VXdQGta/aYjQX0xwE
hWKVW9KvZhNY6w1J8+K1LLxXDWh9D4AxStjV+ZUMqTvKqdrEWnylCAQVMqRc
sBQ3xDKw5P9bLXJUsooYQFwsUz5mozSMHIH8jtHRtcHsdVhve890rq140UAJ
9MJpqi6PGg9qaDbdm4og7I1MpaG0QUEpE9yAgjXzes0HNQGy5UsLFSfsjNdS
HxbEBR9EXQYi0OVYo1+SG9PkN1oGGrC7YlVxV+ZOqvNF6RVVK4GqwdHkVNmm
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
UKt1rtTKrW43kVD4Q6Atr+JPaJhVv7bpV/QVtqJ9L4dLZwupTtm0iMQ45MRn
Q+FpaT8FgodrpaKmg8zNm+BA+tFIKlljORhdY9UNp5AikmqhKhCZKTd5+o5e
Aqv02jrJ+0qCCNWEqKkUUBeUSuZrAeIOJmcAshxjJSUJOUiLreg/rfaA994V
2eQ/KW1S9dWIo+fdl4dWmF5muajzJMEu5/E4ARGbBJcFqcoWyV0PNwGLkZW6
JWEotMiq+2PGtchPZYTnZ92mDtq3X5AJKbIEubv3ns3yiK4ZUiVQpbAsgaIn
zNkNJ9VJJ9PU6YOjpV0WObaEaX6Em7loRMPSVrTEy5ZVUw/dv/xladUMYsFm
0cfV2L8Skah5JVrgy1artfSPxmdDO6bxFRB9TS6k8bypKaMutgYfAG+ugmsX
WvEKChVWuMGtkGTznAldSKXosBQIlOJQAzdaQIVX2CFWHn8jzLGjWywkQZlV
2TrsrsULhEyYKjISMaVDKJyERp2FOT8IhHdyPstLChKw8hYpZrMSn+FtkoT+
G1UkR+vXTgWnIerNgB7pwEoBVHWx4f55pcR8MEpl6tjJCiyl6hbXFKTyT3ah
LUXhmWjqymJWfG+Lmg5IHAlS4tV5paUUDsjtrx4KJVNaiWy60bGOngrmC23x
eLdFe6mBmJyOLrbwP9hDYzg2zQOd6m1+0h/Rv8t0sMUKmQzIUZEu7evdlKYJ
VThSjWKDnM+Wopc7x+3jqHvc2T98yu28sfbve9uasd09bK1HNI9kli3Zby0t
0J2gwfDCQM7boUWJcFgV0OOMQAjGW9XXpJ1jtOzkHAfebd6ACPT58wqdBtOq
QRPOsgpaXZNnoJQnKrUH3+IQW/hpEz5t0qeMFHRQjsIaGDes2OINQUYOlE1K
7YfrTK7qqKGN1v3Wuqqo6Q5mtxS+RaGu0IjXDzbWOMeM8/sijq+XA1MJxNUs
J20IJJ7xXVRz1UyRVez7xWtRqX7FDazlPTPSaXwzyuIBcr4n2932w82Tzovl
xRFihVmjvkKF5oofpYPMkjQKTLw5To73Hi3j2o7U99EzuuErPCa9q8et5cz0
JGr7yEYBHLsJ31DZV7S0+F6WgILZDLcBQCQZTuB1l6G2aP9LBvFxAxtrG+vN
tc3m+sPjtbUt/N96a21t7a3A0MYXfBy7BCTJ5k/r60vu3pZCYPNXH3mrZ7Fp
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
tTKskPka/dik4YaBhjNhass4G1gOg8pmrGjqJgZlNXHBpM6HihrrIPKQai8L
+F0kP4kLDvvvqVpXXNRbnCpRY9UADHFAD5Jp2rdS5bQb3zHbB+uwBstwzHPD
sJ/deAtZ68ciGZOLQvmjlb9caAysgxOKxpW+esYl5RdAlL0E6v/nCRWj7JsN
u0HuVb9Rv5/lqkaL4101np+aniP/vYlGISzH6IKZVwpM1QCNtVcuuqe1VNOc
gIAPsv5wkvZTWDwn7FdxWtxKZ7BstS3uDw/kvrD/FqD04ynX+MFTtfVFLfMF
sI3eJFKk7AJC9Cjy3ypOFJAgezfK7q0Wz81YkCc1kSdp2ZRd/7L1ek/7o4qF
YzE6rZNKPTUkWKSvQpznUmbf2rdsoTyXCh1mo2BylVWSaFFK6S7/v59Q8vyK
TNZmrfw3ksmkhkz6Ccx1VNKBaKuxPVI1aCsU16GdtiX562losIqt2m7AfHYb
JXU3VdMuFu8fUYLkisjIvlXDM4hu5kLEimg5VjUUL2YTLx7pNkugWK6lwIH4
aarGSUJidIRUuvByer85lUoblOrRByhVWtjmTh3RrzFU6/m3mlwX4Vrw3p+C
bz2x0dG2lnqLQ/vmIOkzNZW6oNpZyBYuh0ypWikSWUdJfwWZ5O1E/Bb3S0mL
4JRsEL/KJGrKKcX9J+S34eNciONyPob0M2cjpmCoby96ULEXOVkWcRAomNuL
m4UJ8hsb/+ly6HipYz+BXcIjAaboWURIYj0b9t8V4sDybj8dutx/zwJXxvlF
Uio6aEUcOeU2HC8pYp3O8Af8U4UlNIfCNbGvmHekgtMK9G66RqnbLE5CmVT+
wGoEahAn1xNJjpgkF8agqYoJIFSp9zRGqem3XEZvBZXmjidXDeLRTCv8S2td
VbpH5dg55WJL2shwPRPZlYK1XZHRZIQs85sri6Z73CnX406JHnfK8rhTised
8jtkfCsY372LKtCxeYdIfCuboDKayU7466do0eHqrR0PlLXjyJmnEs4f8hyL
dHwXS4iTHu1uDeP5jWtdmIviQ158/1xPu4iZ4QUEe4W45aq9g5tXvSiiHD/l
/bapoM4yV+E7QmqwiQfzcGrIR3KqicNVM6pufyY1UUQ9rwdd5pl/KFOMQ0ks
BydO/TsM/jtAk/ycx3M2q2Sp3k0FdqEwGK95soqxMJwGAN5H//UuhpHv6vbl
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
BQgoub1rVyFYUslIf3F/MAq9vRV9/9v3aLW0+j9OcV8YgQNAibyX/tLwqhmQ
W3gpuXk+ffu6M37x+u3V4Owwe/t6v+yPT98Pzk4/DHbWr/vjtYeD8eP1NxvD
UT/dfwjPD/v3D0f9SWfa29j8rZG+TJ8P326czvjpx5vx2fp08OwyfbHz/MPb
18+nb86uy97ktHwzPr3Zf5elB7vtm4MPr9YP3/U3X3b3i/3xg98aV73x4Qi/
PTx7vNO7f3J1Mhn883CnvDw+ye6/GrXz07Pp2tsPa4/30+v0zf3nozevO6O3
O+tXPVjT/rv964N3+781yoPdfnlw/PzkYPfVw8Pdi4eHx29m8P8PZynOszd5
e/Zg7cXrJze9+2+nb5+eXvLvw2nvbLSWdNdv3p4NfmtM+/c7N28ADm82Tm8G
OzD+5frz7sn+Wnx5uPvqdDR9u7Z3v3vy/MnbtdGzV6fDt4cfnqdvRtPDV2eP
n71aO3zfWT/8rXF4uDvaeXWyvnt80jlN2qcPX50+33m79uDs1eXe1fHJYX5w
fNrpjd4+fHPaX+89Pfhw/HrYPm3vHbwaD16eXj5/8mZt/bfGTufywfXb9gBG
6Dx8dfJAjXB4fPK8OBm/f3ew/rx9ctp58vbk7f2DZ6PDTvv0Acz4brD24J+d
487haXv6W2PYmfSvk8v1duc1PPH08P7xeLp32F4/6Y73Dju7nc3O6+mTk8vn
k2OAKezi8NVG8f7wdG92OpkOTz+cFm8+4I5gDSevTt6rNbyDNTw9njy57Kyf
bnbWOk9O12SEk3UY9Ul3MH7+ujN5kvba0+Ls3fMiGXd+a+x3x8N38eXzGN4+
7Kw9f9A/GRwfH7968OpssNdZO9zVf78e7HXb7evuyd7OqzGs57K4io/7D3rr
z39r5N0Pp28Bo169/TA8PVnf33xx//TDwVnn1enZKO6219d6G+Xx22d7L2D1
495o8OHV+FXeP31+cLg+6L4dvx2dbpS/NR4A3qa9tem4e/a+GLx+/i4+3l8f
bDzI4pPHZ6/WBv98+3q6c3iyvnPQHjw5OD297I72Oqdr6zsnJ4PdV/cP4fT3
fmucdi6f34fd7LzdGNzA6e3B3503a539TnvviE9z2HnZBnx5N9zDs3u1tr8G
uzsGXGqfjvavAfK/NfY6rwevDtujyzcb62e98d6b43dP3vVO3j443ht2ET9O
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
nRWrl/guc6aFVdRH/ujUpWcKzLZFGvAG73yc2vvdOIi6EcaRlZAoljDSouRe
aXUwV/WxnHl/My7oZ28pEY/KR8zNYFxawjetDmb77a3gmtoKznyZzd1lYUzt
2ydC1vFi/zCBB8DbtN1eLPN7ZtwexbDcsdDy4+Vqx8NIQxwcZ9CZY61kYI29
aO7YI9r/YXR7nr99ARdfqB0aS1mykIUrLba8nM291bR0GOJwkvH7w0iY9Q4r
dVzWuaG9vWORDy+Oy1qSGPwXf9g3x3xLByb3ib39Euh9OnLUp30lf+4IA/G6
b9ut2YV9XNgtWGJ9hEEdWfBt5TmctL06SHF9jKI+1LTGz5yFuQdEAB4yzy2z
bxy0ovNMF0et/sWDVuSNF0etLg9ahWgDh1XNT6gEFLtCKa4PxstsNIbtWn3w
6KFrxx1x5x5TQ9zIuWUkWs6ihdBi6WyT2XaQ6hGtARyThbfg4eSAqVv7ZX8V
GNunGKNrzbKgnPGjtZeLojuVliXm+UscOo/p4DcDczCLl/lTyp0v0IiHSM9f
3LLsQKX2udZ4Ds0RsDXqMu5htrM+559fCBHG/JvedzcuXvseeSN5n0BEhQy/
4ZId2eD2y+Nhu5SD3zqR5jxkiI+Per5NTt539r1oHlsjxCPnWQ7Z84NRoj2l
DDp51xvcHqbgQHFYerW3lY/guM50sdrRgQifs4DjX8yXk5jWOEWP7nfZ0RqN
O+IArdz1l1knXlQ3npGZiSy7iQ4JaPUDOS/LYF6uUyMfgRZ+GcvSGocTTQbZ
JhtipsNE9Dt+Z7xHvHtOluWCmb2Nx3WdqVwCdPXcu5PUYy1jk5L2XOu3n8Zv
nLD4z7rmxeUBizfOVSxub+hchQitq3MVUEBlMBQO+XZ7suLVuQoo3j9xOLw5
Gv7Hu28cDh9W/eDiXAVQqT7SDDYA2y7V8XTzlo/BJimjDwYC1udqiG4Ly86O
fVJdfYwP7TaicxRHRDnaU2fzMLeAuX57aD7V9LvkiDiFGe9RRAWv2iNS6F1m
sX5gtr3wvHERj8BQhmDVLuzm2D4h4Dq4T3tgHdZXH1jnTgick8nCGoolQA+f
gNVL1QuZCSDTc7Sg0yRVb1zsE2lv26NRS+Ixf+Zo1NiYWrExDuO9GK72YIxV
xnthYuXAaG9Ne0T7PU+z7n3QhEzPK3/erxjfw3KhYmzrecy7Oy57YSDKp3Dw
226sMQvxc43Y8RItJ13Jt/sEMZJ1wR0l1zKezMvHwLjtRZ3socEY8h3aGWOe
DsGhvYzHAy49k1A2UP6NSHvPg7zxb2UrAw9I+eoAYHP8z+nQ8T9In6UM7w+B
He9Tw7rzybdtz1JXHWz9RbHGOCQTyYIkFDIDK+Oa2QmM/JEvzaPknsOG+TM3
dS9d9iPYEZ+U/YeMxiUEQy6ZuN+7ot8FY39+OPbvJpZ3nwTOPu70Qzk4xaVd
HZfE9voahz/eTXYx3+v+YHt5kcNfvMbhj3dvXuTwF69xAEIgLplg6tBYGjhd
AA8rqvoaB976yZWXvOGpf7z7nq/+WU+FT1/46l/jeIgmRqKzezqtkrPUGh9Z
kT+4dKY+mKxFx7sPjPudEHi6Bps2J1BH4hEx8QtEdte9iyePujeXgRj7i3KW
oS3ZvTDv16zcvWC0vsTQg76Z9VxRPk6GGUX1OdRWL5KVj7aaaKvTnLKxzqds
wKm8sSiV7UIHMGCKGTeHW7kJLmHtXjAu6syNz4U3nvfbw7hLLrJBfdyPnlIf
+GOTR6OaqHiEb3qGVx/5w/+Xtv7lLZ6DkX8YA+kpuqnDd9rUMo8PWuliZMd+
CA+4Y7ORyCJ4/yiT+Z7rvxuwzBl64I713UtcxjGzK+Ytbu982C5YztEBS/bu
odH2bqdcjee8KyzwF+nc+Hef14GxXwldGPjXZ3d0KN4yY9tjGV2qok70wBsv
zvT8pRM9l+d53v8Qc8532/lLGn26305Z+vfbEX/Ou3KW7ndV/Pj78PdS/B56
rh/pd9Ob59TAlCQjZz1IFh9G9+v41w/jz89w1EVPmENH74Is/C7t0ffO8ZxO
cfyZozz/5ADON0/zXB7nOX+zqVtRn9ppCyHVB2l+UTdrXV93/1dvFvqq2sYb
7/nnr/n/f93Qm+dOvne1UHPKBGzg37laqLlYCCr137laqMk4gEVe5Ry8+e8H
lXNY9qt0UV9Nkhp6nsjuq8uDLqMOvPUi7vyrUYeyYP/k+qA/EXXQo4u4869G
HSjDP8kQvxd10JZvMMS/EnUwuhdx51+JOtELnQz2Yk/0HxLpGLGW8/Fsaz/q
Fk8WWZma+XAaWLHf6XcoPxN1vAAKiXZVDJipD3zeaJuQzp3U6uafRJzB7WCs
Mk1gSxfXDTE7YwL24vxZ9fNG7iob+QVd5IO29BNSWcOcuYetE5jZgJulxo3P
WjQvQ2nnUbAUqwkCnld8XkczRJrD7UKUpZmUppGq6xcQI4buUvhjLd8IsLKp
zAdekHNp6iJaVvejwfYptfNQhPFTajmmq8fWhLMi0q0OXb/w9jHxPylitrWI
sctrEaPFg6Tw1pQs+YaI+UuHw/941x4P/zcOh89pWzUkB92yRbduPSnHKZnj
mrqd6uSqhQbntsixGG3OM4tdwAGMOrsBqQcYbEE6YMwC9HqFXjBRwFHKWlK0
jsZMcdUGHtz3QIXxxj6c0FO0hZFLdDIjaw97N99gM1erAERxki1YGCxuE2mW
SxGom4HUcfMpd1xIfdpgyokgMxAZ70Rk/PrGq9PPdANWpvXuxtwKxsd4Bljr
p1KAkscdb1FCxjrHkUUSWpaTtWfTxuesF9t6ODk6Q4yoLTrZLEGAcBc9R5qf
j0EHYkeP9dHQPfBlXI2LbJTAsEg4ZAPfzLXxglWsEIlcUsLvtutjNv/JrVsX
6TPA1pt3KfgBG0vpdLOhd/St3w94UhfEi5YiQTtBPTteLzZ3R9dkjACnZ2W2
NxpJ/Q6Ea1yL/diBXHx50OInV3M4gpDLll7ul5WPmS28TvWUhd4zngqKW0GE
YY4s33COcPpKwFFCfzfLhuWOwto5SOpfso67TpYeBSdKdW/iA4UYEbhzbhCF
095kZEPrSyXn4iFa/n3iP5bTYJUf/cPnYfry9yzaH29WVbF0Hnq7v8fJo71e
2QdQ7WN/Y4w+Fb/drcPbYzST8VqwX6Ob4d1kH31IzLWZzn7/DiM7EbGatrzN
xF6zqG9QL+JI6kbNITjNaq0qzwzqmnOqQPN7M5ttqdgHnklFp+me1O30v97/
949gKn/P6y+BwD2tV/gmfZkudq+2+Debnu8nf/fOIm6lKrBn6+TT9r3Wff/h
f1/9ovcfVE/EbG/dna7Xq7Uqcb+5vGe397H3Uf9F1Vqcvv+xc3v5lW/dY1+X
3q2LZV3/6fSgHj2ITWmA6EQ0FbhviieiTz9cVFOr7wX/4Zf3P5xviVZXfZ5+
f1V6rSa/pz9Ot5OPp3cav16+k24GbSsLradNseGmA6riOFXDUjczn8o4/o/3
91TYks5wTy8LCm6ongoVKWnuML+6pvh0G+g/8P27pmQm3TzbVuNTj2gLC1xd
ct6Ubpst6Tr3w3kSeq/fcFm1UN1zrAoJvjEr5y/VL/z7tFLtelo91c2gWdtO
3xfTw3XFt+u60M0gJBu66zajkkdt6zZonqFe9WOXpvi+mW7tumSAOqm/bm4/
pRPldQ2BaXZZSK+9PPf8mO6vtVyo7wc/l858dS9588wNXbV9WXOjuah68Pv5
iR3Y9qRMmuvG1QH4+mbu6ak6Dd3kTZUo0NtJOUPD/lYXzWpK3td1fH5aT38+
N/2ixcZXzz+rG6r187qqRzPn56JWdTkGVeBClfZqD+kf6vIidSmQZ6DGe7jP
K211vgRAVdbZzfAHfLB+L9V9el1saj19WRXTr26Wp6vpz13qfNWlqzpx5Fh0
C+82n56uoqd79C8uV76u69XUBFEfomsW6EJjddXC5rCc5OvVkgzjl/eH6fbj
G7jWeY1rXYVr981Fvqy+yBc2d77st6QyclRkpLFYw/jw4w0Mob4Wgi7ppSsb
MBXTqh6y5Xb6eU23ZFOVqhncue67uhJa3QddV1+gK7Sf1Q3JbRGiV1V96zFQ
QvP2tndZ0Y7qd9BzSDRvVTWs37MaZ6oyaa6JV3cUXyDlDy2C/HBx+/7FheAn
wNBvTs9rJq5xHTV5b91cD68rqaoc3f+At1IBHvyjLuuf0TXLU6qbcX7+r6fn
J+fbtuunLyk+qXJi7VicimFQ3FJ1x5qn/HY9uqdbva/RbvNcfZguXwjl2i/W
sWSxois8QDLUHR37Q31DOSCxDtjNPdvJ1bBSBN5O9+ehMrRTVy6qaJ8vvf8w
+L0ubnlC76qke6kbGKCqB2VTn6IuLUs/JK/LXp79u8Wqxnu+g+udf/zjf9Yl
GeouUAg5Ffo4A/WpXT9960FGMxJvxIifvy6Fogpy1EVyv9eP8wDqGMATmp9K
RKcpXSnSRKJT3YDm4nrVCKpAui3PUc4wrhnCfvteVSVrSxhcXaDdfqej6l8o
Gz+8xyerGtbaaTnNbRuxr9xhcy4A0Fz/XRetRDffwB3jNe50FO7wqq4mciII
p3peP9DTb7pNufSXpHye/q//9YMa8X1v8n41qUvYTaabM9FQtfzoEb6w3wOC
KiAUBaKmGp0q/EctVUPVOkxjfycGpy7UKZPtlq6xmeF760l+uORxjRnVXaXx
WqxOtfqUE+EDHzarUlEFvxm6qSKqdJ96fTl68/VvDSEVvf96EPXXg2jU4N04
du+Ca5zr210VNWlRRSHrRRWmbztSa//nvyeft3+v1vt//EPVi5x+RS8Wz+V2
RiT/LPXr+udv1qX4ym3f1dGz7ck12VTz//1spvpIa0/vrlio4uyvCmC2UPKp
qQak6jZSzaKLUjzfqDpPIE8J268Z9Xd6qKOHFwAMn1s2/ojpSGoXvcTF02gO
fHZZuuuqeDJGtzbkr+vTJU3tTgq6dJt/sv483VJfmwoqLzOqBXAqEqRcBV7z
dcHYj2qyW4g6Aed1uT3F/gh10+m5tPxFhYdzgfurMjYf372FGdprc9dfmXvL
TOoOYpY3jQmq6qInY0iW3/CHVyVh2r6cp7m56OqKHaJrqpZJc0PVBSt/q0jw
c6WqPL72kafR01ev31zpiT/hkm84z0caoH4LKm3EB1lLrkXUThUnqafyzSA2
XSonoMIZKn40jW0j2hs2/6qc7PufVNme5ZYK39dluesaXQP/R11T3ZupVED9
qJ9Vy++mk1lbmqJp/G/0XXLKU1j91mzWk3dV57xhDbXS/KqW88e2suxb5chV
fR5VPLIt4Eyf/L57UDG7c/3o9HlWZvULCOavBBCeqXhWYxDPW6IVV456btPH
998Yml/boWmt7BorvgUJvxAmXJX7+3avXvt2U/b8qitXfoyWDlQZ40tk+7F3
AW6vXUEVxDluK1U0hyoBk8ihUlRtVSsEBFrmokJ0q9WnD/jPpMniXPrIj69h
VpUORnOGKwBRAXGDl//HCXeTkqqmHi509rm9m5qCnAp01ehTV3ilIkNfMa1Z
U4vuqtIseX/TuCZ81LYF+qgq+tBjrNkez/jhqojUD+cKS+Qvgv2N7gZ8dyJj
37tB7nzj3Bpqngq0vaLl9Md37y+Q6o0HvAE3tQmqW+9qOv32xyiKbp5TsP66
eAtFgF/OmhcvBgltRuGNEth1Hd/Gz19f/NfE8RbhSyoqWn+zHeWfWk1dYrLr
UHlKGeC5O1WAEm14rj62y6e04kq/V5Wu3qiyqchAmyX8+f1PbejRAFfKuH6H
6azp7U3Jp1JNS52FaMMIxorq1XRublKqUVfnKLO6slLdogvT+3h6SffnK/Ky
VXisuE0D4pt6Fi5SU+rP6XS7VcEryZIUwmJ7+PjumlCdloubcoFNwet8Oqkr
+7weiAZIiO5dlar7JzEK8EpM4FSorMkE4zEXH8YvT9ZzKux23TBKLBBS0ctL
0Ony41Um9pWF//XuoUFXaPhV3b8/10885nVX/4V+kjUsX/HNk3M2vSfDq7Pg
2XVjCYpVNhYhcr1ODnVmlkpd1dnKVmG30E0OeZWpPLtjXaiK4hGskb7TaNgT
W3iVRPzqUaqs1OsSid8o0J4nL9OLCnN41vmtm1dYczmQP7UEx/j5XL1e0c+T
1G++1QLjZW242ffK4n2oP9TKkd9PYUI9AcRPUeZTA36+UC0tRF0lvZNTHu/b
uuI0z3iYSr4sr9mM+uPHN5Thh4uicul6U8w+JJQM/NAU+b1I+l1+hrqqaYpS
uyom8oFxQiW6RLahiK9KhKuCsk0gU2XOVexDq/5kUxSsX+Td2nn7asrq/FNS
bc95kDYR0Xjjps66U0THU1SovgCDOkOrbGpSZxb4QP/47mo2PyFAUEmytwol
t+5cK3UV4OsU5moCKU/unlD97Ua5f9eaiLBv3tP1TPRvbYt4wLdWhH46Ffem
+pdZTZHqcXz1hp8bNvLPPke9JwN4/XtqIf5Go9dCRRM/SlXlT6nCsx4qm2TN
drokK9/8z6uIp+L7khybJEb7rZ9+NDQVynib5lLNfN0Q1ezLHO9bn3qnYk77
5BMmUOObJFrD59+ujXkdCNsvq5m9MN7ldEv0/MOGSOlks/6g3VzQ13rmXuey
0V76ZE1h0fvV17qisammzW/l5r+RI7sksGf68GbiQDXrzTF7Iw2hSPYrM4Eu
vIxj9WrKWW1BcH+6HsRL1ozXtPg6LU/5ZLzo3MCk5UtE6imn1wSwU5n4ug7h
Zn1RbXOm6hTSt/04eCKC2SD4z28N4jdyZO1S4qnEoXpRuwRJ3t/WUG+xBmj4
8f2oVo51XLwkCvXD6XsXRUBPlkk3cH9KJk1+sPWR2nSAV0kNqu3bGz5AsavC
QCST/I0ZwzCqkQ8uljTqP//HKZ/bxpM6qmIcvs5IUB9qB38mAFf7+uq/1ZU+
qX7o99/Sef/EHx//9sT9Ib2ieWUtW4GLtbapA9ibuqem46oJ5+LNp+gCe1qf
mzFYLRbPy1YsnkYHX9+py8Uvl+KuekpQ1DAktX66qMtRgkJ+ePIfWoA9sTqi
llR7OgXq5eSvP7cheLNZTWbJdvo6lKgVwtoKlLV8Sl5W65p/lgc1uWTi+ewz
faxMDhdwpbLNtUUodtmYgcqvbaZXv6NWrC+XkInbzC4zbl8BPbW6zYsl1IYT
Wl/WlG05UMvmvrow/YJZ1e6zhQpSFYJVue6TtWzyWXWaj69q0S+zS7F5emr3
l/c/9vDf25/PXTvDRRPS6lR4Vk/9GUE2YMzbD6XKy11Vwv6kYvJXTTiXgK9F
OeXsNm+06VdqS8MivhGXG+S70PhqvhuzUAOu3kmTS029LvitAOzh/q7G4/Mn
WzNoG9L59edrgXOxT+Ic8f6UC5xi+lfpvWYJ/TX4Xi2v4QFnfvsmIv3bpnFK
FTZpom/bg19BydJ4txVr3xsXWK4iLgWGEzH8RnP/dJK5XphSrqrWxWZXi6lq
Ea1Zc1JWU6+FX24PUOBPlbPr7Q9NenC2UcvBamPFedkIDyBHPHftIsf0qs8X
UZWERGOfTWjB+C43KhPYDvurDQsXuNEUlT9T4dmmsX4CQxq3JYL4FSi+8dTz
bDZNaF92Zrs1EWryzpeU6fI5H+ts2PpUv/yk59s5bP3gfc2xfqpTOwvKxNMw
/VxnHi+X62eX65/1csCmSaCcaNk5l6LC+0V99rO7nGI+9egDVXZeXnyvLimt
kAdsRSXQLgjT3z5efImze6D82bKUvC4hGLdrVWO7VYwk8a4rTDSBAzP+NyWq
XuP2mZq37aLg09bg2CYF/pfGoY0dqhZIbYWtDPt4uRx7jnXXbC/IMTib93K6
XlL43lx2tU5mnFp28dza6WbLbPYyy57xUbREBaSvd6No//FVpu/rOSSr+L85
hcqDaXmkpQMJBYiqTCanRavz/j79Y6dG8DpZf+qT6sDZy4lNLpssZpueVxtC
4MtETlTN7Vcr+/DG5ZsG0RR9V2lRNSEuAJPiSdZg7ylnehr9Vzr4EipPXto4
7wldGmD55f304+ePNVekbQMLcAVVIZ0Gc5Y+t57ZZISucv+tAQ3cp3PjVS6c
3gIenANB6H/VJy7UHn78pUWL2hbaDH3TtxadllOqJ5PAHK586zSbDXReLNFf
VDyvc/8qM08p8u30NLFqWC6W7j++94loTJdvbG2hZQjK00GjqrUeBM50Vme0
1XaAZuWVVtH2jYo+Vbb/eFr8pf0IUI2ranYpSzaXmYgzZbyK75RrOTmFmlQl
Yeuy6Le3PUrEk37RFQF4Wc3QhdVzWq8or5vNIWtlxae9JJPZdHO9spGk9LJJ
De6vVzbSaQ29GJdNdWZnzRzVi8y0cWRVKnP5eNoH0e66oN0k16m5i3wQXqBS
gkkrFDI1jPXbz4ziPMe/nIyYxuY8XXVhobYV116x+coIaBn6tNP4ZCq04InJ
3X8XyJR0v9rTogD+QkWpKdpMS7V6ReuJzdPP/HSaqZTQ1SfamKdG/Lzxpx2z
XbOnR8Vf8tezqGuW97fTE1Ol3zTPa3ZJnuyTEOm0cPnxVfBZJosmEaQ0avOI
Zl9a41yES+8JvpISnV7W6EVJqdP+NczjZnu5Gbmmdc0GtvNyoMqLryf5jFpO
SfST6muxrV0hPSMpWUs9DHjCpw2++v7p4f5Nul6vg58gr84aqe9+ZyJOFJyE
3zJdwdhPyduG2Sdq685s02ymUEa8Ktu14/oT18zrMul5FUgbvzhHmTpanyF8
QyKNFEet9ZQdXTuT+u6543XRLwxk2Q50g82/1OmJk6hUNKZmEuqlH56Ye37x
x+84gEq7NLmWswNcwwbhjtpw1iZOS7XC3GxpVuu+Cljv62Voalu9yvDx+qmv
8PjKWqbleWPWKQmgJq4eRcWfL7/R6IuT2rqSfDUBbTD8jb3WF+NNM62A9dM5
ACjVdRGJLiNCC0qbr0PP94BGyZWvNEq71PDL+001nSh/ovpvajmQdiE0Br5q
FndUku/Ez3cr5ROX5tH6x+aV7mkEXzk9jX276Xj1vLnMoNUI0x5WrQkyHKR+
w7SZ8Podr+Hmq9g3UWmMlg6k03p7VC0RaaXrsgkLki3rtpwc5WjUZh3id6vt
aW6JKNVLYCc3JO5eP3J9Ds71zF5CWpU0S3eqa/i0Va/06Sd5dc4YXYeif2Z5
LdP8f2Hcg3/FpluLrpnOX7bpVxb9P957FwQbkWCtvtEuheIlb9GmN5uXnjZc
10CbrhD1iBBOaFtBE8j/D2M11YEbSQIA

-->

</rfc>

