<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.2 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-02" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>asynchronous communication:</dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>IED:</dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
  <dt>synchronous communication:</dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support the communication between a pledge and a registrar via a registrar-agent.</t>

<t>At least the following properties are required by the voucher handling and the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID). This supports independence from the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE. In constraint environments it may provided based on COSE.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDeID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar agent LDevID certificates.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects on one or multiple pledges at performs may perform a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.richardson-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.1.4.1 |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.1.4.1 |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.1.4.3 |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.1.4.3 |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Representation of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}

General JWS JSON Serialization
{
   "payload":"ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
   }
   "signatures":[
     {
        "protected":{
           "alg": "ES256",
           "kid": "base64encodedvalue=="
           },
        "signature": "base64encodedvalue=="
     }
   ]
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the pledge-voucher-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the pledge-voucher-request.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
  }
}
{
    SIGNATURE
}

General JWS JSON Serialization
{
   "payload":"  "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         },
         "signature": "base64encodedvalue=="
      }
   ]
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation. 
The registrar-agent may use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}

General JWS JSON Serialization
{
   "payload":"  "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         }
        "signature": "base64encodedvalue=="
      }
   ]
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and it's own LDevID(RegAgt) credentials of site domain.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request  objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendor/manufacturer and an it's own LDevID(Reg) credentials.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]        |            |
[registrar-agent done. ]              |            |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
[certification request handling registrar-agent]   |
[and site infrastructure]                          |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
This allows the registrar to distinguish between BRSKI (pledge-initiator-mode) and BRSKI-PRM (pledge-responder-mode). 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note, the authorization will be verified based on the agent-signed-data carried in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one of in the pledge-voucher-request.</t>

<t>The registrar can received request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The pledge-voucher-request Content-Type header field used for pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the Accept request-header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrars own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and the corresponding registrar-agent was authorized for involvement in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code is more appropriate, if the format of pledge-voucher-request is unknown.</t>

<t>If validation succeeds, the registrar will accept the pledge's request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The voucher request can be enhanced optionally with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: May contain the certificate or certificate chain of the registrar-agent.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c or x5bag header objects.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue:
choice between x5c and x5bag has to be taken. If the pledge wants to verify the agent-signed-data, it needs to know where to finde the registrar agent certificate in the array. Currently it is placed on the first position. Does this rule out the use of x5bag?
*/</t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate. If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent proximity to issue the corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
  }
}
{
    SIGNATURE
}

General JWS JSON Serialization
{
   "payload": "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="] 
         },
        "signature": "base64encodedvalue=="
      }
   ]
}

]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA by HTTP POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an Accept request-header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for data contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert. Either in the LDevID(RegAgt) EE certificate of registrar-voucher-request or of the prior-signed-voucher can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion, e.g.: "logged" or "verified"
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher response format is indicated by the Accept request-header field or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2022-01-04T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}


General JWS JSON Serialization
{
   "payload": "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         }
        "signature": "base64encodedvalue=="
      }
   ]
}

]]></artwork></figure>

<t>The MASA responds the voucher to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> provide an additional signature of the voucher. 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the pledge-voucher-request in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
General JWS JSON Serialization
{
   "payload": "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
   }
   "signatures":[
      {
        "protected":{ //MASA Signature
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         },
        "signature": "base64encodedvalue=="
      },   
      {
        "protected":{ //registrar-signature
           "alg": "ES256",
           "x5c": ["MIIB2jRR...dA=="]
         },
        "signature": "base64encodedvalue=="
      }
   ]
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor.</t>

<t>The registrar forwards the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object. The JWS object is signed with the pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the standard endpoint on the registrar cannot be used. EST requires to sent a raw PKCS#10 request to the simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The PER Content-Type header is: <spanx style="verb">application/jose</spanx>.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and in additional processing at the domain registrar as EST server as following.
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request as JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request with Content-Type header field "application/jose", it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's IDevID certificate of the x5c header field, is accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.
It will construct a registrar-enrollment-request (RER) by utilizing the enrollment protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This handling is out of scope for this document.</t>
</list></t>

<t>The registrar-agent sends the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code.
HTTP 406 error code is more appropriate, if the pledge-enrollment-request is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: "application/pkcs7-mime".</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Verify the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully.</t>
</list></t>

<t>When all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
When multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher-status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher-status-object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose" and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}


General JWS JSON Serialization
{
   "payload": { // to be verified
      "version": 1,
      "status":true,
      "reason":"Informative human readable message",
      "reason-context": { "additional" : "JSON" }
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         },
        "signature": "base64encodedvalue=="
      }
   ]
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge verifies the LDevID certificate. 
When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge enroll-status object.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the freshly provided LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
Compact JWS JSON Serialization
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}

General JWS JSON Serialization
{
   "payload": { // to be verified
      "version": 1,
      "status":true,
      "reason":"Informative human readable message",
      "reason-context": { "additional" : "JSON" }
   }
   "signatures":[
      {
        "protected":{
           "alg": "ES256",
           "x5c": ["MIIB2jCC...dA=="]
         },
        "signature": "base64encodedvalue=="
      }
   ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
 requestenroll             [THISRFC] supply PER to registrar
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request and in the IDevID certificate of the pledge.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-13.txt' type='TXT'/>
</reference>


<reference anchor='I-D.richardson-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <date day='1' month='December' year='2021'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-rfc8366bis-04'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-rfc8366bis-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included examples for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
s+tsg9Wsi2MRCqjW0YnrasTvs9vQRW7hkXT86DE22XyMB6JtwXcag39srveW
+2LdMdo5wsox1vtZk09u8A3ZUA5hZrNv95IHVsDjGi5/fDjSwmBhLCBsDAiE
kIcgl1EkwgCkhcv5Hzem2UW9ISaQwLbVlV4VT94isxKmhz0Xw/7ZlRisjKDc
IrUJhhtLGZopKRSsyjDYozZSb7kkixv7yjmpFE1yk2sUW6hKCoVhoGxu4/hQ
wOJQhSn5oOJTW/G6NOrTJL2tKGA6yyhW98jTTDBIjVUbZ2kzZQkqZ7cOZFN2
gqLBAEVrkKzEh63dxaR/Kj3LJPUht/JzxCsbY8uwMrFC83QmpWlw7NPRy2Sz
LQVsS8e689EAPI4ONoG6ji7rrcC2PnKvT2/7GjFwSRwKS7oTKSNVtcR17I8k
F8zLzTJHHmQDHDlrYz8u91K8g44jIj2vcsEVLRnD6DTheA8tyUZiPoyZwQ/u
HHOgmQ0rpXgbDK2hqdnxH9wfOabvzs6OI2ZjXnbqdHW3jLp4jVXKDKa7PHOM
GcYyIibkOii4E4S2TmH/VmuxVXNMfElHYRT2exIY9hJnjPRLOxTGGuc0BJdT
3K0iNuJIjZ7Plvemrs6WpPWTrJsJMXQINmkcFOA3dQSASfKKSEtzBfbS0Uoo
6W+/GB33XepfX3L/XJT5itMCTtWM2LWR2rFYb2cwqODMbLg56bpCJeDokuQT
iimwZWyi18i3qYlPCHVByqTT3zWLdpzfxo8vPrW5T9GXbAiJiUWRUUZV59OG
hhrauwLfvJV4Qe80IMcK+b5RXSkCF9RmKzIuXEVTaDFefHo/inoWpMynjT+/
gHFfZ2IpSpB1ymbj5hFa3atywqGBmXVymBlRsb8AimCZq0v5icPYRgSfU0Kr
rdSzOqh/0ZokZEfBoClKzGmLGVY7Q0GILX+mfIuNdTMXURN1uHfT182DryiM
fmriDtVxekhjLYW2iMu6hiLF2MostLP6Rti1Knsh8Q0MzyokI43UvCATolmp
t6s7eXaSKJLrwmut5eYa5CVMbi8zOD+6tR7h6SdZThR3sswkGrUzh0YeI8ur
ypm5pvC6+PrljlWOs7vYgbCWn4s8MIlbXejejucJZZVT2t5sOa1zjIW1CTqq
tA4RkC78PdcxXnIxxQLbtt+ASUvggbe5Fp5gD+Oc/BCkY1hxxWbq05uWxlun
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
d36rSvqjUbMA1odSoWuTNOz9P3NdxSF3owEA

-->

</rfc>

