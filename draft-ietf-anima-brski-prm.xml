<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.16 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To enable the establishment of a trust relation between a pledge and the domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode also.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>
CA:  </dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>
RA:  </dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>
POP:  </dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>
POI:  </dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>
IED:  </dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>
on-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>
off-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>
asynchronous communication:  </dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
synchronous communication:  </dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
authenticated self-contained object:  </dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support to support the communication between a pledge and a registrar over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the considered application examples, this is not sufficient to provide data origin authentication and therefore needs to be bound to the existing credential of the pledge (IDevID) additionally.
This binding supports the authorization decision for the certification request through a proof of identity.
The binding of data origin authentication to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID).</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection from the pledge to the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to ensure reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM).
This allows independence from protection provided by the utilized transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges with the domain registrar are performed with the help of a registrar-agent component.
The registrar-agent may be an integrated functionality of a commissioning tool.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes the same logical components as BRSKI with the registrar-agent component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like Bluetooth or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects from one or multiple pledges at once and performs a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /* Note:RFC8366bis</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended.
To define an additional assertion RFC 8366 may be revised.
There is currently ongoing work for a RFC8366bis. */</t>

<section anchor="agent-proximity"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.
Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to create voucher request.
It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to create enrollment request.
It returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided voucher to pledge.
It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll response (certificate) to pledge.
It returns the pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate to the pledge for inclusion into the pledge-voucher-request as "agent-sign-cert" leaf.
Note that this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data.
The registrar may include the LDevID(RegAgt) certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the "agent-sign-cert" leave of the registrar-voucher-request, the MASA can verify the LDevID(RegAgt) certificate and the signature of the registrar-agent in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge to verify at least the signature of the agent-signed-data.
It may not verify the agent-sign-cert itself due to missing issuing CA information.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll.
In the following the enrollment is described as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Verification of usage of ietf-ztp-types to convey the 
P10 in enrollment request. 
*/</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In this case it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to achieve proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
"know" its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledges is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The bootstrapping exchange between the registrar-agent and the domain registrar resembles the exchanges between the pledge and the domain registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own LDevID(RegAgt) EE credential of registrar domain.
It knows the address of the domain registrar through configuration or discovery by, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request   objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors / manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using the LDevID(RegAgt) of the registrar-agent instead of the IDevID of the pledge.
This allows the registrar to distinguish between pledge-initiator-mode and pledge-responder-mode. In pledge-responder-mode the registrar has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as defined in <xref target="RFC8995"/>. Specifically, the registrar will receive JOSE objects from the pledge for voucher-request and enrollment-request (instead of the objects for voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar with an HTTP-over-TLS POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The pledge-voucher-request Content-Type used in the pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>(see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the "Accept" header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain the own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not contained in the agent-sign-cert component of the pledge-voucher-request, it must fetch the certificate from a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)  certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the connected credential used to sign the data was valid at signature creation time and that the corresponding registrar-agent was authorized to be involved in the bootstrapping.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code to the registrar-agent.
If the pledge-voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JOSE object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the product-serial-number contained in the IDevID certificate of  the pledge matches the serial-number field in the pledge-voucher-request.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number field contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt) EE certificate if MASA verification of agent-proximity is required to provide the assertion "agent-proximity".</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA with an HTTP-over-TLS POST at the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an "Accept" header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following additional processing <bcp14>SHALL</bcp14> be done for components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> be consistent with the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to be able to provide an assertion "agent-proximity".
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the product-serial-number of the pledge contained in the serial-number component of the prior-signed-voucher and also in serial-number component of  the registrar-voucher-request.
The LDevID(RegAgt) used to generate provide the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) EE certificate in the agent-sign-cert, which can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.
If the agent-sign-cert is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion "logged" or "verified"</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted Accept header fields or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the registrar.
After receiving the voucher the registrar may evaluate the voucher for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge's enrollment-request to the registrar.
Deviating from BRSKI the enrollment-request is not a raw PKCS#10 request.
As the registrar-agent is involved in the exchange, the PKCS#10 is contained in the JOSE object. The signature is created using the pledge's IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request to the registrar with an HTTP-over-TLS POST at the endpoint "/.well-known/est/simpleenroll".</t>

<t>The enrollment-request Content-Type is: <spanx style="verb">application/jose</spanx></t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
If the voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and results in additional processing at the domain registrar as EST server as following.
Note that the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content Type application/jose, it <bcp14>MUST</bcp14> verify the signature using the certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained in the pledge's IDevID certificate contained in the JOSE header as being accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JOSE body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the content type "application/pkcs7-mime".</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:
Communication between domain CA and registrar is of content
type "application/pkcs7-mime"
Communication between registrar, registrar-agent and further to the pledge
should be of content type "application/jose" . */</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
The enhanced fields are described in Section Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-26.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-10-26 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID.
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='8' month='November' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Housekeeping: Removed already addressed open issues.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
nSokhkZNLJ6NUqErzjoa/C9oRaOLI10BAA==

-->

</rfc>

