<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.5 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>asynchronous communication:</dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>IED:</dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
  <dt>synchronous communication:</dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support the communication between a pledge and a registrar via a registrar-agent.</t>

<t>At least the following properties are required by the voucher handling and the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID). This supports independence from the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE. In constraint environments it may provided based on COSE.</t>

<t><figure title="BRSKI-PRM abstract protocol overview">
    <!-- Image converted from PDF using https://www.zamzar.com/convert/pdf-to-svg/-->
    <artwork src="pics/brski-prm_overview_bw.svg">
[ Cannot render SVG graphics - please view
  https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski-prm_overview_bw.svg ]
    </artwork>
</figure></t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDeID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar agent LDevID certificates.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects on one or multiple pledges at performs may perform a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Representation of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the pledge-voucher-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the pledge-voucher-request.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent may use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and it's own LDevID(RegAgt) credentials of site domain.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request  objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendor/manufacturer and an it's own LDevID(Reg) credentials.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]        |            |
[registrar-agent done. ]              |            |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
[certification request handling registrar-agent]   |
[and site infrastructure]                          |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
This allows the registrar to distinguish between BRSKI (pledge-initiator-mode) and BRSKI-PRM (pledge-responder-mode). 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note, the authorization will be verified based on the agent-signed-data carried in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one of in the pledge-voucher-request.</t>

<t>The registrar can received request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The pledge-voucher-request Content-Type header field used for pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the Accept request-header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrars own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and the corresponding registrar-agent was authorized for involvement in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code is more appropriate, if the format of pledge-voucher-request is unknown.</t>

<t>If validation succeeds, the registrar will accept the pledge's request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The voucher request can be enhanced optionally with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the certificate or the certificate including the chain of the registrar-agent.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent proximity to issue the corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA by HTTP POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an Accept request-header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for data contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert. Either in the LDevID(RegAgt) EE certificate of registrar-voucher-request or of the prior-signed-voucher can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion, e.g.: "logged" or "verified"
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher response format is indicated by the Accept request-header field or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA responds the voucher to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> provide an additional signature of the voucher. 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the pledge-voucher-request in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor.</t>

<t>The registrar forwards the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object. The JWS object is signed with the pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the standard endpoint on the registrar cannot be used. EST requires to sent a raw PKCS#10 request to the simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The PER Content-Type header is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and in additional processing at the domain registrar as EST server as following.
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request as JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request with Content-Type header field "application/jose+json", it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's IDevID certificate of the x5c header field, is accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.
It will construct a registrar-enrollment-request (RER) by utilizing the enrollment protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This handling is out of scope for this document.</t>
</list></t>

<t>The registrar-agent sends the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code.
HTTP 406 error code is more appropriate, if the pledge-enrollment-request is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: "application/pkcs7-mime".</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Verify the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully.</t>
</list></t>

<t>When all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
When multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher-status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher-status-object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose+json" and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge verifies the LDevID certificate. 
When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge enroll-status object.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose+json", signed using the freshly provided LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose+json" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose+json" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-CACerts             supply CA certs to pledge          [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request and in the IDevID certificate of the pledge.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include SVG graphic as overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAMOpTmIAA+2923YbR5Yo+I6vyKYeRNoAeJEs2yyXu2iStlnWhU3SdvXx
eNxJIEFmCUCiMxOkWJJ6nQ+ZWWu+ZT7lfMnsW0TsiIxMgJRc1XO6uaosEsiM
y44d+34ZDAa9Oq+n2X7yzdn5DyfJbV5fJ6fTbHyVJfk8OcuqRTEfZ2Xyohhn
ySY9NDg9e7HVSy8vy+xG3sOPeuNiNE9nMNS4TCf1IM/qySCd57N0cFlWr/PB
opwNdp700jJL95NXi6xM67yYV0k6Hycv0nl6lc2yed27vdpPDl6evDhIfv6u
N05rGHBvZ2+vV9Xw4G/ptJjDJ3W5zHr5oqTfqnpvZ+fLnb3eKK33k6oe9xb5
fi9J6mK0nzy+y6rH8MeomC3SUe0+qO5mZTap1AdFWfufwATzos4neTaGD+cF
PVWXuRsmXdbXRbnfGwC04MXzYfJtmWcVPMegOK+zySSb20+LEnZ3nuNOq+Tg
O/jEwFE+5BmyDGZ4VdfF4Pv0ej44y+dXyTPcRF7f7ScvlvN8dE17GsMcj7/Y
/fzJl7zH5bwu4YnvsnKWzu/go2yW5lMECq1jOMF1/KniuYYAE3hkWeb7yXVd
L6r97e3b29uh+nrb7OximPyclfOstFu7uC5maeU+/UdtraZ1DG5pHQ/Z2vEw
eZ6lbmPH07yozUe0q8O8GhXJ+R1Acaa3cQZrrXP4K62qLPnc7uLndDrNq2w6
zeZ2K4ffD754svNUb+UcbtvfsnIKeA0fL64Jszc+fbqbPH2afPH5F8mXgNcb
bqdTWNKfRrgW2p4s/8WQ1pGW46qY2028wI+yaXIYfMunBDNmUwBjcl5M6lu4
kcnPRfm6clPNRuWneIH/VJlHh6NUA9TAU3293ZsXcDZ1fpPh7Tv79vDZ3tNd
8+vnz/bcr0/k1893nuyYXz/b/Ux+/WLnqfn0iyfPnplfn+58bn798kt69mRw
NFRk5q+31eCmWI6us9L7dp7Vo2I+GVR/qxeDUVVGXi0nI5zqMq/2e/l8Euxj
78svzCo+2/vCrY2XeXJ8fDz4YmdvuHtwhn8D4WGSil8k8kVyno2WAOej7CYf
ZcnJGEgdEpaSXjBkBH8f8BmdzCsYZllnSTEBlMxGSHfSKVFL/rOAq1Ilx/Or
fJ5lZUUvG3q5+8Vg5xl9UmV45XFPPDyvF6+WLOxxrzcYDOCyIh6P6l7v4jqv
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
Fpuh4bFP0XLsmeNEsDXVgUiQipmgWfFUlb45yEFYJVXPYaXZ0CJXbYvjGKLl
ftD6RHUuxq41vC5cz+bBVHoYzFIrcjVHJ91BHtJWvGbx64bv3g8l4FpTr9Ck
GONhDRtju9JA2R7GdOrZoiWanNqjtdbgpWI1JleZgwWaPiRHltPk9IfD80e7
O9J0ykpEKO6tINkmuS411Vxzot5qvjSfVbrJUsp7yEe+GXNe+Jy0hv3DasQ2
aXldULV8Lf9NBE4f33fTnGSF+yayqjYPzr+FLpx/67HsOk/I6Uequr4m4bak
tBLeMO8dOXAy5TrHT9CESgrGHJ6f6VMp/AIx6WWxrBW06UrvW3ygzn2y5aBk
W5myrq04OD83wCE2kj8CAyeRYEMTU3zLFkzkcsRxf0PaDu9W6noSKnDBFco1
IUirGNbHzidmnVGrihtmRB1v2hoi+JOuqEnl0s7lOCV4CaOcsNwA1XsnbtRZ
792vwSw30s2yWF4CsuKTQS63l8AarbzuyAxTl75bkq19peo8DXvfZ1SywDPH
Y+HCjPo6sSznFzMjq5YtnBjKw8Qb/1YvCPeU1fWqLJZU/oLsGFU58D6oDTzb
uO08qzEGaVDh0PA64fsRlXagEkymydoivcx1+3WTIJ7Xug5KC0FH28KU+6QQ
Nff5pg0gk2KPWIeN2lHk9NqIT0ZexbHMr+I3oaoRLmvaxWWqlbjKG6LA+KH7
TEeOzy/6yeGLU/zPeZ9UpvPD41PnaXPWNoOfOV5vnEEK3UWmtDmVU2rUdiX7
9nvb2DYOxilg8hzbuKOAUHxdMF7nmYpU4mgtiRLmFjnuxtKKH7hqOoUBYJBY
Hr44HMakrXtQAnN+Zie6HKFVO/Hq4R8ezyesx+oBTa1McQnbHMLeTGABc8uh
FSY5WnmZAWy4C+56dtUY6/4721SbS8CSZyoj2Cf706kUFeL+SEbWafapjYRg
4l+oabPj07h25QKaOosGDsa6sKmEA1tcbyvWGJd6SNlydoSgaBWwdfeTqLiC
l4prlurCvYEx3m8i0Ou+JnjEgDSlw1ErhSD6U2WhF4eIOfE7IxbLIATz1lQo
cuwkl1Zv/qY9Iknt4GpV3FdGr0Toses5N1abwH1vp/VNu3nJEZbqvIPlx4XD
NaVCkuQSE+xr9tKUFYsq+5QFxlYXQGzK//YCNLzc7cCSPTgKzX6u5BROxAFr
E+eRg9rSoKN76Ikd+4vdHbwqK4UIjsre3emGlmUEgYf34joL5aZ7GOgsdVJO
6roZEUInqwoH+Ea7lVY7CxNtoxPwdJth/ncyHGWrDUf30G5+NkKt6wS6wr3r
5X60t/6Jx+CLCZ7FwTXa8awyobhVd9hQ1uwjnNt6KFVDWOAQ9Ww+9hxPLsml
pbc0WZCkpQ0MSYXn7lX+N010SCucsK2AQ16MWUFF6VNuDeskKNP5us8CKJdr
jfcybjSTdfed6ga2lIhZv9QmZ+mYAN3vTQ7QoJGYs3niKQhbjewcUzvQSa7+
bpqJRLFVNqp14h2akahnxo6MpE6qMcCmIJfUnC44G26LsZrbqpvypVU0l+ZB
+TJ5/biKZczoPA7KBrKNOIUhXot5blUVU9MrLda31+apmN6tmJu0Df8/P2pr
IozTUkZe2U5jum+quW6b1dZ902LCDJTtRv4J2o+bEPXAGU2dsS/FBn54To3p
B2GTrO3OHp4sM7h/zR2HmRTGf486O+mDa+t8cD2de+8zSaJpCpGEWV0zp1G8
UtGIX6NjwEvhrUDD89A9Hn1p/eWFLz0kq/tBxUYetryHVCSRjzjaZu2ZWvbU
WbbkQWVKHlSWpKMMSXB+fIYdL0XKlqx6if/ZPHMAXWN5zY/aCp2s+3a8wMl9
C5okicL8rhImD9+ne+mXuEnC5jkHl/1XfskQ8LCWycrlDcK6Jve5LscPuy72
Cw8PY7VP4gVTWgs5rQD55pkseM2XOip7OFqoq6g0MeJjkLX2VLW9MFVNtUHt
ElcDq7kv8ZpO352hAQ2rks2XQG9vUJi3WX2blBvbfas2TpRGh3Xp5YLj7Q6f
JJtUa/sWO41TmN2oWKIlHptp0BN7iXkAvz87/pcfT86Oj4z3o6E35uPMvOmN
LYYWrz1DOAY7Ns20GIVmi6jfb0QUNToGC1v06k4GrY1wyLUxus6zG44yYPUr
3H+HjK8qfgamMC25UlyDaqrjVYlU3XQsLrIi1KbaIGY6Ncw85ZcD2QptyAa0
NuenpYxCXinmLG4AxM+mVu45EYNizYkp9Bs2ESGzvNfY3HNFNhNY0rJUgeZt
NYsPyJFd1oMpxXQ0MqpQ65vN2BbQqGOg2wN3B/rpCsteV21TWYLvFBkFyKg6
p2u5YvEBpSA3gw1PCd1TnsePO7Z0Bf2fmx4/00arDeMioYkiEfqVDXEJG3kj
BGPaY0Rt3FQ3hLG68SK62s7l0DkHtmWshiut2mqx3TtjUXsBwQCZ71SQhnxr
fCz70WgTGcpELq4fCeZFY1ljfLyoz32jxnynQxg19m/JZpVlWF/kBp+3Tlhe
Hc9ElpE2uDYizbLkgIVzE8zZFWpmVDQXEObBJYg6G+i4sOanHTDd6ILBxr1g
qkNFFs1+GfECyZrmovfG9GOjzRHdG3lO7xBb2vw6qokTvur332wtwAKEEYtI
qVzPiAdJBWbHd/aAOHzjf7FfNu07AXmtsZ97tSwDkzPu3c7V2XtBmYfbAvF9
UksLDVmi19tAmnvYpNTuLgVeRz7xbLvS25jLpv0uOkg8ScQVH9RCR194WA89
TNaFpS7wraxahZ4YmoE5vKqJhO3ItyhAMSrKu2a4ZR4p8a4qwOe2NjwJYiuS
D7BQ97rlAchjYTqNrebPAkUXAFWvPmzPSmhHjzH/oEVD1Ie51bfRARTQQbZd
itxz1YcoKRvTDJzr2obBUB6Q7WDlRXfFWlkoSY2jXG6K6Q2n7trWGlplEbVn
mDh0864Ip34z0hn8D8nJvTolkE3Zkj8YWdO/fksvpK6OCo30WrhTqzK5abte
O59+RP4lsat1X83KFa7wWlfzUbw72RuYAZODgsYRP2DQLoXguDz9ZAJqT6gl
dETZPF0dZTPsxSJysBpawZ2BgHqUOYX+SgcIF6fdXmdjOSdhaBiun6JxsnEV
FTbFkuf5s5VI9tfC9Cdiw/b67M+n6rXXwLdT0+bqfUE4uZvpaTATrrK4lLAC
41Pww4dC0SkaOarjGdobcqxM6pXMIjhQxEOeSNW3++Cs20ioSvtqf69QFT8I
7GFxKu40mtFY5NH6PXNW20HGdt8PSFsN+qH//bJUI1p0uDmPqflZrYucOVaX
xPlhiavJOoKe2GoCnlUtBcV00QY/9mgzLOqwBbiD4hQvza8IQaElhl2d/nTW
qJdoQkDh5sLWObazbZiO0jBGVMUeljhLR+5uI2NXZfP6qv5mIPdtNUGresDl
lZeKgH16KaBdx2iGGpCVtkW+7zYI4fSwsa7eMVE8aWDnijIHcpPD+yURoDZx
WVELy1LctY1lNDeuaHvW5n5UlvYvrp/F29AfvOKwXXm9gpTWHKDaRNuKZLnk
KLGN5l5JwERUyDXjMJciXG6p+Q6llRo+I2E9KLShbEFxo6AKYPNvncLauAnU
QlPdpQgbWKE9nKiInIYJ0ShhLNhwIaiHT5UkrkPWsopdHmsOWXFfMIYaLlkW
URnc9W526GrK/57034BuR1OoPH4esTsamhmM8bMj8DFk3WFkyN8n/PGhSct7
gx3MW77Y2dt/8vn+ky+He08++4cnLXdRz/+KacfRRX3cEFKVL9eVfNx6y9Zz
MnpRkm1ymVwOIj1dZu91rN4NO/H6lu+PbNpual2eqRr49j0s1cpE3Z4WHRio
1YMf1wBtY3DpxMRfs+qQ83pN47OqZejK+rcrxJ81VNCm6VnpLc7NbpVTWZCY
rO7fGvB+lmjLZFX5R5e/zofvSVQek2mYFqvCieuO4cT4TcMM2HpWXZbq5tLt
qi3f7zDNqlVHpelINb0OrarfPChfRYnYoWMygG2yQJjVPsAqsLEisobHVmfr
06p1XlJubIxWFWA7fVeVE6MWKVBuKRN+h9zlGcvDMP3wEjdrKHri3SoTZdxb
MEyOQVNxzZdXVN7p4EmocXSdc9i6U8BrTG6EvfZT0gZs+wxTxaDdWTRMokZs
EWL9JqhNc7a9VzbTPsGqQiUlrU7dAXKE9b5r8Vro5q+9ROIcYM2Uwbsanrne
d4q2hsEhtw/BRSrbJ3xKfFez67553rdeSd0ivFFIX1mkaPUWkWJ1UGlSohiS
Ke/UN8UvWGmL60Wso8UM2ArKMeM1jEtiR4ftmplq8BRrYq+RjbfZhp8FFtt+
8tU/DQbJX/7yF4zZ43pgM0DXyihMMOp+8nTnSR+t6fifZ5wK/XT3M1O66c2C
01zCiiVerRLj7BN87pI2iiB4BuH0uJJm7Uv0/ld1KgnpEyGKvt2NUsXZ2qwj
PAJTdBhNQMStWza5j32YrAHcANdvkVvdAcl64xdnwLgVal2LAOLzefLsGcao
vH2L+x9QSAJWo6BitZmqJGFsElI5yxre1681FVPV1lOV1tK67qHFtSuI8apW
i3xOHIaIgi0lhelui6PDwwNQl27/nnl2f1dNSdCiXVvi/uJMTuWEO/UkEaCN
kUBhbJP69A6oMHW0gmvcPZfhtojGyy3FOg0gRcCm74iiIA8hqXhZLgq0+WDG
87KeriZioYPL41zzeAUP30NA4YBiXrGiD/mJMJPIcWATCyT8lyDWNqYuRYh2
wQ8pWqIZvZJDbRic8LKwNcDpT2c2pgnr379/vzWMWf5N2jztMW5HYrWA63Gw
bhLGisbi/tDErQq9wN+3adlQwdnEyj5ojnBRjayaa9K+Jr/kQLTlOlUd9GqC
tLiGcnlwAhx1VUylLz2sruhvtcdh8i01WjB0/ez4O6btVHLC63IeEHmzYrak
3xZuiyhp/Det/9+C1vf//7DILobE+HwvptSob6sMdmZNrYyrUZwI2MSyRMv/
ogBBzoYRcPWQgqpWeYQeSYhRDihUBVZcs6gPki0MkddBkHaj2SHVaQGZFKuJ
eTYj7giRzkfwdiPwAWioI4ZtnNbQxk6G25LPHkb5xuKPKfemyd6POCkYy0ah
R8LV52sfyhSmScr0tlHTpysHnYKyLLk1ySm8J1cwxNYQodgSF7LB/EyFcDgn
iWtFEBSHcIGUzdpAgdABjFPsjD9fU2s8hAlVhiJcQz0EztAZhcP8DkQv7gbC
iRj4ro2zIgMYiRMe0AJLdEVVpaQknZlIuKV1Ps6A2zLTcIV0KWWDCojJoik9
xEIFIC1BuzgRSWNYNSYNa8aoyhw2Jh9gXmYTCpCiQkB2/80uiL723GE05x1K
pDjg5ZpVBm3lGLpgZD/CqkYVI4rNbneuNSPDceU0k7PAoTY7T3bQnD5nNFP+
aWepTT07hFd0E0EsCdNppav+u3QPDy62rN1tWqoCQX5QIuqy1iZMe4prr+Ol
tRJIutMa5hYns9l4sJkumWDDANqS4it9FdFSexISR2uR7yhwyEi5Zsi6PfEN
Z2xWgl+kvJLzlvqbDwKQfZ/nJ4GgLGYtJZk2as40u5Qoxz3tpM8pVXjxWGIN
YvqCmM+YR6K1dQLB/rLAug4cZBhinFdMMCQ2Ddu1IqkUjoeX93R3J7D8smxp
Kv3sY7UbogGm6Je6OO017MISK9gfmCLOTEMOCQ1MFQOJMTPKy/SIXjChKcLn
bFZijnITJ2I3b9xvjH7L2DQsNDYKR9i7K32buORIga91obkCpXXh1eSXFR0e
oDRiGLOJPnoeDclyBWDo+DdJ3gFVMEfSFS7QXG1dcd2KAD4cDkwPArPqcCxQ
VOqyuPNL6nboub5uq7TevtnzbbGE+z7P+HZIQOzZwcBayU2RmaEJWrYZzTlx
bqorMiqsP1IXfDNhJe2SErKdj5f8ZDmabwIWYEQIlTIO3zu8+f5xzJ2yHKci
SBizrWSXYEHBvF5KABtSwhGd2CWuuGJJTsT5GSAE7qDG/DkpprRpykcib6XK
P7HSJK5OCunuS0J9jOu82zJZrYb5+fB44sHDL37YVdMJES8siCgmluiN85vZ
zY0oHwmXayvt6FhShOvt+wxv8XpUfT6Y5bOsrVIz95y7TTBBjXrNaUm6ai9h
ZRsNmtbr15FMsk2SnEhvA1nK1UrZUqREYZB5Kwo4S2iMeV763Y2mhZiggkh0
ny75C3f9PzObk+kNT6HLF0rks5qb13i+0jKqqSyklTJlj3fZJ4r+0vef7X2x
Q4qC1JSSKV5J0T0GcKTnO6y4peP7kw/r+I5IwcH4NtUn2LYViZuVsU5sidAB
ZRkJhY9cIdtBvkhMURH3sa12K5zT1GbSRsz1Os2j66dCjatg25yKBDS7UN0n
R3VzgX5xKy3gc0J8o0b+qvpX2s7bjJsfrt8Q/L69wL3aR2t09L5vB/D7Nv9+
WN9vvw7QwNAgA1U15voNob1e0DiooWZYHGJZ6UI1ySC5XyNofMYU6vJGdfsw
e/BkXLl0H7YPqTQfbuMD9+GN2lEg5Imz58luSOTkxVgBLFJrKqBJ96oFogLn
/WBp5EJo/+bSEKNaVfv1yH+ghAcR67IRVaVdBBcl7DkubYsPgxwCD3G2Aeo/
K5tkt/HstTK2YXWdHulmBy/VkC2M4UcWPkwOnGMB5MArEM6kv4FzM3PRXuL4
FF4u9jRN7+CNFj8GvmzDIXwXxcnERap7njarfHo9BbxYPj25VcXzuiMW79lw
t1nwwQtid6uL9xX2zKteowMdNuh24qnrjSylohxTc/Ik2R0mP7HBInAg3mcz
Srad3qFqszdMTsQKHbdA+42pScN7YlcSsbk/fDlciKYmD6BvDfXsL7b0hcHO
RtlxDVHc41O73vZxQ6foui66FsegB2aK6CFLsC0aYCua19miMkWI0kuQX1RS
s7Pg+WBqIFamDW98VEYLpqGtgdXrOS3na2RT5S0dynLvi/OWLHlr1LY2BICP
ggKYuShhxWi0LAGDlrbpjX8/ahf0GmYflFmKxM1rBRxlvc7yyO4Rb4Zw4WW2
MIlIqWFeNfVyrsu7ZIaV1404Gomc+jwMOhBjgsxgjD4etZJVDlR9YsvVmHbp
utZWYo1ViDeAEWZhVtuW0ywsR542ZVU9FtNiVGXyHsk0Ea3cPw6/Rc4N7heV
IOvvUeeI9hnJBzNBCRaYW2zKZd2+cJ56ChtEiw4j2opUFDj9ir3Yu8YBTPCH
D+CeZPIZLwqdnCdGqMC7upxRXaF0LHHtBN8N752B5H55vnPrJMARMfdLXNA9
8a7GnNCuQnjUt9vm2V3Xr/ve+ezX8+niYn/VlbzpIFfV8g7vor1LnWJeTDb+
/YQwN1ubHCYycJcYhuYe7fzznUVV1MK8TkFqv34e+gaCvnbO8rOPzlXXBYTE
skhgfkffjr4NoW0kazfK+HhEXzk+YtMYDvM7031fAbJk/+Kj0vgvGxUNiJQZ
QHL/DVuUndiwDOOczwEit4SfMS4h9R+2cxGFV7KVkIP8/dhCv8kQJjDQNUDb
7vj5ag6Rrckh/psf/KfiB9la/MC/o6vZwT3aJyj938bet5ZetN2TtIVYVmWQ
v9lHwZhuLyy5CA0cm+E6Bw3LabMzwNMPt+L6oPBIYKMymTPdRjYfWMn96mAR
ly2lIpmixz1tg4FDD7g/DkEWhgcZWtcztQ4UGfRtV4kPD2vz/Zh15k3N97Xr
zCurK//HH6qjzrw1v/7nrjO//kvuD8/q+9Dq7/eYaTAwZcfPWRl74ExctZur
rLtLkcTt078YJdk+t27B8fgWpDi07OD3A9Z9X2o3GT813OIbvyq0T1LvZRAm
AU9TtbAvUEMhCSk8RwzItyb+p/L94eLQFiromYS0uYNKRBe16xEYd1yqCl9I
yNHN2chrfFDpa5KrVMXrWIfn7liHLoMKTYjRFLNirAwqjT2pbLUBeuwGuO4P
0NpkMb+JnMbBnS2GcZPn1mrHaO+Cbf0a4tAdZ4t8pCLBrIHcM2pEC5dFUw46
TVZkweZoEKfQYfT//IpQFlUGEyEm5AbWwYEsxGi8EDFnwAsC9M1eIsFpZUYF
kkduw34Rs1Yb22hUlCYtxbP9OivZOtErJr9xb4c7KqKcT1GudxQB4z9ko1yG
UXzWXR+tYiOJ5am1UCbbNDLVTrXVowi0IG5fz/NRjn2qGFEbhVVEd8J2ZC6v
G53YQNcr/bfprJcuaq7SmmvlU4lPEVyiN4noGNXRNNcSOcykR1nq5YSxyztj
rTaL5yRiZD4DZD5WRmR/g2y93bz/RUMLXo8g24jImLbeksPaoMadpDi01ijL
6nUxFcrWGma2Lk2MLv8fRBJ5LYYg9v4TEMTsQwliFLy/F1mM1mrws/vDeMpV
9DFui/K7vDbqUjWh4WxGXpy68Su6s3IhjquMVeuQaHjvvxiRju92LTLde5Qc
IGKkoFqiecC27TGtUsy3oPe3lqoLDQA6RyN7U2dBuq2Oro+Xq+SMIynd48yL
ZEWrgi7CLjzDTyvwshv9XIKhGELKLEuO8vSqTGfhFmr8bszfcZBpVVMhuvGS
aU80N90rPGBlWmsdkDdkG40aIqHc7Dy5XmgmGS3su7hYLyoL9xGuPiCLFO33
lKL5jtPRNcj5Y+uBU2+xHqCahjPV+9eDl98hk1gyvTyXi9deynDAD9P9JYWK
/95P2kqr9XrJVVks6Rxjg5ove6Tim0fYBogfuMzLf24qfN5Ps8CpGyV7s8Ak
pg8cxeaerhoEbs1yJmzTve5T9a4fwBkGibyZI8kdDygVseyc/DKfw2VybzYT
UdteD99Ur8CB3RTMHgZwOqPXlTcIXNZplqqNUmLtShjFJp2mFc42z24BUHgK
raN0nVNXzSl/wAa4WgIumssI32xQgNaVx99cGfPxz11zdp6sm9OYQFoMGUhI
iSK8YIrQziYMGQhJraYnmltofhByJc0fjOMmNZzKagMhm46UbUIehCKpqXiw
gvoa12avgwAzxL46fHV0nHxz/N3Jy/OvgeTD5lpLSf5pb2dvd7C7N9h9NkRI
bfR6hr62vEHOEwKq+ICS3eHuHzD2ap7OgNelIFRsLMv5Pg6wTxlN1f6b2XR/
Xu3TLWgbeOMPMMYCBMT8TXJTwgf4N/wPBCNMnqTXgChSA3Tx4MjT5egP9Key
/huvDFmlZASy6cwkOZbcvOJsMfkwVWX8P3getEcqZ0WoQVtVMgNgSPLFztOd
4QZPbiXbZMN8tZ+cHZ9fHL56+W1yKs5revh9L9hWKJ14u7sZld3bkwPjtVUS
GmdL9qRh2JVOZ7e5FizKm+JQzr+oS37LnVCvF/PLIi3HusFDCA2zUoIJvL2f
+FbLs2yGwv05ppZnyQ/ZXeL3g3YAK8qrdC6J4jjqxsnxxbfJwcuTFwfJz0Ae
cLTvkD1vEDZKsDo9+fN3yc/Z5T78+tV1XS/2t7drYAIV1Rcawrjbt1fbVGZo
+2taLzz/PMd6zslXwFWmdbFP3/7JPM9PHVDqOo56XmeTSTZPvi3zrFLwwR8z
QsXPDCf4zJ+qHDGxGo6KWTjY8TQv6uR5lpYtIyXAvso/jTCSP/b+xTWwwgo2
XM6z1iFqemhwSw91reYFIEiaTZMz/LccVxb3GkPORuWnCKA/VUCpsuksnQ9H
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

-->

</rfc>

