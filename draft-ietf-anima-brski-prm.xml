<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Voucher successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Enrollment response successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to supply status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge).</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status objects described below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response objects in the future.<br />
A pledge or a registrar-agent that receives a plegde-status request object with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstraping".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrapping.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrapping" anchor="stat_req"><artwork align="left"><![CDATA[
{
  "payload": {
      "version": 1,
      "created-on": "2022-08-12T02:37:39.235Z",
      "serial-number": "pledge-callee4711"
      "status-type": "bootstrap"
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>If the pledge receives the plegde-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
      "version": uint,
      "status": "factory-default" / "vouchered" / "enrolled" / "error",
      ? "reason" : text,
      ? "reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occured during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge status response" anchor="stat_res"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": "enrolled",
    "status-context": { "additional" : "JSON" }
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
        "typ": "jose+json, TODO: may be more specific"
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
lmTrceL897t2AnrYrurumXvjRsxMjW0J8rH32mvtfOwtfvYmEn6udbxJIVtB
wRwXkYcHXQ9+dC0MjEt3wHU/AL5zhYAW8xE9xmZHCr7ckW1m8OFgUXr4VmvY
atqUm4ihPIJHpibwxY9amd08gZmsC2tKhMG2iFb+RMjIR5RxZazDMnthofcC
nvUmIwt2omkDbi0Y+RFw/PibFuN51zVld1hk7bTvDOL58pAIZ+rtb3o8vCnE
fq1j6l+CVrm8N9DzvtxlAn7kBPub0WSWxak+PsDDTLTBntiiFVjxfFJ4e493
DHZrHsK5ZUezbD6eW8/3rWEnbbHYE5mbmEuMbiLL6yHmAvbbHwawIpOhTXcv
mW5ZZA++nQGbYxWBfcvz0AOMSbYYSsdI9SFYGyKsdOeREZiCJRZv+Wb+dN+K
7x+MYctHlI9NFaPveMAszDZgKN9O8Ea/la/HpmkMbIwij3//AKjIRTbvOOI2
Zlkrs4CzKlqliGT4+TbWpeNjboaIdgLjlmmyNTSy2Oebl7CQ18kMWKdazSyv
i399zuUCs9vxFjlGkL1wcBh/4S1S88Z1Rdz2zexlrLPO2BQ7Po+vXcsyPPIj
i/cjDXbrcO6Fk/Buz2byWsy850HAV6mxW8RFfB/rJReauPZsFkQ8OiT90ufh
3SFciJ47k+hR7YGez2VvUrDboWZFzMio5WA9aKfIo6TIt+/ERIx62XU5Wd2/
aLdsQIhpntttKIWK0/iWlWm58h1hb1rwd2sCloaxe2SmthdGPgsK/SlpZY/C
hE+3QSHR+hszCJxRUpgrwLuXaYLV/v2AniD6C+HPLOIOxBUG4IHM7We31XzC
p5mPNnDJ8tBy1njCItPiRf0Ek5lmR1CvZl0BzL2OON9lsuyLhcfABloCmCRM
eMAiOqEScOsCpbwhMaQCViDYmh2680wfHlzjRk7kcpfNN3c8dCT4ANREGi5X
w/lNeK+X9tgoZ7G0Wq5kj4lWDhPzZhUYcTda8E4k3d1YlOWgL3MmonYKru4b
2xdPwl6iaB63A0PvJQvHH8+9KD04caaXmAev9h0HbbLmA1PcYoyIx909aIQI
VuN74HWvvW+oOd/xPkYWD9yzirE2fEmmv61i/duLZ4A19/yFmPm9mygN3/G+
8M5ggZymMtfS6aaETnBEcdOe3A5fxgs5dw2w+RGhlPI24yaBDz9h3MlmTa5b
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
HYDkGX5wJZffXqmF07H2JbVyO6WqwJv6vdlqWZ5XEaB3rCYvy2Ly5gpuusP7
1KXWmy6dPWWd0yWyzZ36zZ3ddOH42X3A02/fqEw2zCGhcifVZcbqQ3RxAN3B
qy4PWO8X43y1XJBh/Hq1n1Bx6jee2nrtqe3aU6uraVl1NS1s7nR9raTKJVRQ
obZYw/j087XeFN6ma2fpEgJMxaSshmyxmXxb0cXOePBZGeOqzC25dHUbPd36
XBV2bcqdvKquVo1BU+n7vIgKFTGg55AM3Hym0f6SVThTymRRGbq6dZdKMtfl
vn5qEOSns2vKz+6wPgKGfn18Xj1xteuoyXt9pT3ZO7xOUnVWutGA6geb6h91
3fmULg6eUL2A0/P/fnx+crogunr6ghBX0s3vzVgciwAQEtPENk/57XJ0jxdR
X6Ld+rn8NFm8EMo1XySgYZP5ki6lQNhUt07s9tWl2oDEKgTVV0MnF8NKMWUz
2Z2GytCOXTmvxIsZqqvw9L5URYaO6F1Kumm5hgG6Hl7W9/VXJb6qIuuvyg+d
/LvBqlPln+/heut//uc/qrvrqy5QCDkWPjgB9bFdv3zvQUY9Eu/EiI9vS0Co
AgVVsbIf9eM0gDoG8Ijmx1J9aUqXZNSRaNoUmanvWleNoEpQG3mKcoahZpVI
AcEMJokurKbrq6mYyv7ySujmOy1VKEDZ+P4KnywrWGum5Ti3TcS+cIf16dr6
+kLrqk4SuvkO7hivcaelcIeXVdmFI0GgYk/kElc/0dOv23XZypdEPk/+8z9/
UiO+64yvluPx80pVNVufiAYlXgp6hC/sK0BQCYSiQPStTujQUFBL1VA1DlPb
XzP/HXVFjEw2G7qYZYrvrcb5Ht8wmzIBtRlVXaXxmi83xANUhQ0yIHzg03op
FVXw66GbKOpFN4RX133XX//eEFLx0beDqL8eRKMC79qxO2dcIzveIX9R/aFB
FYWsZ+Vnvu9Ijf2f/p582/yjXO3+hyr8UUruNb2YP8vNlGjrSbxWdSjfrabw
xm0/VNGz6clqUlcYPqH6j/Nz6iONPV2y0NVquTrjCmoQGij5WldHoXCqarWc
lSb5TvVPAnlKQZ4Xlav+8IMe6ujhGQDD5xa1P2I6kspFz3HxOJo9n61fV7E6
9SWrDJmA4pIVJ+v67vmpKjm2SVbfJhvqa1296WVKt9sfi6YoV4HXvK1v9llN
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

-->

</rfc>

