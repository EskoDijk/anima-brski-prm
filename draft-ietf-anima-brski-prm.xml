<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.16 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
This specifically targets situations, in which the interaction model changes from a pledge-initiator-mode as used in BRSKI to a pledge-responder-mode as described here.
To support this functionality BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To support the establishment of a trust relation between a pledge and the domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, which are provided via the domain registrar to the pledge and originate from a Manufacturer’s Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping.
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar’s domain.
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be usable also for a pledge in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge’s IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
This additional wrapping signature requires some pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

<t>[RFC editor: please delete] /* Points should be addressed by the part above:
* include reasoning for not using TLS (IDevID does not contain SAN, TLS server flag) between the pledge and the registrar-agent.
* Enhancements to EST state machine necessary to process self-contained objects on the registrar-agent and domain-registrar
* accepting
*/</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely interrupted communication between an end entity and a PKI component.</t>
  <t hangText="synchronous communication:">
  Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of Solution">

<section anchor="sup-env" title="Supported Environment">

<t>The solution is intended to be applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by the registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support of in situation, in which the pledge acts as a server and only answers requests.</t>

<section anchor="building-automation" title="Building Automation">

<t>In building automation, a use case can be described by a detached building or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or even a mobile phone to transport the information.
A domain registrar may be part of the central building management system and already and already operating in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician’s laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure Isolation Policy">

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less Operational Security in the Target-Domain">

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirements Discussion and Mapping to Solution-Elements">

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support authenticated self-contained objects as container carrying the request and response messages to support the communication over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are data structures which may only protect the integrity of the contained data providing a proof-of-private-key-possession for locally generated key pairs.
An example is:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure for a certification request.
The structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.</t>
    </list>
Note that the integrity of the certification request is bound to the public key contained in the certification request by performing a signature operation with the corresponding private key.
In the considered application examples, this is not sufficient to provide data origin authentication and needs to be bound to the existing credential of the pledge (IDevID) additionally.
This binding supports the authorization decision for the certification request through the provisioning of a proof of identity.
The binding of data origin authentication to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.</t>
</list></t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection from the pledge to the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept on a minimum to ensure reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2" title="Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this approach relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM).
This allows independence of a potential protection provided by the used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of a registrar-agent component, supporting the interaction of the pledge with the domain registrar.
It may be an integrated functionality of a commissioning tool.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent also influences the sequences for the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes the same logical components as BRSKI with the registrar-agent component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication are the application of HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like Bluetooth or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers the pledge to create bootstrapping information such as voucher  request objects and enrollment request objects from one or multiple pledges at once and performs a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on an own LDevID of the registrar-agent, acting as registrar component.
This allows the registrar-agent to authenticate towards the registrar.
The registrar can utilize this authentication to distinguish communication with a pledge from a registrar-agent based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /* Note:RFC8366bis</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended.
To define an additional assertion RFC 8366 may be revised.
There is currently ongoing work for a RFC8366bis. */</t>

<section anchor="agent-proximity" title="Agent-Proximity">

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar’s LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.
Trust handover to the domain is established via the “pinned-domain-certificate” in the voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge.</t>

</section>
<section anchor="pledge_ep" title="Behavior of Pledge in Pledge-Responder-Mode">

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the “/.well-known/brski” URI tree.</t>

<t>The following endpoints are defined for the <spanx style="emph">pledge</spanx> in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to create voucher request.
It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to create enrollment request.
It returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided voucher to pledge.
It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll response (certificate) to pledge.
It returns the pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent" title="Behavior of Registrar-Agent">

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) certificate MUST include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge’s IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge’s IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Discovery of Registrar by Registrar-Agent">

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Discovery of Pledge by Registrar-Agent">

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local information (product-serial-number), which results in “product-serial-number.brski-pledge._tcp.local.”
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping Objects and Corresponding Exchanges">

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the “agent-provided-proximity-registrar-certificate” leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate to the pledge for inclusion into the pledge-voucher-request as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data.
The registrar may include the LDevID(RegAgt) certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the “agent-provided-proximity-registrar-certificate” leaf and may assert in the voucher “verified” or “logged” instead of “proximity”, as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert” leave of the registrar-voucher-request, the MASA can verify the LDevID(RegAgt) certificate and the signature of the registrar-agent in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert “agent-proximity” in the voucher. Otherwise, it may assert “verified” or “logged”.
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request Objects Acquisition by Registrar-Agent from Pledge">

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint “/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge to verify at least the signature of the agent-signed-data.
It may not verify the agent-sign-cert itself due to missing issuing CA information.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge’s IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint “/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll.
In the following the enrollment is described as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Verification of usage of ietf-ztp-types to convey the 
P10 in enrollment request. 
*/</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10 object.
In this case it MUST sign it additionally with its IDevID credential to achieve proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request SHALL contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledges is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request Handling - Registrar-Agent (Infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain registrar resembles the exchanges between the pledge and the domain registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own LDevID(RegAgt) EE credential of registrar domain.
It knows the address of the domain registrar through configuration or discovery by, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request   objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors / manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is REQUIRED on the registrar-agent side.
TLS 1.3 (or newer) SHOULD be available on the registrar, but TLS 1.2 MAY be used.
TLS 1.3 (or newer) SHOULD be available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using the LDevID(RegAgt) of the registrar-agent instead of the IDevID of the pledge.
This allows the registrar to distinguish between pledge-initiator-mode and pledge-responder-mode. In pledge-responder-mode the registrar has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as defined in <xref target="RFC8995"/>. Specifically, the registrar will receive JOSE objects from the pledge for voucher-request and enrollment-request (instead of the objects for voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar with an HTTP-over-TLS POST to the endpoint “/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>(see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type “application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data has been signed with the LDevID(RegAgt) credential indicated in the “kid” JOSE header parameter.
If the certificate is not contained in the agent-sign-cert component of the pledge-voucher-request, it must fetch the certificate from a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)  certificate.
If contained the registrar MUST verify that the connected credential used to sign the data was valid at signature creation time and that the corresponding registrar-agent was authorized to be involved in the bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404 error code to the registrar-agent.
If the pledge-voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the following parameter as part of the voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number contained in the IDevID certificate of  the pledge matches the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt) EE certificate if MASA verification of agent-proximity is required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA with an HTTP-over-TLS POST at the endpoint “/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar SHOULD include an “Accept” header field indicating the acceptable media type for the voucher-response.
The media type “application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following additional processing SHALL be done for components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify that this field contains the LDevID(Reg) certificate.
If so, it MUST be consistent with the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able to provide an assertion “agent-proximity”.
If so, the agent-signed-data MUST contain the product-serial-number of the pledge contained in the serial-number component of the prior-signed-voucher and also in serial-number component of  the registrar-voucher-request.
The LDevID(RegAgt) used to generate provide the signature is identified by the “kid” parameter of the JOSE header (agent-signed-data).
If the assertion “agent-proximity” is requested, the registrar-voucher-request MUST contain the corresponding LDevID(RegAgt) EE certificate in the agent-sign-cert, which can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.
If the agent-sign-cert is not provided, the MASA MAY provide a lower level assertion “logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP error code to the registrar.
The error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted Accept header fields or based on the MASA’s prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the “application/voucher-jws+json” as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the registrar.
After receiving the voucher the registrar may evaluate the voucher for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge’s enrollment-request to the registrar.
Deviating from BRSKI the enrollment-request is not a raw PKCS#10 request.
As the registrar-agent is involved in the exchange, the PKCS#10 is contained in the JOSE object. The signature is created using the pledge’s IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request to the registrar with an HTTP-over-TLS POST at the endpoint “/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is: <spanx style="verb">application/jose</spanx></t>

<t>If validation of the wrapping signature fails, the registrar SHOULD respond with the HTTP 404 error code.
If the voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) MAY be responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and results in additional processing at the domain registrar as EST server as following.
Note that the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content Type application/jose, it MUST verify the signature using the certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained in the pledge’s IDevID certificate contained in the JOSE header as being accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JOSE body as “P10” parameter of “ietf-sztp-csr:csr” for further processing of the enrollment request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:
Communication between domain CA and registrar is of content
type “application/pkcs7-mime”
Communication between registrar, registrar-agent and further to the pledge
should be of content type “application/jose” . */</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response Object Supply by Registrar-Agent to Pledge">

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is “application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of “/.well-known/brski/voucher_status”. The Content-Type header is kept as “application/jose” as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained “serial-number” in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond with an HTTP 200 but MAY simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the pledge’s enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of “/.well-known/brski/enrollstatus”.
The Content-Type header is kept as “application/jose” as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond with an HTTP 200 but MAY simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang" title="Voucher Request Artifact">

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram" title="Tree Diagram">

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
The enhanced fields are described in Section Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module" title="YANG Module">

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-26.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-10-26 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion Attack on Pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired Voucher and Enrollment responses by Registrar-Agent">

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID.
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of Registrar-Agent Credentials">

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the “yang-data” statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-10'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-10.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history" title="History of Changes [RFC Editor: please delete]">

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Housekeeping: Removed already addressed open issues.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
UMwBhFkx9TwqLga5o2saGcca2zuSytfcq45gmuiAI+oJQTNLV6Q5izwYjlk4
ozmqM9LUbcgiOhd+i7f1arVUcgSK6g91JNqvX7NLoqhNANUPJkh71Aqc3vT7
z261oqdNDSJ/E9FaNOuuD0W0bG6jauKx4qtqJar+mn7RBalnWUr+AhEKbiFo
CqPV0djnB8U3rwxu1j1FdFxzk6B8XRu7SG+NNNMgptXVygUWX9wNE24EjPHk
T+D/Z4ddLbbwElMaRdVNuvvvb2Ju4Wa9dd9Y5jBsuA7ihuuuaGcPrv//Cnge
3b9cwcNLFDy8LMEnlyK49z47Qk0jWU+63ECLOCla8vPgp/A+oI19nPx8j8nc
Hzqc936Jdg+b6SGp2g9KzX5QKnZP6nUAIAZSz0uRVO1VL7U/6srTXvfteH52
LJV6ZT72/VOn4+q9zbcKsBjw2tCfaD41noOfQP1AHPXOMZYvHU+y7iy50P1S
T2Kvu3c6iXq0ThL1b5hEuRsGqqtWMob0xGQi/3wCycq0V+v1qrcMI7ajElrA
gvJx7RqRJDzbHhGN8Zi0GttJ0XEcb2f8NNmkipC32N6N4pMm5RJN4Vj1mZ7Y
TcwD+P3p0b+8PT49OjR+hpZiB+qMedMbWwwPXh3hcAx2CZppX+3/q6v1eb8R
kUn1DBa2OdIVd6PV2smvwEbKqd91NBATO6tLea0aj70eml7OYawzZti80meA
oWishDw/6XeMeXfxdGB/Omkd1q4P5pfIQ/B2tF9rVVpMjbu0pfL5DiBpO9sZ
YpqcmYLps1bZYuMI4Gl0GXWn0KvqfjHhOCIVbwZnp1t0tyrBHbw6k8Aeinrd
6hzUmNg6TKJOQe6uJBPunZ3y6HcfofYwQswnB7w82xtJIOOaUKzx+mE+urp9
HLnuGwjk23PDQKB/Gww26yzDtNcbfMG653hRPBUpgF3AbUUPZcnGPklQG72B
Q0bedOE9HiCCGKKRjvJpf+q/u9G34417QVBHJyzatYXjVfUcHrEt3LSvoP0E
Hmt/j8IiO6zkquY9vur3KupMAk7qa6xkoFJpIvb41qVuRd3eP4xWuwBiiqpf
LTQrMNgiWHpeuP6VvQVqlfWrK4DWp6G0QgsT8QBR2KztCthfu9VrVcKoraoy
YkKFtnvrSFdQxC5bNnPpp95K/gjTnlyboxWIiC5NtG66eqSe59Z0LVmUNdqA
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
JIZGTSyejVKhK846Hvx/khEmB41bAQA=

-->

</rfc>

