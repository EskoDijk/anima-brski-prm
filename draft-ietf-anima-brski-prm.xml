<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to supply status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge).</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a plegde-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the plegde-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "vouchered" / 
      "enrolled" / 
      "error",
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occured during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enrolled",
  "status-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behaviour by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>TODO:
- DoS attack with faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section
).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y96VYbWbYg/F9PEU32WgmZSAaMnTY3a8AgbJwGY4nBdmZ1
3pAUoDCSQhURAuPhPsv3LN+T9Z7OGCeEsJ23srqbVZUGKeIM++yz56HZbDbK
tBwlW9GTTveX/eg6LYfR0SgZXCRROok6STHNJoMkjw6yQRIt00PNo87BSiPu
9fLkSt7DjxqDrD+JxzDUII/Py2aalOfNeJKO42YvLy7T5jQfN9ceNOI8ibei
l9Mkj8s0mxRRPBlEB/EkvkjGyaRsXF9sRduH+wfb0dnTxiAuYcCNtY2NRlHC
g7/Ho2wCn5T5LGmk05x+K8qNtbXHaxuNflxuRUU5aEzTrUYUlVl/K/r+Jim+
hz/62Xga90vzQXEzzpPzwvogy0v3E5hgkpXpeZoM4MNJRk+VeWqGiWflMMu3
Gk2AFrzYbUV7eZoU8ByDolsm5+fJRH+a5bC7boo7LaLtp/CJgqN8yDMkCczw
siyz5rN4OGl20slF9BA3kZY3W9HBbJL2h7SnAczx/aP1n+4/5j3OJmUOTzxN
8nE8uYGPknGcjhAotI7WOa7j7wXP1QKYwCOzPN2KhmU5Lbbu3bu+vm5ZX99T
OztuRWdJPklyvbXjYTaOC/Ppv2prJa2jeU3r+JKttVvRiyQ2G2uP0qxUH9Gu
dtKin0XdG4Di2N5GB9ZapvBXXBRJ9JPexVk8GqVFMholE72VnWfNR/fXNu2t
dOG2fUjyEeA1fDwdEmYv/bi5Hm1uRo9+ehQ9BrxeMjsdwZL+3se10PZk+Qct
WkecD4psojdxgB8lo2jH+5ZPCWZMRgDGqJudl9dwI6OzLL8szFTjfv4jXuC/
F+rRVj+2AargaX19r9HPYGNpb1bildDgLC6zaDd9d2lGT+Cj1gA++jtAGl4q
ZiO43P2b1mTUuEomM3gLHr7Is9mUfiMqEvG7H+mPv+PiWrCZz/ggEK1Zb4sf
a15f3POoTmOSAc6U6VWCq+rs7Ww8fvRQfn2w8WhNfn3408MN8+t9+fWntfvq
gZ8erD+QXx+tbapPH91/qAZ79HBdf/rTYzXYo8eP6bX95m7LIorvrovmVTbr
D5Pc+XaSIEjOm8WHctrsF3ng1fy8j7P20mKrkU7Ovd093NhcVyveeKBXsW5+
vW8Wv7n2k/z6eF0v/vHG/UeBaRmgMc2z3263m4/WNlrr2x38G6gt8xH8IpIv
om7SnwFy7SZXaT+J9gdA35Ga5vSCop34e5MRc39SwDCzMomyc7iHSR+JbTwi
FsF/ZkAfiqg9uUgnSZIX9LJiEuuPmmsP6ZMiQTqHoOHheb1IT2RhSFI052rG
PbzDQNXtjXy/LZ+aB6OjPAOmko2il1dJfpUm199bC9ie5umIeRV+yMei5j86
fGooUR5ftxhpZ7BSvDUAGKJJdSh8D5B/cm8Ke79Hn/0On/2eySJa08kFTLOz
/WTP2cHOdvQkz65himgvy2fjwLIcAtmPe+f4HN6re0grJtO4HMqQcX6BJG9J
PYy3Mc77Q8C7lrqM9/CDe+Pi4l4Rxxf3xuv541m2+f7Nh8nL/vmjB+2by7XO
cFY+ePzo3pK90KU+kCL4XzZp4oxRXJZx/xKWPcizKXD4+Pw87f+NX2E8aR/v
NRrNZjNSR9doHA/TIgIZZIZSRDRIzgFDiiiZDIGykGRRgEAQ9bKsxDemU2Q8
cZQn4wzQrWBEvUxugKieAz0HsaJf4kcs86xGHz/KVf78eQUHOo/76Sgt4eS9
MUFsGmR4XEV0nsQwBn44yWDhsL/RDex5nMA/o3SclskAuMFkAoidXgHniHpJ
eZ2AuBBHU5bBEPHLYSIjwmoviN3krcZ+GRXTpA/XCS4IDksHVEQF3B8WrFZx
KddDoP40RApYhpCCr6IxsKRRBGxhcgEwOs+zsZ6ymU7SMo2BhDfxqdUIeDxg
6QAHE1DA7vXTuZIQ6Wl8eJAUfWAC/EZpH0qrcZxFxWw6BUELgFYOV62rBcvL
s8GsD+uJo0lybfbaBMkQThQFOOCQk3JVNmVOoKANwgNjFB9o9xqUFiD1iNGA
TwXfcg9vOoyLpNWA60JfJiB09oCVDwmngCbFLG/CUKPaafyzsncJ7wFhAkTg
4d/zEdDIQA2RPMLyAXQgPJw3kTDASPBn1nsHOFJEy0V6MUGcSprXuGTz1QoA
F/GE0H4QwXd5FgOQAPzxxSQDstrHFYEcoDY+KwF6H+DZZJJnoxHtcCr0bRUG
mo6yG/i2dxNEQEQCA/CEFQd8cJcf3NluNfiGjtPBYJQ0Gt8BdecjRsA1WN8g
fOElw0vWHVPITehQZKMZQRvIk7qqIDhlzRL5Z7QMsINZAW4r3nECXAfEewB0
fELFCk4UR8t9OMZsnOQreGPU/lpMRdJJfzQbCFoNUOACSnuDowFzvgZJKUpG
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
ut9Wap9Dh/qjTJx41STTuVtUaopNyQt3EkpuPB4a96dH+N2Ojz0HXnbIiAaB
TTXp+wcbj9bI6Cd1fQUsL1kh7fIpwMCmLOa24thHLBz4FX7vC0qY0F8OaZlK
OHExG9uKfQhzONFWFxFQe9XcqlqWeF83aGhS1QJ6LCjaq9M7ziJVeNB8rIvs
aiWUa9M6olKlTZuuYEv7n05jADiIAmjwKYCe0GNW7pHaBec4qUVUFujWGLbZ
LNe/qjSHu60Mse0dD+gA+LGVfudLlQ2/tuqPUc2PU4S08UnhSW2NQKfmasMp
dlrz/LaptLrQ81Z91Tuvf+7QUfSrDVWrKuqt71lXWJVCu/UlsyVddo8LPAq1
VGuxNlBba69uTFNOU8emAe+YFXZhzajJiL342PB/VVHZGdXeh9qFz6CiL9rH
z9aIjilMKNzXwUZ8AT5ovhI2zqjVbexssxa9rK7pyp1BM6eI4n0jMgiIyLnE
O6T4WLucouV/8ih4fSe8kKDgWABsMom8lyvjAXH0WiySkUfzl8Wqg1WkCFcB
vrtlSwz+Ki6gZhULlcJaIOvH71VuUsor2dYcFb1tIlvS8+gixV5MxK1M6Cg3
miE5ipKBRRWyKRq8URNIc27XXHdjZPbPTU6KE9elbd+OdcFJSrIn116AtJyT
hvSwtV4thNfY5joHIzQbqjGRsfcS4wSgZotOkQ+cVT1lGorHkVWTvdB5tKqb
nDQz3y8dt6KTUGU8Cb6liaEykaZW2fzqgbgYbmg0TuJJoRuqWoakbDYa2IHH
xgxoFONAgaKJsvlyJZfAwZKkWXFehKxF1YQygwROalmllkaWo6GzAfRsvcV1
mFAw8WL97oIJlqF3dIOW741WtC9ms3DkgbFeoRREtv37sBaGYiia64uXw8VO
SwrWcx3ijmVD11NUV7vSacypZwTr3bRgVz+yH8G4aIidk2hV6Uqv4iCtgpAi
62IexsJ9v1c8SJkiC1eqOpddc13bIbWTlteI5cv6sxEWzWChWtU+0DX3dHe1
MpkWqgJv3ANpHlge/IdqyxlPr7uqCs4nto+WcUiVOeKsHBUeKgqMg3hKRbPM
Vlwk9a6XsWkZuM0Kbdctbt+9GQQU1esv6/dnOaD1THdMdq9taTI4/bz+PIkL
1HHsdLeg4KcDor0yDO5682SqKoHEShQpEyS7ZX6ju/rV5cb85Ec9i+dLZjAl
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
4qlVhYAy3Lt2KYIllZH0F/cHQ9HbW9H3v32PpkurCeQU94VhOACUyHvpLw2v
pAH5hpeSm+fTt6874xev314Nzg6zt6/3y/749P3g7PTDYGf9uj9eezgYP15/
szEc9dP9h/D8sH//cNSfdKa9jc3fGunL9Pnw7cbpjJ9+vBmfrU8Hzy7TFzvP
P7x9/Xz65uy67E1Oyzfj05v9d1l6sNu+Ofjwav3wXX/zZXe/2B8/+K1x1Rsf
jvDbw7PHO737J1cnk8E/D3fKy+OT7P6rUTs/PZuuvf2w9ng/vU7f3H8+evO6
M3q7s37VgzXtv9u/Pni3/1ujPNjtlwfHz08Odl89PNy9eHh4/GYG//9wluI8
e5O3Zw/WXrx+ctO7/3b69unpJf8+nPbORmtJd/3m7dngt8a0f79z8wbg8Gbj
9GawA+Nfrj/vnuyvxZeHu69OR9O3a3v3uyfPn7xdGz17dTp8e/jhefpmND18
dfb42au1w/ed9cPfGoeHu6OdVyfru8cnndOkffrw1enznbdrD85eXe5dHZ8c
5gfHp53e6O3DN6f99d7Tgw/Hr4ft0/bewavx4OXp5fMnb9bWf2vsdC4fXL9t
D2CEzsNXJw/UCIfHJ8+Lk/H7dwfrz9snp50nb0/e3j94NjrstE8fwIzvBmsP
/tk57hyetqe/NYadSf86uVxvd17DE08P7x+Pp3uH7fWT7njvsLPb2ey8nj45
uXw+OQaYwi4OX20U7w9P92ank+nw9MNp8eYD7gjWcPLq5L1awztYw9PjyZPL
zvrpZmet8+R0TUY4WYdRn3QH4+evO5Mnaa89Lc7ePS+Scee3xn53PHwXXz6P
4e3DztrzB/2TwfHx8asHr84Ge521w1399+vBXrfdvu6e7O28GsN6Lour+Lj/
oLf+/LdG3v1w+hYw6tXbD8PTk/X9zRf3Tz8cnHVenZ6N4m57fa23UR6/fbb3
AlY/7o0GH16NX+X90+cHh+uD7tvx29HpRvlb4wHgbdpbm467Z++Lwevn7+Lj
/fXBxoMsPnl89mpt8M+3r6c7hyfrOwftwZOD09PL7mivc7q2vnNyMth9df8Q
Tn/vt8Zp5/L5fdjNztuNwQ2c3h783Xmz1tnvtPeO+DSHnZdtwJd3wz08u1dr
+2uwu2PApfbpaP8aIP9bY6/zevDqsD26fLOxftYb7705fvfkXe/k7YPjvWEX
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
zgpWObo6J1inBL9Mv6oyUJf3O34vffjNKx7P04/xKllOKYF/2gP79mHsmItk
53tp6oLSVQ6S7imgzHD9OHXqRiVmvyyX6dmVNJQ7jukeuPFymatdpXeLq/9S
K/j/XVdDoSedvn9MWb5eTPoJffy5fnIWrz8k1f60ulDc60PLx7NhC7UBR334
dHnu609f/fRD1b4ffq6+qLZSbestpV+Wq228qndBN8fNPn0/F3t69Jt+MOrH
KUd72ZCzN/zJ7OxlMTvaG6dy+JRQrtdV19T55kLD+j5WjMkP37uz7H837fvP
pnzh403S919I+f7+oUn6Fnk0isqop5fjlqejDfTU3lCJ0JuuEFE35doh8H/r
BL1NEAcR4qv3iIjMk97vH9Yvw0W2HB8UoX9OjM4s8ikRLF5AHvUH3WnFs+Eq
MvV7T3PYvS6eUnt880hvXnT3sbzZP4zQoyahZCQtMYttgd86xXgkinFrSO0p
JrxsSQFpZEB0XKZC7LFViAQ4bHlCi7ZuUdqReTN1R92I65kfzx0pZ4ySTqNI
6j6layK7nArT3Mt8vAWXkXEL5LWVPYVgvmKFJ1DiKmMaZLKtt/EEyKM0ivN8
GwreGVveJrYtL7GWO5kLb2IP98GCPQrLWUKg2ymiXGnFfScTo8zkRgffSq1x
Px2J+fAQmel9KqJnXqjEl871dJvOLeFy4Ut7N4jkzppYbDO28ZQBSCmv005c
zBxKfD2GuViPIb4g18CCdqaU5UDM2VosROyb0SMPPH9cRLZYRJ4LDhEdeJHd
Cz08gC+MkjmYiY4noNWJVXrgMgehR0tuOPbYZJ60yjIUNAreaGyWuXtr7bjK
IgaF04f8gGJyHkDrKHXGZX7jM8PdC3vnyzlxKjGS/W6IJ6wneILL02mCn4OC
9QJB3MqfCYxkJwsxVxAym9TUR4wvdepFYnh9v8imiK5rMSohgdN1ZG9maiZk
Zy2L1EpuEWNGwixHkUh9SFq0ocwmefQgAkv6iPps4fBYd3wx19upDo6XpxiH
juTG5j7ken9iFkKAP5cvwljrXgFOZ5VT33QeYe0zsFubjVJE3SwIBFfMkZPI
4pEMoODwGekXKaXURsH89w87W+jeKqAEvhWh26nGDLbmRcSTHPOSRzHXi83E
tgaJvRtJ9CoWd1s3iCSbZy/4XMzQFmflCmcqdGeIVmu+bq0hLj0YWxCOSunq
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
gxCv6ebalIoYNa1bo3mGetWPbZriu3q6tcsCAOrY/aq+ypSOh1cVASbpeWm8
5irc02Pav1bcv7rt+1QM89Ut4/Uz13Rx9nkFjfra6d7n0xNb+i9X4yKuLw9X
p9mre7Ynx3ozdC831ZVAb8fFFA37W1UGqy5iX1Xm+Wk1+fnU9LMWG2+ef5Iq
VL3ndY2Oes5PZaqq4gqqXIUq1tWcuN9XxUKqwh7PgIAruM8roXQ60a9q5Wyn
+AM+WL2XKjm9Lh+1mrws88mbe+LpovlTl1pvunRR+Y0ci67U3WST48XydCv+
2VXJl5W66gof6kN0ZwJdT6zuTVjvF+NstVyQYfxytZ9sPr0DUq3XINVWIHVX
38rLqlt5YXOnm3sLKgxHJUNqizWMjz9ewxCqOx7oxl26fwFTMSmrIVtsJl9X
dOc11Z2awp2rvqsLntXtzlUtBboQ+1ldd9yUFXpVp7caA6Uab2465zXqqBoH
PYcU8EbVt/qcVjhTFnF96bu6cPgMKX9oEOSHs7v0z673PgKGfn18Xj1xteuo
yXvvHnp4XUF14ugyB7yVyungH3X1/pTuTJ5QFYzT8389Pj8+3Z1dPX1BwUYV
CGvG4ljagoKQqiRWP+W3y9E93tF9iXbr5/LjZPFCKNd8sYol8yXdxwHGoC7c
2O2r+8YBiVX0rW/Nji+GlcLpZrI7DZWhHbtyVhf7dIX9x97nqlzlEb3Lgi6Z
rmGAahgUdbWJqlgs/RC/LmR58u8Gq2rv+Q6ut/7xj/+oCixUXaAQcizbcQLq
Y7t++taDjHok3okRP78tbKLKa1Rlb7/Xj9MA6hjAI5ofiz4nCd0PUkeiYxWA
+hp61QiqKbopTlHOMC4Zwm5zpeqMNQUJLm7Dbr7TUtUslI3vr/DJsoK1ZlqO
c9tE7At3WJ+u86/v8q7KUKKb7+CO8Rp3Wgp3eFnVBjkShGN1rh/o6dftugD6
S1w8T/7zP39QI77rjK+W46oo3XiyPhENVZ2PHuEL+woQVAKhKBDV9eVUKT9q
qRqqxmFq+2vmv6NuxynizYbupJnie6txtj/ncbUZVV2l8Zovj9X3lBPhAx/X
y0JRBb8euolinXQ5enXTef31bw0hlbF/O4j660E0KvCuHbtzxjVOFesuSpQ0
qKKQ9aym0rcdqbH/09/jr5u/l6vdP/6hKkBO3tCL+XOxmRJjP+n2qqL5u1Um
3rjthyp6Nj25JJtq/r+fmlQfaezpwwULXa2Wq6tXJS0bKPlS1/ZRlRipAtFZ
YZ1v1JEnkKfs61tG/Z0e6ujhGQDD5xa1P2I64spFz3HxOJo9n50X4rooh4zR
rQz5bbW5uK7GSUGXruaPV18nG+prXQ/lZUoX+x9L/ihXgde8LQH7SU12A1FH
4LwsnqfYH6FuMjkViz+r13AqWX9RlObTh/cwQ3tt7vorc2+YSdVBzPK6NkFV
L/RoDPHiG/7wqsBL05fTNNe3Vl2wQ3RNVSapr5s6Y+Xvlf19LlXdxtc+8jh4
fPP69YWe+BMu+Y7zfKIB6jag0kR8kLX4UkRtVamRairfDWKThXICKoOh4kfd
2CaivWPzrwrEXv2kivAsNlTKviq0XVXc6vk/6prq3lTp+upRP6uW307G06bO
RN343+i75JTHsPqt2awm76Jyec0aKqX5pjrzp6ZW7HsFxlW1HVUKsinJTJ/8
vntQabpTRejkeVqk1QsI5i8EEJ6peFZtEM8bohUXjnpq06erbwzNr83QNFZ2
iRXfgoRfCBMuivd9u1evfbsuZH7RlQs/Rkt7qjDxObL92DkDt9euoMrbHDal
KoFDtX1J5FBhqaZGFQICrVlRWbnl8stH/Gdcp2TOfeTH1zCrigGjOf0lgCiH
uMHL//2Iu3FBdVD3Zzr71N51RUGO5bYq9KlqtlLJoDdMa1pXlruoHUveXzeu
Dh+VbYE+qvo89BhrusMzfrgoCfXDqV4S+Ytgf6OL/j4cydj3roM7XR+3gpqn
cmuvaDn98cPVGVK984B34KYyQXWFXUWn3/8YRdH1cwLWX1VioQjwy0nz4sUg
ofUovFPUuqrMW/v561v86jjeIHxBJUKrbzaj/FOjqQtMdhUqjykDPHerykmi
Dc/lp2YtlJZP6feqbtU7NTMVGWhSfj9f/dSEHg1wpYzrM0xnRW+vCzgValqq
LEQTRjBWVHymdX2dUMW5KuGYVnWSqhadmd6n40vaP1+Ql43CY8VtahBfV7Nw
lppSf04mm40KXnEaJxAWm/2nD5eE6rj2Wxf/q0tYZ5NxVabn9UDUQEJ076Lw
3B/EKMArMYFj2bE6rYvHnH0Yvzxaz7FM22XDKLFASEUvL0Cni08XadVXFv7X
u4cGXaDhmyp+f66feMzrrv4T/SRrWLzim0fnrHtPhleltNPLxhIUq2wsQuRq
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
/wssYUNd6UgCAA==

-->

</rfc>

