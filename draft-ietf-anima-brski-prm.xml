<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.14 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-04" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and the site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates during bootstrapping is necessary as no trusted timestamp is available, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The RVR <bcp14>SHOULD</bcp14> set the Accept header indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can be verified to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request 
        defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
                  min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
                         It is defined as list to enable inclusion of further
                         certificates along the certificate chain if different 
                         issuing CAs have been used for the registrar-agent 
                         and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID, may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2961ojR5Yo+l9PkRv/MNhIBdTFNu3paUxhm+66MIDbPduf
j3ciJZBdklKTmYKiq2qe5TzLebKzrhErIiOFKLt7Lnv4ul0gZcZlxYp1vwyH
w0FbttNiP/vm9OxPx9lt2V5nJ9NiclVk5Tw7LZpFNZ8UdfaymhTZJj00PDl9
uTXILy7q4kbew48Gk2o8z2cw1KTOL9thWbSXw3xezvLhRd28KYeLejbceTLI
6yLfz14vijpvy2reZPl8kr3M5/lVMSvm7eD2aj87eHX88iD78bvBJG9hwL2d
vb1B08KDv+TTag6ftPWyGJSLmn5r2r2dna929gbjvN3PmnYyWJT7gyxrq/F+
9uld0XwKf4yr2SIft/6D5m5WF5eN+aCq2/ATmGBeteVlWUzgw3lFT7V16YfJ
l+11Ve8PhgAtePFslH1bl0UDzzEoztri8rKYu0+rGnZ3VuJOm+zgO/hE4Sgf
8gxFATO8bttq+H1+PR+elvOr7Bluomzv9rOXy3k5vqY9TWCOT7/c/eLxV7zH
5byt4YnvinqWz+/go2KWl1MECq1jdInr+EPDc40AJvDIsi73s+u2XTT7jx7d
3t6OzNePdGfno+zHop4Xtdva+XU1yxv/6X/U1lpax/CW1vExWzsaZS+K3G/s
aFpWrX5Euzosm3GVnd0BFGd2G6ew1raEv/KmKbIv3C5+zKfTsimm02LutnL4
/fDLx4D+ZitncNv+VtRTwGv4eHFNmL3x+ZPd7MmT7Msvvsy+Arze8DudwpL+
MMa10PZk+S9HtI68njTV3G3iJX5UTLPD6Fs+JZixmAIYs7Pqsr2FG5n9WNVv
Gj/VbFx/jhf4D40+OhrnFqAKT/P1o8G8grNpy5sCb9/pt4d7X335TH59uvfl
jvz67Itne/7Xx/LrFzuP9YEvnu4+lV+/3Hmin375+JkO9uVXX9EDx8PnI0Nm
/nrbDG+q5fi6qINv50U7ruaXw+Zv7WI4burEq/XlGMe/KJv9QTm/jPbxbO/J
rq5t76ku/std/+tjv8wnO1/Ir1/t7uqnX+09/jIxLRPGnOY5Pjo6Gn65szfa
PTjFv4F+MWXGLzL5Ijsrxks4rufFTTkusuMJUEykTzW9oNQIfx/yUR/PGxhm
2RZZdQmYXYyRfOVTIrr8ZwU3rsmO5lflvCjqhl5Wsrv75XDnGX3SFEg5EDQ8
PK8Xb6gsDC+p4wXD/AJvBdBJu5FPD+RT/2B2UldApqtp9vqmqG/K4vZTs4CD
RV1Omfrjh3wsOv/Jq+/83a7z29EV8K7lxRJWCqfdAmDoljOgb68eRazoESD6
/NEC9v6IPvsFPvulkkWMFvMrmObw4Jtvgx0cHmTf1NUtTJF9W9XLWWJZAckZ
5xeX+NwIzuLRYDAcDjOFzGBwfl02GTDNJbK9bFJcwgE0WTG/zudjYoUNcLDs
oqpafGOxQEqZZ3Uxq+A0G8aDN8UdUIFLIEDAB8ctfsRMejt7905uyocPWzjQ
ZT4up2ULgI3GBD4/qRAaTXZZ5DAGfjivAH+yaj69g73PCvhnWs7KtpgA+ZrP
AW/KGyB12UXR3hbA3/JswUID4lV7XciIsNoroo/1aHDcZs2iGAO2Av7hsHl9
VcAeG0BPlgS2cSm310CuaIgSDhEhBV9lM6Ch0wzo2PwKYHRZVzM35bCcl22Z
t1U9xKe2M2BKgAQTHExAAbt3T9cq0tDT+PCkaMZ1ecFvtPZQRoPzKmuWiwVI
BgC09nrbYC4sr64myzGsJ8/mxa3f6xBEGThRlDiApM/bbdmUP4GGNggPzJDf
0e4dKA0g3YjZhE8F3woPb3GdN8VoANhIXxYgJV0A77kmnIIrn7OABENNe6eJ
z8ruEt6Dew+IwMO/5SOgkYHYIPWB5QPogNtdDvHewUjwZ3XxV8CRJttsyqs5
4lQxvMUl+6+2ALiIJ4T2kwy+q6scgATgz6/mFVCtMa4IGJdufNkC9P4Gzxbz
uppOaYcLIR/bMNBiWt3Btxd3SQREJPAAL1jSxQef84OHB6MB39BZOZlMi8Hg
EyCefMQIuAELyIQvvGR4ydwxRW5Ch6aaLgnacPv1qgKnr4YtsqdsE2AHswLc
tqLjBLhOiLQD6PiEmi2cKM82x3CM1ayot/DG6P5GTEXK+Xi6nAhaTVBCAEJ2
h6MB77sF1p4VUyEpJZ+kjkaDPRJg6eW1x0yrx6vu2CJsCwhA0TQ5TAFQdTgn
qHYPTRhl2WBwlho1v6iWbe/qtiPy0beJcVG39FQLtABgo5uZCAIhmEVKcGia
OlUQBz58ICQF2U5egCfhJBGnPSJvIxLelBP45KbMe3EPPzfwqOoSGC4iohAz
0ICWQCDwqtSfggBNrJzQ/Qymw0XLRwC0zZcHZwdwgRQnJxOgag0cfzMu5nld
Vk1ISXVe2eoYrjTcnUuhGRGHgcWVjRBgIayIB90nNwNaCbu9RADJVt19hvmS
dBqWfzyHKSZL1KhAIinmNyUII8L4/KpnObKZ6/yGiHWOkgggtyDVEhcAGwc1
TZdbJJbqLnuCLQnNN6BrGW0A25Cytdd5a9dzW06nsCBA9vLqqqjxiSoDgo/6
bAEj/9sSLoTDLOTgdjXKZXqQ96EwDbnZljKCErASpHtAjBJvFkDXMaOMyIWw
rgniBJ16Q89fWbzoYPFmxOFQrLhFzcKARwgSHxqc1uVyPuYlIOISQ0IqXDYN
fEgUr0aJ4rK8WrI9AMYEaRA+hWOQUYoboCbjajitmNe40/THiDTlGB+aozLW
IsT4bgSPCWOO+TCflad6bnxzX+WON4/qAg4eVtSgjJqbc35EFzmNZMqerUjT
i5PJNRPWgVgDq4TPEXC8P8uBivlkUcEUzWhAvBXmmrkPnUzEkgcs5G3L99oi
HF4EkPOmTLMAu6pljcwIGWR1cMLToQ4E0yFY8mlT4Zffn5/Ll6j0AN3Mjmkw
vJc0MYymchagAPO4EWgdsmKiq/kYuUp5MS2Iko5uQYMevplXt/Psh9Nj3dVV
Behc0qUQWVmP2stqwjozAquasPCGKL9sHNFEgWEw+MzdCZU24gOAG4JCnr9H
oUjdL89FiBSMDQzq0j5QJpYM0oK7o0z7kPJ/lsHWJ1NdrePSyEYXi6kuYprf
FSrGI7xyBK59AG9kfVHiYuCROp83BMBZAb+t2kJXZgS5601RLPrg5zDPwmiR
t9cjUJyO3uYzmMDRjUDHQFw4PskucjwskWdAPLotkfbCxcJf4F0QlC5AfCCM
7Lz/zXRZAGGBGwcvvPr2cK3T4ZUTbfkMxp1Wt7S5SiXRbAwrQBEY5gSp6xJo
NZEXpQM8LjDzY1DXj5+HslKenb84cwslutcDWObjeJmc1IViDoADT2/ZqF4Y
rhrXTDKNHoilPZtEuxzBIyXAULOthAwX4SDf/u4t6VX/vIripXcj7fIV9trG
0dm5EJudx0BPmBoxa6XV4rDlBdo1knxURUUZ3wqFQEdwcMTHZT03U+bZBYgj
IoUTrrqXEGY6PSqT82yJ93N6h09H52gxCycSaUshgx8xCEeDg/G4Ev3G8qsO
Q1DBzb+rYhphuz8bfYXFaS8vnh5sEVsv28YrDh6Pw3V5PqJqH78yNDiZuuFG
gg6ZCvEuNPt42dMKDl1cOe9jgLpdM9LtNQkHjqpYaW/hHBkRF8gG38Nd3aaj
o6d558OmRAOCQZYhUx2j6yJkhbFNgPCMWyCtQlCBtpL1wUxNlHdRoXCO8jkg
jtCCQEvhG+4EWVGjUdZdsmiST+HuzskkSfbdbPPs4NWWk9R6lTkakoAWjov7
lsO+nOZXAA9li8DbAFh5I7or3A7CcfjzurxClYk5iuM3QPWZAjlFP4sUfbdK
R27Wob2Z0N7BAYiQdYszy7JEOQmY2NyQX8fEQAbGqRm4uGNkLggHFEFuchBy
6MCm5Zuiwx9QL2jaIp94EosjwDUVQVC1es8y1+co1r5CaI1QJgoUiOy3qr14
0AphMiRUqZJYPUQIR+tkl4QG8EWEBo5STEiSmlR25kVdDGGfJI3B/DA2YEp5
eceshGREWZHlThWaY0BZZmYPsyNnH6Ad5RwE0XJeTaurO5bh0GwJbBzm3nj5
w9n5xjb/m716Tb+fHv3LD8enR8/x97PvD168cL8M5Imz71//8OK5/82/efj6
5cujV8/5Zfg0Cz4abLw8+NeNbTqZjdcn58evXx282OiSLBRHWXUjtgn7QsUj
bwaBsfCbw5P/7//dfQJQ/l/o7djd/QrAzH98ufvFE/gDqRPPRpSA/wTQ3w3w
jsAx4HUEDBjnC5Ajpw3Rj+YaRV5A+QK5+E8ImZ/3s68vxovdJ7+XD3DDwYcK
s+BDgln3k87LDMTER4lpHDSDzyNIh+s9+Nfgb4W7+TC2hodmx9bjT4/1bRvv
I9GC3dEeM5DLykls8DprGM7a6HB9erc/GKxhytwf7GfP5eyJjvPHBv/H9d2i
ra7g0l6LieqiWs4nKtcBU81wDmTHR0dblgFkm12mgHToxfOjP4efbuGVws2p
pIIiQNMAzCaCrs4W1V7X1fIK5cxJeYW41SUjaG2Cz0X9ZSrHMnot/JIszHV5
gwvCOysvHh3ZRZGAfHiAEDoMJCYngKAdrgEyFYlhg8PAEoCKPw5yjgaAtnIC
K3NoFRQNCQ7tBiTADgZHRzjGkYP2YDADyo2fvVzSdsPDPnf0+wUxNjVMwuqq
+RD5aXTyRgMk225N8iX8Glo6HINZZe7BSS4vf8UsSHPXnAnxxhpmxgWaSqZs
TIaB4ZNptZzoXOQ0YdwmypXDLYIVkZpohF3EP89KHbdlPTY3XDmfwA0W2fTG
W68zwJ2To1PcPUedDD1vGypvK+nCWb2BMVbssAHrY3OdvClGAnxP1kPTDgYn
r09oyroCjIb/iYRGqhHZqAzSb+Hjx8Hj5URuMnz1Z7t4MRMHK3fG5tA0uObq
8UrntbhydPmndNlOk8I+Gf6qhXDyhmIWQqsFH1GOzswJKM5XZAezpGfmgnEc
ugFTWrLhUSb6G08LGxu/wat8yod46iSdnnOMoUB+qcJRScAFwEBPNWGNAiAv
ucBkf44mS8I9mkkouhI5OLisEYjg32hSZ2nlbFwtiEaeiRcHPoRP2bQESz2y
hmpk7T+AJn6I6rgzY7z7pFkuAAQ3H8RGzx7DxmgKjJpmpFtk+M5yhfeUbN7+
CpERvKzq/bTxl65f5/V5JWrKGqaGUXZUkqR9C2/rSMg2vS2cEJLxw6FugwpJ
oL0hN8zn9GjV0kWih3VI56or5yEIkJzdFW6pHi0qjRZDS3ZK2RGz0HZWjK5G
cAVoDPaJ04bLGSp9BzDBNSm4blJBQG9jB0Iwu5gSq4NzAgkA9Qi5Mng+dQH3
kdeeT27I/KiCYgNcdooSA5KaJBWGJZD2UhcsMfefjVGEIvqONuDYVeL8jeqE
nLC9yuqitEVkp6xZsvYHdxTfJpFUz8w7NlB9Ch0pDN6Lu44ZH5n3KDtQQ84l
CHKNF+C8Ip6r3o4zb6vPJu3b3kw7jqz6pFETDlu9O0O3uJl2lWRGxPHGJdZW
kTbgxUZq5FyEcwp9AFlroYZTPqdmOXXuHhKFQuGzcKZNuQrOSA0j+I0kjNdd
kxsQiQKtIH6/JBolIzNiPAIa/eN1OS0SwNOJLw0B6dhMtgVvRYCQ5/RqIOoI
bmGcBL3RuOOtaglnkAHhHhwrLqMdszGLEiQE7Log8Zt2eJ/vHSbgEQ6O4POe
ICu2ItK9oK3OqjrGuMtp8ba8QJv+3YiYARD+b5bldCL+14o91eRrutDPc/c5
Skl3C4qvWsrW2F+j1B09H20OrGriX99k4YtpzVamTll418dwuIfRMflvy5Ls
K2K4mjdVjXojCvMAaYepLfLfAr9Cszg9TJKcYgtMNK8SlEcFQzenEQdYnBAS
n0Q7RA/asoasCFnMHR0mYRNNUvKAo+1MpQfPfahL8K5ItwqYbbnhKBe3xfh6
Xo7LHC2B0yk75Ci4hL52xmAbbOCs9A7SGiph3X34xGx9yCj/UaP8NAeVcMHi
9ay6wOsna8IhnerBe3VrGw0OujZgvXciDK63HvHR1UU+obctHxV4BjAWELAC
vcbweFnJkKQqmZ0AlgqSQYsObDUBRmb5Jj5UwayeURAEKMnWJUZk5NNlwcje
FC1SyoaIeFl7N2cwzrU4TNhdRrfmkbs0gE2zirFuRsqRl4ZJdXXCDg9ZkXvU
apJZfoURdHA2JGE4gVtXSIjaaDhJzwbJ6mTA6eSfHnAZB6SXxjp34tNG8HAk
FO04DBg8BumBj/+kAuH0TmwxPvYgn98xLQuCSvS6ROGHJNcAIqMBpKSRUZDQ
y3aMOj28yRwa0L0talbAcOZtuCQAQrTIwtsudgrpCht/G4rXYFWElrTtqBA7
jznUr+/yEO1n9BgDrC+XuEhHKidoeEP+W9RlNWkIV4AisRVZ2Di7G4Ag5y1q
xpfkE9bTYQsTy7ZMdeEcr4Gf0PoUNXDMRo/iBa75tcEGExhFADunKMnhc9H8
rGck5eSBkZCMKAENlTWOvjCoHahLYxiFWNcJsFqvMIoNG6CF7FJuWKPeAIvI
7qxAiZ1374GPviKyw7fKGoSy0eDwgG858QeZS6dqIsgEYCBrNTAUgGx2RFTG
BYkdHjzSmN137zCiF+QACsrFqDlEK4kCMahG84bhchFBILnfT8qi0/ICkBhn
xTC4aHN087345INew0uVVG6cY6hCVRCkfzLseXBXcgwoX5wePAKdOTw0NtkL
XUD3CTIeGElilxCbx29I6UbrA02CCKEOn+KmmCLupM6a8Th7gZeQ98M4OivQ
11M2sxXRteQtgN8YU1nLKTVMyNpEegI3E356Z+ISNw/adUpRnVghZJtuV/Gm
2GNkruV4OUUP5wIoBRAODmikl1EIn+AsTnYNQpfFTgUDlIs8CBwjeI+LEmV4
jR6j4Qv00N3OmerJpllVla2IP4WtGSA5/+2mWuKnFexpth9FjiznXlVEfET0
Q/Tp0LMet5QJ/kGnJR+O6vxrDj4Sj8+pvUPPywbwmqxrnOvFwjYMrBaW4ZGG
p777BK7fEPgGWk7I91qpnNIiBCYSNx7o8AGOvXuntpcPbqfWWegUst632kCB
C8gBk/gajnJiVbZOEG+vGtUXzXO+ZjRR3uvUDiPGt60/LzQaUyRJgaAs2NxT
hQQVVObyMvrEOQpDo3zvWtQ1TvoMa+OYvjek9D3PFUDJEru0YTgS7ODiEat4
MSQ7k40iIhO9UZiIsWqGzec2gnyUndsA38jQHI/DAlo+j50tKnsBpWITUHy1
utq47NsxVBbzLkljZl7dCcNQ5y4CDVFmZchZX2SOQIt8iEgl1ffstZHIw795
/uJsyyI7MWeRZVDIZL8cnO8Yw7JYAfrm/MXRlpyusqG1EgZyL2RMRmaj8XaU
MIeDdmzFeeBL2VabCsHqOp9edpCL5jz2fvhoPDetWHDZL65WkE7MSk4UwBv5
Wndz7Hn6XcrhgFqFR4NkTm2StY8ZJc0n2wDke4ts925DhRTBYfIhlzw7x0X3
rsBvrGPqiw4Pn96gXQ3NxH5lvKggSA2HnHCw6rJsrpnoyfONt7mjDtkg1QM6
eNBikmPTRiQYZlzge0WIH06tTF9txal9pK/Od3OsvpvNk9fHW/te00f/4ZDD
8uN4H3a++AA5Z2bu+nZ6KMi2EX/xAQ3iZccvUoNDI2EuFxMSiFGSsTFaVgol
6aJUHxG/MRkFWz0xXq2T1yeyWaI1ecvrJEjY+CRnOhLTsXH+hm5hTWkgoVe+
18ss+JgOoNtWG9mUoofwopGtxLunvSfaTu/86D3UGfau4oTn8RcqQjiIG5LF
9nwh4e5OkOk6eOX46PxbTOJkTPpzdOTestkUNqFE462tnVJNMWou4ZwyOBs2
N7/GXLUVfnv2fbd4lVUkuqqNwBymtRBVmqowYc+ukYwSi09yepL5oZdE7SXo
q6wJuw6TQZF61dJfi9yEF8gZCprYIdcxzjkPXsHkiTyWqAwADNsiVGWVWvXE
bPLILiMQ783Jnw7PPtnd4ePBRGVM9iHSL99wkGNg2BCXLXnuGvrMnYCci8q4
i4RnWbWabjyF3yfdTH9Yzi3l75a/cLLcPvl2m7UtQi6SuiRGq1leAnxKkn0A
41wUaYeqpkEp3tRQw3TiIbJGE1sThcDohfJx05GqJ4EwW0480jgXkT2ahFVj
Asp+o7l2/ev292rRceMTK4hDazA4mUh+miXUBDxnGU5NqSZbJTEuXlTElFUA
xtUYf022VDOFLg9mBsHM+sLyEqOc2iiKsBP1c3L4J0L8IOwncTSx886dDZ8M
3wCUbybFAjUztIg48+pU3LcqVJKdIDuox9clXpMl2pU145tw6TAQZI/eaqrv
u09y/1LxgcPITa2SPg1k2xlKnSncjGP9SN08mtJlYU8SWR5o8VPvDpt1+lKL
2QOrMRaTSEvsCdwng7wEnuYJ//ADcjLEjB9AlhOpdZCUkuAhGoVEUpxZk8X5
cGXKU+m9fY31rgIavHLyYZzp7vSLdfQEtUEo+zJiQU558YuW7kKGYUez5cyk
v9TFkj0Byo1dVKDFEJcwS5H2PneiMakMa62U5ICVtKk/31pXNkOQXRU+JNjZ
15pETLAmRTcsV4sUonaVD5hne1NINpVT82iZeKVKjfmXc+8GAejOFppEyDl8
bC4K45kucokC+OPrsyOJRn66+5QSxIxJrg0tcpL659VrleIO3ShYfAM59uBg
7koqZFq+QWHiwaogUffyJfEl2CqM1q1aQQOjXfMkebE3sQCSDT/iyxOSMFNJ
CanYcrwHxMuUE5hxNCKnTIdp+/aKd3NB3BWNkhA6QTPpJOrwUvukdWbQD03v
t1KnYPOjlDDMWXwk1okvX1PNO+J88n2TsQoI5stQebH9upgumGZ2MqGIXwk1
DtgVrcdIbrE9x1Uc8MYRRaTRIJmlIiy/RAkMN0VB48iRWVJkZ9h9KbGaAUt2
5xVZr5jOA+ei7nigZRzw+LYF5kxKttwD0HbIs2O8MXLL5TAs4XMB6EQ1AG8p
xrbAKzt4VanmiS//sYJHQNt8KzbFK+H6Mja/l4kVQkyOsYXGn1EqZZCpbtPJ
6FHv+WWh2bIiuwY5uR3KZQO5WnLkoeDrCwSsYz9LM1lnLortSW4rl9Ml4pz6
mv5N/pLnw3y8B/D4TgETI8hQjlfM9PjElbFEQcsNkCXJLxfPieVNoP2RGOqE
RW+hRGdGeBIdm7NeLhhFOL8ZiQ4YJavGhVkCMykpngZVGba34IH+8cczR3E0
xbHg3NxoOasM4LpMO7LmLSV5NDKEwb/Dj5T5Sf98Puz5+Xyg32bP62qRnV2X
i8x9+z77M6y9wuhzdtLpz3t87f3Hzdb72vsMdAVfbMI/t3q299lB5otSZO9f
386LuoF93PfaWSbmBvrzvEZnY73+bHBg9rkHgeTzNUES/fw/D3n4vda9ci/5
G7PqJbJ+RhONVv28d7/hW382b92zPHlqoND4XN+y0PpcHuPPbvSz0eB9MNAo
BMz76F/5Hd6SIpLmLScvmbek+I57qzvXAdHPcK5gJP/W17qX3xuo6Ye/B7EN
CB8GSfTO9YLTcFbuK36rH4afGxhKgo97q//HnFdnrmD4BKJ/njxlN8qfirs4
9sftK1yEfUs8Ogg8a6O+5y3+cSVrtiwM+97qp2eJt9b76aPWG4x4G0YkYur+
bj/7xMk8XPbtnz49sPKRUzJYgY84/acgXFBc1BB4zdX8nzamxWW7IXaLyIbU
m/GfkiCI82L+NiPpJtyBg6tWqmgRb3UVVdIiiCA3htctyanaUJ7DpRSMcToB
Ry6JIDshw6EPdVejRYNR8IgGkre/JIsYCHfsF+TyEZRZGyRpUfREywwYZV7x
6FdkUOHoqyn51tOLd2JrrVrKJL9rKO2oKN6QogB7m/oIYdBuf0El8xcYD0Zq
SYgdHAdaAobkspphbIUYB6MVmhpvjo6EOg75EFdgAzKMRPHYSBnSGI3io5n+
yB/CYjle9KH4ehcrOc9nUqYPxz47eJVt9uWFb9m8MUaDEF0im/mBf396t22x
EdfE1QALSihCfaBplriQwwNJDU/iVxD0lAW6V8eLz5CPRzJem1YixXjaUSe4
fkqBxi5tTsImjI7TVzeNfYLEovat5zUo/FSpDcvrH967uVrT6Dj8Vc9hG7Mz
R5DVZf3M8W6+JxXeuaeqD876mu6ltwwJztH8dE+xvM+2z4PflkR4pgaoMAVU
IzXFQbdWiEvCkFjvEEZOY23gfFyikyR50iWBY8qyzyiAyFW0s9alpDLpnPSq
w4x4lINm5dN6j5UI3HPAwUq27apoQA7VC91utj4TLqjPgKDeQaPA0GLCKnKp
Q/fGGAmQ0QAm9rtWMDwcNZsNMuQYsuekYpvxKl/XE47RLZxRXqfGzPVLTKdQ
buHTPdOwdtH5lCTiCuhhvo3NszF5N5TLVSHr6Q3LD4JqxG/kSqW5aFJFdvSh
cpAs5VVM33TPtSkA1xDohQRtu9MKcMJZh1zBtHWVeKO910VsWwsNb2sV0kRi
FlkjTWBDnii6xHYiWWmwqwf5F7IkDl/U1RsMIcU6PH3FXTt2jLimSl3A8dGd
DCzK2xq0NlkWEuztK39E0UhIwuQxsq6he8vkqvQtX65O42PtvNM5qpWIrI4M
VJodGyeiWqxOZMTq11TDhDJjZstpW2KgucsCQ7RnhMUVbSLKxlVDA34pd0yM
YX2bjBiduKkDJ7yapjplAMtRAQqBFywCqcJ9cXgQfS4V17bcEV7cRSn8LEL6
8A9fydTGE6cywEYarCR5lWxWJ1a5WLsam6/0xinv68arIV0JTItqLS58SdCk
p03NzR4eZnlV3aVueJIrt9ZntQzuWYAuIrallYbtjkn8hKp0kYG+1FhgjyUc
m9gr8/lgyCB1xhaDMloQ652uXhHWu2uugX8hIExocNlsd7eozNzEn/nr3CPO
mxrLGrIR+mVcwUMX+Odt4SlBzVvLDNMht3RKkuCljjX/k4JtjIV9k2I30DC/
tc8p1x3bbZ8dGIsMsvkdQedt+F0QUMBZg7E1f8WZFzRz1wWerlxnqxoybtEy
MZlcpmMNSOuoVsvppDObRBeU5De9XE611J1mUKZg7fIjKOMds3qwXmCnBqAh
Zi5dHD2XZvQSxyACYvVY2B87YSI8kxvkkubgwMSe5ZgxFuCXsORpmprCci/L
qYTbJc41rIG9QgZdpe7g7XVn6Mu8WKkgHMspPBSiqbkjkSCAtEC+klgkW381
qM6T3Lqp3GuDyt099fEySx+/s0Kr6qr0ZapuMfoi+DJ23NVuxqpe6amaGfu5
J5Fe9XykCX9cqpkA5+zlyB/QBL7lmEd/ZjOXjlUVOPchvu5sSGFQgdbU+6XC
HIiiPSIJqQOUhWXCWDG2SIroRbG+NizF1AHecg+MyGFO1trhiXvrwAUIv/sk
v2p/WdRvPwwGGwdxIDFloN0W+RtKc9d3yEdnAp1HYjxyARuN3bJ5725RMCB7
23x8+DDohjOXkqjQSoaxD3VxG/I4ZqNPMNS6UwU8IVcEh+z0qV8wOICTVQIR
OND3wroaxH7KZMS7Min5hpDEsLYYHXydt5Fx72rmEuVrX7L02zNCoPtK5Lrj
jmZlnzZ9IiOtWeguBecN4X/dwMn+slTd6JqCTE+mrI5LQhiPi4XEEdrlOAsq
hS0uQTSZIjeAk8C8rSbQrWNWG5/lL48pgOScBDUUW1CGjdRslL9VuDA4swEU
ChBkKBU3zYbiKP9RUPB6O8gHMKpfEpuFxq/OTghRCh8Okx5WHZU9nLSdIpLo
AiM2HQEfFICmD2nim5BftkWYDoAodVEUc8XxmNy7ciywV6wFi+fgCKE0VOgL
pozvXXwL+A72Sokm5n4laqNzhAjrN1L8h+L6Hb+X+CTXpm1IbdrefcLr+KVY
fFhRFj3qCqBFaZnE+iIwPUY2vXOSc2UOP1k9xZcu0RdNgUlfSyUK/BF5I5wD
UXoZqKpYNMLZsZY+zb+jzeCH69VgR1IrUSFhQIy76aC30mXfDQMtksMnFyLw
d5fVhy94DTiM1vBPBCrcxiNTKp27GW1gxfQM25SNOgVpgprrLhBETuUzXtVn
nfhPIag4LBmQLmBLc4nM2TAdwST8nHovJZbF61AfB440pID0t3xJRAApGndU
5CFyDpWRBGFE7QPh4TK2tmLJ+P1Bv0+x74vwy88H731+fuhDfO8/J4iEX2bP
izYvQa5/P/j8n3p+er8Iv8Q1nEvC4yIsNPc+exR9onyd1nAmGtp7GEG/YF7u
NrMyzOF99nT0dLSLvw3Q7Y5UsqELHjy0cgT3229yFhEc/DQKh4SVLYRD4oGP
hcPRfxwcTsRH4Oz9VQQH/SJYg4WDkJ/+hfbC4XEEh4eN4OHwPsZmoez/MZA0
kag8TRejzBrCmyV8C808HqofAckOVq8NSYPVCsUHjfBbQvLwgAS1RpDSQ/Lw
4JA+D9bwW+Lkr9+FCwIpFoswCOQonY7dG/ARS23eQUPabzp+uNRmcqZfj43U
FSmapDQnOCQ78q3hv5E0DZdaZBLOe0z/DbklJW3C1xqMbRbH3R47NrT8Y/1N
UfjuvYHn27KreyPMt618qhVJ5RppZT+X9DHuhvmbtadEZXEUNtGrHtyxkd1r
/LbAvEpkrg2aVuB1wiAFA2j0jno9KYSHJUpJ2jddXjSLRKwLIeapu9eL4NNA
vH1gmHJvVHnfTbAOKpc5K44q0LCiyJauV6HHaZmazbVXIghHI1PNJ6etq2jO
PRRY7e3XI1CuJnO5dAEJIsB4Lf0ROlylQXRRIAxnHPbzp+LON37NNoEuPN8y
hcjVokgFvCjPoauCa3GNIae0Ds2VXG2nYnXH5gFIO6VATzY1U7jviBgwIyMN
3bt372znWyzmOJ+6IkyMfLhDV2WVgMEKCyEjxYm3juv4gkvHcx9pte3HKX1q
9mV+w7Q5LIsFe7/Cmv+l+KpuqnIS91JbSrkjUEh+aCSrX1xpK4+cKTxGFphM
58BUXnY79/kWQiZzVvdhfEv3IJrRjCOcM866VO9C40WjjlUde7q23puErVmp
YHna2UZmykm18JnsNYLWNbXKtTXO9G40OLAFQoldrfTNfjx/IWdB2ARInSua
K+ycXUE6dNkl4vZKebtRMcP6cK6+QXi8fEy68nReyn2EdlWbt4BzsP5PeXky
I9mKfOGTKoEp6dhUu3vPELl16hA7R+fT4Xw5u8CgigCsqf6IvkVb0GWU67a2
11F/Ux2nx0rFfG/2/NUZw5YCBuO8bKpCEZSnZ79f7IHPvJNUS7PYeAm04Uqm
V8cAZPuyUMXNOZbY54Z5e4+/BKrnoxgbNKILBubZv5xSA/ntfpiKJ/VCG3ZK
UJKWXNzde5V9s7PzFMVzfBmTTJB+vKKXMYPSdqEKOtqKZA7SdY8HzwWmWMwM
svO7gXOSY8q2JXZOWmOWjJL2WnWMWRb+FHfnLf22y0+W9tJTFGiI4PsU6moD
eNGGvchLrn4hD9eRMXo/bN2Rlp5pgDN7cpsN12Tpnil847Eb/0jdEy4hGQRH
+swIQOpI48jefeKuDrFyWNkHBugkDrDsq6BJwmTe9Mr+DuMHnsWxYY8dd/j6
x2XZJUKVe5IvNabIEiOJPerdns673jF24X7iAlLvA/pikfcB3Ue1xjsD0Vmu
OENQg6SArkmHMs0c86uiU3n2xbPHKFKhA+olhpaN0Q0Ar7mv97gsti4moFbG
g+bK6aP4gtEQwKuxaiF1I3MXWIob8/f2bm4msXzLF87CKurkjtpIPjn6hat4
y8p+aceLEc2y0ZOI+/LgX5EV4pV76IjbATxMIL6LQKTAJGk8Z5KuFTAaEIL5
iRu903DBOgyLIaZkeFnyrp9XNkhZIucN1nhOt+1K8waGAZP1KP3BkFZiLd6y
I780mMDsG72ItOKGxVXwGD8ef3vsenJuhxOKg86Oq+kj2GAsv6oLRNwzEZmj
6mN4qBQO40J5Zbyl+PGevah+PDl49WhWNNepgeE7EKtG2fcoNgCoTdxPBzD3
xLazLSfgYq+Ni+ow8DvY2iWhi58x1coHPUE3PYQNZWI4F/YY844Tbe9EeNn0
sf7cb9xt3oXJlkVjOkb7ogDsRcvZWMMJBo2U3WTNUqumBFTZ5RREmQTZCziA
o3lRX91lm9+8ONri1IIir4F/TOPKL5uvvj3cGg3C2oipGjNeOl5X3DdKOclG
DmC+mO051YKMQYn7YkDTm1xANafyT7quVr7BeSrMR+4kdtwbmSkVglF22V6z
+gI+v5/1R4ZzV2WsDeV1gocHqfdQWBuL3+kQGrY363Hhb0UZDZGGDxeFv/aB
OkRIfMSOny+MlJgW+aX1RqvwKIWLkHwlspG0lqORV/AZqTcbmnSC5ssuRTwA
U9RSKRZNeuJGKydqXRYtN4pIazaO51KzKjU5+KDMMHS110A1sjpfWqzy0SQd
i1FUwi2tngjiXVQTAK6UUHPr6WYz3n9EhKJAv+4pu9lTb1M4t+1oSVgyGrxe
uLplfVRYU3O6iZghxhPJ9cNx1PC1TWa7/yJYTX7Dw55Q3SSuGkQfZceXvlTc
dsrS07EuXrDN+rKs0Tdsy5xLabm6zu/Y4ifFYwQ/K7iBUu2jr44PpnZhSO4F
gOO2nFDUwLoVakeYpmm61up+PD7Q8umW3LfRQMFcYUTVPV8XueQ8EQS6hlIP
8ejOu7ihe1ZkZWNH506BVJVuaFcgUYreuehGmL0Tuig0moL9SulsLZFR3Vi3
sJi9JbiOYm4STdFNR8r4VoSVDyTMeM7koKAdRWFt2YYGdG0gLdyAa36Fv5vw
UxPppu2WV/TTWovDZV0q6GrT6pUPDyFVC9fbJQh5H4ICjUfzB1x5QJhosSbw
stvus498+zlXnTrtifL24si7Zkm9N6idRrQeOeNEqG0YzMj5qbcldvSQ6l/6
ahIf4MSek+gl1ZzdpPy0ZrpJV5GytV0lTEovdtguW1Kqnrx9ixM8hX+Kuobf
SPB1nsIxVfSLAj+9gewZAtn6QDMOl1Ksdo1yJM+bJLJOoHBv1vAgEXcGjAVU
d8+c553yZz5hc0KxSKY0kzOgNcsL3QY1JSH/t3OIf56obxF/8HnyDw4IcDVA
OtU/otIf/m/+Q+rhUFCADwLoVAOJh32PjNUPqUaReBR3H3WUbPOPp4db/kUT
d/CeQ/i3gvCCXwWXVEhDIsIh8YTrnvN+8Ogzb6IQsvbZIx0arQAZXNr6rjvO
fZO/l0G+HtqfjxwkGOP3HznIyjfuHwQgpd0CbGSqiSl1gPt6mN1ogNnH71kK
RA9Pi3/7j9oz/wPbKX79dkB3xwCKX7Odfw8fif6874l/xyNULoxHSG0ogjI2
HvXDtQgSk26UxMGHAf8noBtDIByRev7AEyTrgcsN/Oef118J7MQgV/abbsev
5oGDcKC+mH51Nw8dRHW1G6L7HzeI+0joTQQrPv6PuV8/FW9bSk9jFnX8/OeP
GoVr9AOwQcxE9XX9URwtdsXnPWFegfjB0/8YSuuu6dFDrunQEpnsV19TPy5V
rErelfUH+Xpoyl4N1xnka7ufZtGlvX8n4DPHH0uQJRk51z8Aee1XEJav7SDr
bvs3ZA22C0icXSZFEWzuiGX79qp8tKiT3Zzx6B8v6nztD+LjV/L10CDfr9hO
8Wu383c4Wzk/X05DP6HCPaoK/F3FARrBnPVvRqyGaEgeqQ/VsYnsIVyL6X53
iH5OYX7/Sc2rD+dQK/5cCcbiNwfjykF8dHdCm9ZAb9eXIF3W373aG/l93qth
Zw1o/ibkTUrKhxW/nUsvKGXWVhStkgjHNKFDq0PH7jO4Jobf+w2GT+QmRwDo
tngL6w9EUSGHB8m1Pv7NQCEmUVcNJIoET8z9JJjbvOQDGjkCJQqHbx7qI+TY
E+qviGFR6oY+GP/bsmw4cC8RhEKygFhjIq80YFCMsbwRLi7T6frQWaM2URBr
RBHilC1wqMFDUZ2SbnzMB2+x59A9WSA2Zipd/oVNKej1gWp/ExdrHyc8+uIZ
7975tFnM3z7BGpVztgk3QcFAn7zLcZvp+lv60COq2ONCeEPXD98JLrAYGYuP
jmy472UnGlFK7oT96tIuPHKVYB5mv5tOIs48SHqizrTRUirgxkZ7rI4D5cRz
JXS3+R0AGIuseQep67HWrBUhQ8ZUiZV0EZQ0pEFMF4FCzSjzeuKCSwqpVkqW
s7VQtHfsXJRYHzekk+iWTr+F1edjapb7ma0V82tQZssgS9KQu+InMF0GdtsV
P4HtNTCwrnzJWHDXf8kYbD9uT/dPYucbcrW3B77VdbDwACiTORNkT7auF9De
D9d0qoWPW7dOenmdx2mUbFPd1Fupx9fevIxOUt2KPaoZZti0GKN78ufThwI5
80A1YE10BbT2ER1/s5gtfDHq/n18zLbdvhMJxtG2N0+OTrceuvEVwuuuiq4q
Foi6SwFVMaHWdW71yq9hl49UGESi/a7yJ4q3kV+P6Ff0GY6y4yilyyUPaUds
WkThHXPiu6FotXJcAsHDtVK50UkVJlBwSP10KjWmsfSKq34ahlVIGUddqIYk
M+Umj9/Ja2CVUfsleV+FiFTBhZ40/L7wVJz8ELMzAEnOsVqRhByUzX72f0w3
v0d/bar5/6GMSu10kWd/PHv9ykTrVcZFXRcFdjHPZwUI1ySzrElN9knkevYE
sBdZaFh2hUKLTG0dP64hO50R/vjj2dCF7dsXZEKKLEGuHr1nWR3RM0+iBJoU
liUoGMlxtj+knnCxKIO+NE7QZVFjX5jlO7yR64Y0bOxnG7xuWTY1wP2nf9rY
NqMY6Kz9vI7+U8/jfcNkG6PRaOPnwQdPJxb5DRB4Rxqkmbyv1aKX2IEMALZS
qbUVS6JCPY0JMbgXeGyS8+EKpZT4lfJ7UnRpEkYIaEiFDauKeBlhi41oMYiB
8qnaN2yX4TXCJHw5FomScmETQS6jS8BcHfjBO7lc1i0FBpiURQrX7MRkRJsk
Af9Oq804bTqojHSNWjJgRjkx2X9anRruXFSiKwaj1IfOg4TAVqpZccU+Kqtk
C1gpNWcC6Sp2mdDeEZX+l9gRpLrbq0o2KQ7Ije8eCuVRmuw117vYRUwls4T2
ebz7Irx0ICah06t9/A92srie+YZ+QVW0ONOPaN6bcrLPypcMyJGQIb27uGt9
I6h0dBrFAwWfbWSvD8+PzrOz89PjV99x+22srPvWGi4Ozl6NdjOaR/LJNuxb
G2v0CBgwvDB4835oUfobVtuLuCAQgtl+9zVpsZhtBunGiXeHdyDufPiwtU+V
rplYTYZwmF3Yuuo2E9WUqIYdfItj7OOnQ/h0SJ8yVtBJBdppYty0FotXBLk3
kDapeJ8u47iduVihvdHj0a5WrAxHs31/71GfO1TiL0/3dji3jPP6Mg6ulyPT
7OFudpOz/XkeuLHI76ZVPgEmRCwx21j/TN078JY/J2R+ezt7u8OdJ8PdZ+c7
O/v4v93Rzs7O/2YGiM8HO8RXsL58UTz5Ynd3g575wI9uuDvWIJ+U13XajOID
W5IyzWroC7jDOO7R2d7TZ25e+gYuai+Hds998K/4Ndz32gf6Fy3pHyxvzptJ
P2fugLWXK/+wqJRW9hV4FDYf1Bw7+/7gxQuf0+Xis7tB8ytKkxI9J+ldL4rJ
kbfRjXFmdKIwZpBPGBBvMSHKai6wbYwTgoflfIj94HqWGhX//Otto0hMRUrC
/O4mW841uyoEDImRLcDs9Q8vnofxg6QxPNl5JiGDZHxKx/CxN3wipSl8hgEy
UzdtoJyMUpwK1+IOzxEnz+mc7N+kDo5br/5Knvb26Xg/ZLQRPxOIdmkOmSpZ
gTRCXEC9O1KMa08UMiUSaJhMJXC2Q737AAR/OWGll8gFZT9TN2E/5krdExov
a7J0PpArzVEsjscDflvfLdrqqs4X19jXc4r9DuoKW31gsdEZKt2LplhOqqF8
MNdc7w6j6y7VC/lphhdzGlbuNDA6NaK2t5+YCqq9cdSovnOeXOI83FnYFt1s
MPCkxx/xwxRgTYdw2kNHolyhIgfZH47g5Y03/OmqeqjgVp9WfZ/42JWrNmNM
BWYD0lPYcyC1tLSejppT3yWNunDzne1pQIaW/FDlT2n8QVlPohegZbh4lpWn
0AmxN1TG1p2k255MxGEQVa36XBJKGuXYuFZdFFtOJ+SUSguqFWu77yDwCgQd
0gWq/3oA4v4M7qZpvpC6Kk6CbLhlPaZehCU/75G2ZQ2+wImkbnlteEVxGtPO
pkGOYdBf9kGqGzO30ccJn/LZQ0TOvUjkJPqKjxbPm88/f/Tt8vn33/0wP337
6vHR7pPDf1HzzH3SqXvI0TV8IKZs/qnfwsT0EVamHkOTF2pXvrrG92iBkr9+
/ntL7IBUOFa28fL4+Ju9vx4ewuSTA1iPTP1bC+yLm7pfYL/PcNYx95YPEFXx
CgU2Yb0M8NTnYh+2Fh4RVLVsGElPKVsza4im5D9HZQjz8+2XHZnx9fY4KSZZ
BwwNUlQFZ+I7KNsOFmwuzKV3zCzvdC7zo5PgLw9Zq1635n3HYduJYgEQvUYT
Y4oxdWyOIvFT0k7X00F1Gyh5gFoj9rZ1orpVmirPEQtdL5Unr3l28qfDs092
d6TlnhNoULy7h/RqfmaudZOpDpCdLy9nje1ul/MeynFow5xXITtsYf+wGrFN
Op4VdSZYy9+SgNNv737pTtLrgTl6iAdmwELmPCMHIunKFvvjDUg9Nbw4wTty
tNJDqKfP37Y0ZDw7tfCnwlFep84vqmVr4Eo3FRkZh37K4UriICbO1UXqK6nq
nX4NO+MQ4/eFG+uclWfDsOVVnH8j+6f0UJaQ4hCupioXC097I3I8o16yehxr
dtEFKy1NyJvUnUidacqiYpBqXWMKYld+T5k6X5VADlsiqTDkCqteUH8FinpZ
2V8hrHouN9PPslheACpTL4EwyTVIik72OPDkhqnMtl+SK4dnCseMBt8XVLsi
MMtjfdKCWu+xbBbWNySjk6uPGsu3xBH/1i4IuYxN9KqullSFhSwWTT0MPmgV
nn08dl60GGc0bHBoeJ0QupNOOs4X+UVJPZiiXp9la8sh9RB2tC5MuUsSUfVR
5FaXaDap6YqlGfW6wWtjPhl5FcfSX8V/QiVKfAK+D6UyK/EFYEQbiZIBiMoc
nZ1vZ4cvT/A/Z1zZ5Ozw6MS727x9TPETawORTiJlLxNTupTbKbXSvJJ9h52t
XNcWNdlr2moflxQQis8Lxlt5piKKeEpM8oPeIs/lWEQJ+zFqO0cADBLPw5eH
SREreef1pHTNtgyp0xbxkuEfAZcn/C7blD5luIVru+LuILCCuePJBmc8/bso
AAqjwfo2zxSz/gebQLtLwFqFJtk8JOXTqVQR4z5oKt10u1InIj/xL9SR2dWp
nlxbb8pITmoU2DRCgov120q1web+e1rLklAR9XnX0yJLCijMVrgmsa3NHZnK
wxYdg9VXAg8Z0Kb2WOrkEUR1Kmb18hBxJ30/xDSZhaTsVotiedZRSg/NcNsB
QaQ+m62p3y2jSySmX8+Zmlsif72bNjTkljVFRtoTj5afFggTKJ/UmlCmyzTK
WPfSlRqrpmDlLGXGdxJtZ8q1jPv/nW37Wdfh3A8t2YQnx2IgP4Ej8dDaxInk
pLYs7OgqBjLG/mJ3B+/KvRIDx4Pv7qwGl+MFkbP1/LqIhaQHWNccgTL+4rYb
BkJHa4o+hBa3e01uDibWwCbgWW1D+e9k9SlWWX1WqCc/qqzq2zFbp6okdvgW
Wem4fTF9s/C2Rtsq5JDpnrtkP5FuSmFD17ApwYPKZec20BQAItdSbPWzivo0
5Nzb2sscqM5g7+BtFs44Zj7dib3TDdtfD6oN2VPnZ/2qspxOo2GzJ74lmdiY
utVcY8sSX2Yv4YV76Ob5pNbWKUeLiDYjkUjHToxkjqfbo1vsIVKYveLctS3G
nKaaFb4EfZNMdelPZwHhBYhSIl/FEyjnrDAtaDt5KqIhaEMHr2bGPpmQC3By
xaOgA6vtx+wr1nZrmTkjn/KPGQonV9gsgLjXtdjP7qsWrL1oU93LXaqIZntg
Sskj+P/Z875e7DhtPubSrKnueZsNOwdTmSK/Cm6SSJI40PtPE9aDuXlJxEjN
ZcfbdOm8QDPxmrwpAFzcUAObEIa18bQhi+uu5Fii3mtc2NCl27xIQQOvepQT
M3x4QSN/Kyhw/wFFjPKPLlz0q4sVPXifWZZMTEik1pqCRD/pmX5uBLWf78nH
/cl1etRK7aMsrkCSzAT+qBxkTRqZPST/u69eysryL/ajtcu9fNyePqYmjHy0
CbRmK/XUgwCxsnCMfWntQjH2pXRhmGzlS+4Lg/Dm0PngV7yUKBxz30v8z+ap
B+gay0vspafUzLpvp0vM9BYKIMB0S8oEOVarish8/D6jl4ZxBZiHIPHRxyGx
+yLAjlSVmORL/WWx7gHE5qkseM2XVpTz8GTN1pvpntNvSGyG2Tg3hWLWOaev
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
/9PfgxUSuwEA

-->

</rfc>

