<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-00" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to the bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping 
in domains featuring no or only timely limited connectivity between
a pledge and the domain registrar. This specifically targets situations, 
in which the interaction model changes from a pledge-initiator-mode as 
in BRSKI to a pledge-responder-mode as desribed here. To support this 
functionality BRSKI-PRM introduces a new registrar-agent component, 
which facilitates the communication between pledge and registrar during 
the bootstrapping phase. To support the establishment of a trust relation 
between a pledge and the domain registrar, BRSKI-PRM relies on the exchange
of authenticated self-contained objects (signature-wrapped objects). The 
defined approach is agnostic regarding the utilized enrollment protocol, 
deployed by the registrar to communicate with the Domain CA.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch 
(automated) bootstrapping of devices (pledges) in a (customer) site domain. 
This includes the discovery of network elements in the target domain, 
time synchronization, and the exchange of security information necessary 
to establish trust between a pledge and the domain. Security information 
about the target domain, specifically the target domain certificate, 
is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>. These 
vouchers are signed objects, which are provided via the domain registrar 
to the pledge and originate from a Manufacturer’s Authorized Signing 
Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the 
bootstrapping and is the initiator of the bootstrapping. In industrial 
environments the pledge may behave as a server and thus does not initiate 
the bootstrapping with the domain registrar. In this scenarios it is expected 
that the pledge will be triggered to generate request objects to be 
bootstrapped in the registrar’s domain. For this, an additional component 
is introduced acting as an agent for the domain registrar (registrar-agent) 
towards the pledge. This may be a functionality of a commissioning tool or 
it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be usable also for a pledge in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the 
communication between the pledge and the registrar, when the pledge is
in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of 
arbitrary transport means between the pledge and the domain registrar, 
by keeping the registrar-agent in the communication path. 
Examples may be connectivity via IP based networks (wired or wireless) 
but also connectivity via Bluetooth or NFC between the pledge and the 
registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain specific device certificates. 
EST in turn relies on a binding of the certification request to an 
underlying TLS connection between the EST client and the EST server. 
According to BRSKI the domain registrar acts as EST server and is also 
acting as registration authority (RA).</t>

<t>To be done:
* include reasoning for not using TLS (IDevID does not contain SAN, 
  TLS server flag) between the pledge and the registrar-agent.
* Enhancements to EST state machine necessary to process 
  self-contained objects on the registrar-agent and domain-registrar
* accepting</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of Solution">

<section anchor="sup-env" title="Supported Environment">

<t>The solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
in situation, in which the pledge acts as a server and only answers 
specific requests.</t>

<section anchor="building-automation" title="Building Automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.</t>

<t>Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure Isolation Policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to a domain registrar 
may be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less Operational Security in the Target-Domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirements Discussion and Mapping to Solution-Elements">

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the request and response messages to 
support the communication over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples in scope for certification 
requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
</list></t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To BRSKI wirh pledge in responder mode, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the use case.
The pledge-responder-mode) allows delegated bootstrapping using a 
registrar-agent instead a direct connection from the pledge to the 
domain registrar. The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and responds to 
requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-PRM relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2" title="Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar this approach relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-PRM). This allows independence of a 
potential protection provided by the used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of Pledge in Pledge-Responder-Mode">

<t>In contrast to BRSKI the pledge acts as a server component. It is triggered 
by the registrar-agent for the generation of pledge-voucher-request and 
pledge-enrollment-request objects as well as for the processing of the 
response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent" title="Behavior of Registrar-Agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-PRM, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Discovery of Registrar by Registrar-Agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Discovery of Pledge by Registrar-Agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping Objects and Corresponding Exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request Objects Acquisition by Registrar-Agent from Pledge">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request-prm:agent-signed-data element
(defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request-prm:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request-prm:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module ietf-ztp-types with the grouping for csr-grouping for 
the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. In this case it MUST sign it additionally with its IDevID 
credential to achieve proof-of-identity bound to the PKCS#10 as 
described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certification request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request Handling - Registrar-Agent (Infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTP-over-TLS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional 
parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTP-over-TLS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTP-over-TLS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:<vspace />
Communicaion between domain CA and registrar is of content
type “application/pkcs7-mime” 
Communicaion between registrar, registrar-agent and furter to the pledge
should be of content type “application/jose” . */</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response Object Supply by Registrar-Agent to Pledge">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang" title="Voucher Request Artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-15.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-19 {
    description
     "Initial version";
    reference
     "RFC XXXX: VBRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
    
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion Attack on Pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired Voucher and Enrollment responses by Registrar-Agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of Registrar-Agent Credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='24' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-08.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history" title="History of Changes [RFC Editor: please delete]">

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-internal-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from 
draft-ietf-anima-brski-async-enroll-03 to this document 
This required changes and adaptations in several sections to remove 
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="voucher-request-prm-yang"/> as well as in the 
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to 
to allow better listing of voucher related extensions; aligned with 
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the 
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not 
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAMbjcmEAA+2923Ycx5Uo+J5fkQ0+CJCqigBJ3WC12hAISWjz1gRkuY+O
xitRlQDSrKqszswCBFPsdT7kzFrzLfMp50tmXyN2REYWAFJue2YOli0CVZlx
2bFj3y/j8Thru2I5+3Mxr5flft416zKrVg391naPdne/3H2UzerpsljA17Om
OO/GVdmdj4tltSjGZ037phqvmsV4dzebFt1+3nazbFXtZ3ne1dP9/KObsv0I
/pjWi1Ux7fwH7c2iKc9b80HddOEnsI5l3VXnVTmDD5c1PdU1lR+mq7o5LOub
1yd/OM6vq+4yfzUvZxdlXi3z12W7qpezssmf17My36aHxq9eP9/JirOzpryS
9/CjrGjKYj9/uSqboqvqZZsDTPLnxbK4KBflssuuL/bzgxfHzw/yH7/LZkUH
kz7afbSXFevusm72szHMCCs/meTfNlXZwkIZYCddeX5eLt2ndQMDnVQ4aJsf
fAef6FrkQ95iWcIWX3ZdPf6+uFyOX1fLi/wzhGLV3eznz9fLanoJfzblBSwW
9lFcFU1VEJhnMOtHX+x9/vhLBvt62TXwzndlsyiWN/BRuSiqOZ4TrWxyjiv7
fcuzT+CY4JF1U+3nl123avcfPry+vp6Yrx/qXk8n+Y9lsywbt9nTy3pRtP7T
f5zNdrSy8TWt7H02ezTJn5WF3+rRvKo7/Yj2eVi10zo/uQG4LuzGXsPquwr+
Ktq2zD93+/qxmM+rtpzPy6XbyuH34y8e7z6xWzkBrP5r2cwBH+Hj1SXd0q1P
nuzlT57kX3z+Rf4l3NEtv9M5LOn3U1wLbU+W/3xC6yiaWVsv3Sae40flPD+M
vuVzgxnLOYAxP6nPu2u4IPmPdfOm9VMtps0nSAp+3+qjk2lhAarwNF8/zJY1
nE1XXZVIIl5/e/jZoyd7+3kuf3z+2aN99+tj+fXz3ce7+uune5/Kr1/sPtFP
v3j82Wf665Pdz/XXL7+kZ4/HTyeGZP3luh1f1evpZdkE3y7Lblovz8ftX7vV
eNrCl9XyPFrsoy+/0Ik+ffSFn55Xcnx0dDT+YvfRZO/gNf4NJJDpE36Ryxf5
STldAzCfllfVtMyPZ0BekMQ19ILSE/x9zAdxvGxhmHVX5vU54F05RQpYzIlC
8Z813JA2P1peVMuybFp6WWnU3hfj3c/ok7bEm4574uF5vXh/ZGEfZdl4PIY7
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

-->

</rfc>

