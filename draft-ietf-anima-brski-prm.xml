<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.7 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST. EST simpleenroll uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in environments in which pledges have a different technology stack or pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges deployed in networks not connected to the operational customer site/domain, e.g., during construction of a site. 
Another application is the preparation of cabinets, which are to be prepared to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified in this document lets the pledges act in a server role so that they can be accessed by a commissioning tool to trigger the bootstrapping. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping, this document defines  pledges acting as a server answering to requests for  pledge-voucher-request objects and certification objects.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches. Industrial application use cases are introduced, which could leverage BRSKI as such but additionally require to support pledges acting as server only responding to requests, as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="app-examples"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
A general goal for the registrar-agent implementation is the reuse of already defined endpoints of the domain registrar.
The already existing registrar endpoints have been enhanced to provide distinct endpoints for providing objects with additional signatures for the enrollment objects in <xref target="pledge_ep"/>.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.
This enables the registrar to verify that the pledge was contacted by an authorized registrar. 
    In addition, it enables the MASA to provide an agent-proximity assertion.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent and not directly to the pledge as defined in <xref target="exchanges_uc2"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher status and enroll status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent <bcp14>MAY</bcp14> be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Representation of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the pledge-voucher-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the pledge-voucher-request.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and the site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the pledge-voucher-request (PVR). 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the pledge-voucher-request by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS pledge-voucher-request is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the pledge-voucher-request from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request (PVR):</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) EE certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) EE certificate, used to sign the data, is  still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates during bootstrapping is necessary as no trusted timestamp is available, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of pledge-voucher-request is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the  pledge-voucher-request (PVR) to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the registrar-voucher-request (RVR) object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request (RVR) <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The registrar-voucher-request (RVR) can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) EE certificate or the LDevID(RegAgt) EE certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for verification of the agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". If the agent-sign-cert is not included in the registrar-voucher-request (RVR), it is also contained in the "prior-signed-voucher-request" field carrying the pledge-voucher-request PVR.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the registrar-voucher-request (RVR) to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar-voucher-request (RVR) <bcp14>SHOULD</bcp14> set the Accept header indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request (RVR) it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the registrar-voucher-request (RVR).
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the registrar-voucher-request (RVR).
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) EE certificate of registrar-voucher-request (RVR) or of pledge-voucher-request (PVR) from "prior-signed-voucher-request" field. 
It can be verified by the MASA that it was issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format is indicated by the Accept header field of the RVR or MASA <bcp14>SHOULD</bcp14> respond with the same format as the PVR was (default "JSON-in-JWS")
Specifically for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the pledge-voucher-request in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request (PER) is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen) on the registrar cannot be used for BRSKI-PRM. As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request (PVR) as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request (PER) with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This request handling to the domain CA is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the pledge-enrollment-request (PER) is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with the HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully, including revocation state of the certificate, validity, and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID EE certificate. 
The pledge <bcp14>MAY</bcp14> omit the revocation check as the EE LDevID certificate was freshly issued.. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID EE certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID EE certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll status object.
In case the enroll status object indicates success the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll status object. In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID EE certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-CACerts             supply CA certs to pledge          [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the pledge-voucher-request (PVR) against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request (PvR) and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in the pledge-voucher-request (PVR).</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID, may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) EE certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) EE certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
VOgb8o0G/z9ZdM5HNKwBAA==

-->

</rfc>

