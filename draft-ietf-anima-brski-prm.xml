<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Voucher successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Enrollment response successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to supply status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge).</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status objects described below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response objects in the future.<br />
A pledge or a registrar-agent that receives a plegde-status request object with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstraping".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrapping.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrapping" anchor="stat_req"><artwork align="left"><![CDATA[
{
  "payload": {
      "version": 1,
      "created-on": "2022-08-12T02:37:39.235Z",
      "serial-number": "pledge-callee4711"
      "status-type": "bootstrapping"
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>If the pledge receives the plegde-status request with status-type "bootstrapping" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
      "version": uint,
      "status": "factory-default" / "vouchered" / "enrolled" / "error",
      ? "reason" : text,
      ? "reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occured during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge status response" anchor="stat_res"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": "enrolled",
    "status-context": { "additional" : "JSON" }
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
        "typ": "jose+json, TODO: may be more specific"
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
N4NJO8Fv2+fP9wdbZzdn09Hf2/vFde8s3XqTtLL++Wzj4sPG86P4Nn639Sp5
97aTXOw3bwawpqP3R7fH749+rRXHB8PiuPfq7PjgzbP2wdWzdu/dHP734TzG
eQ6nF+fbG6/f7t0Pti5mFy/61/z7eDY4TzaibvP+4nz0a2023OrcvwM4vNvs
34/2Yfzr5qvu2dFGeN0+eNNPZhcbh1vds1d7FxvJyzf98UX7w6v4XTJrvzl/
/vLNRvuu02z/Wmu3D5L9N2fNg95Zpx+1+s/e9F/tX2xsn7+5PrzpnbWz416/
M0gunr3rD5uDF8cfem/HrX7r8PjNZHTSv361926j+Wttv3O9fXvRGsEInWdv
zrblCO3e2av8bHL3/rj5qnXW7+xdnF1sHb9M2p1WfxtmfD/a2P57p9dp91uz
X2vjznR4G103W5238MSL9lZvMjtst5pn3clhu3PQedp5O9s7u3417QFMYRft
N5v5Xbt/OO9PZ+P+h37+7gPuCNZw9ubsTq7hPazhRW+6d91p9p92Njp7/Q0x
wlkTRt3rjiav3name/GgNcvP37/Ko0nn19pRdzJ+H16/CuHtdmfj1fbwbNTr
9d5svzkfHXY22gfq77ejw26rdds9O9x/M4H1XOc3YW+4PWi++rWWdT/0LwCj
3lx8GPfPmkdPX2/1Pxyfd970z5Ow22puDDaL3sXLw9ew+skgGX14M3mTDfuv
jtvNUfdicpH0N4tfa9uAt/FgYzbpnt/lo7ev3oe9o+ZoczsNz56fv9kY/f3i
7Wy/fdbcP26N9o77/etuctjpbzT3z85GB2+22nD6h7/W+p3rV1uwm/2LzdE9
nN4h/N15t9E56rQOT/k0x52TFuDL+/Ehnt2bjaMN2F0PcKnVT45uAfK/1g47
b0dv2q3k+t1m83wwOXzXe7/3fnB2sd07HHcRP87e9t8fT+7yd8noHG7q9vF5
cv3mQ795nox7bzbG8+7k7tdaCE88u2iNfw5ftGfHvb3wvPX0tje5bkaTw7f9
aScEeDzrHY5+Pm7dFe3zu2tY42tY43R4Ps7C6+dvznBHLTiLE4B76831xV54
9urp4EVnPzyc3R23+pvts9nxcbJ3399ob0T9482w1bnofzjcfrPx483Z5LD5
brp30EbcHXfPOtPu+Xivd9j++d1kdDyYjNJ3E4DDh73rd83Ri37/4ub15uhl
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
RIwtL0WMFveSwltRsuQ7IuYvHQ7//UNzPPxfOBw+o23VkBx0yxbduvWoHEcy
xzV1O9XJVQsNzm2RYzHanGcW24ADGHV2DVIPMNiAdMCYBej1Er1gooCjyEpS
NI7GTHHRBh7cdUCF8cYunNBTtIWRS7QyI2sOe9ffYFNXKwFEcZLN2SiY3ySh
KRciUDcDqePmE+64kPq0wZQTQWYgMt6RyPjVjVfHn+kGrEzr3A65FQwP8RSw
1k1DAUoet7y5hIx1DgOLJHQoxyvPpo3PWSe29dH44PQxorZoZdMEAcKdd5zQ
/HYIWhA7eqwP+u6eL+JyWGSDBIZFwiHr+WauDeesZIVIwgUl/G7aPmbzD27d
OkufAbbevUvBD9gwDJ121vcOvvVljye1QbxoKRK0E9Sz5XVic3twTcYIcDpW
ZnuDQajfgnANK7EfO5CLL/da/OhqDkcQctnCy31Z+pjZwmuVj9nIe8ZTQXFL
iDDMkeUbzgFOXwo4ysjfTrO+3FJYOwVJ/Slruatk4VFwolT3Ot5TiBGBO+MG
UTjtXUbWt57KcCbuo8U/xv6DnATL/ODvv/XTl39k0e5wvSyLhXPf2f4jTh7s
1dLeg2ofumtj8LX47XY1ujlE0zBeCfb36Lp/O95FnxJzZabTLz9gZEciVtGW
95nYaxb1HepFHEndqNkHp1muVIG+XlUpRZUVvDKz6YYKBOOZVDCBLkLdTP7r
6r9/BlP5R159CQTucbXEN+nLdBd4ucG/VDe9ucX6wweLuJWqG5qtkq+bK619
9el/Xfyi8+8fPvzb1V1Vcj07XVJJV2GuJy+KXjV3Ol9crnu83/J/8P3bunQR
XZbaVEVRj2huVL+49LkuoTFd0PXW+19V4aHJ1c+tzus3nFePUbfzqoIur2/S
pbKtxy9VL/zHpFTtelw+Vs2g4habqvTvReWNywvj60FI1nQ9a0Y1KZrWrdE8
Q73q5/YNDVjV5I52eVW6Onu+qu/zpDPS1d3pk4uKBs19r6fHtP9eEeDqUuVT
CaNXFzjXz1wn8/O7nT82t4n3vpye2NJ/vRrLpLqjuTrSPV7OUzVJ9ZzQpeV0
6z56O5ZTNOxvVS3CuvSoumb66pfV5OOp6WctNt48/8TXF5NJ9rpmQT3nDetf
19fQq1oPa+VJ9bHzPRq2GVd1AJJn+MGVXH57pRZOx9qX1MrtlKoCb+r3Zqtl
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
jmlbQR3I/w/QNEIQDjMCAA==

-->

</rfc>

