<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.14 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request 
        defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
                  min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
                         It is defined as list to enable inclusion of further
                         certificates along the certificate chain if different 
                         issuing CAs have been used for the registrar-agent 
                         and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:
* PoP for private key to registrar certificate included as mandatory, issues #32 and #49
* Issue #50 addressed by referring to the utilized enrollment protocol
* Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA
* Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment
* Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate  <br />
* Issue #43, clarified that the pledge shall use the create time from the trigger message if the time nas not yet synchronized.</t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2963obx5Uo+h9P0Zv6YdImIJK62GY8mdAUbTPRhUPScWb7
8/E0gSbZEYDGdDdEMZLmWc6znCc761q1qroaBGUlM7P38HMiEuiuy6pV634Z
DoeDtmynxX727enZn46zm7K9zk6mxeSqyMp5dlo0i2o+KersRTUpsk16aHhy
+mJrkF9c1MUbeQ8/Gkyq8TyfwVCTOr9sh2XRXg7zeTnLhxd187ocLurZcOfJ
IK+LfD97tSjqvC2reZPl80n2Ip/nV8WsmLeDm6v97ODl8YuD7KfvB5O8hQH3
dvb2Bk0LD/6aT6s5fNLWy2JQLmr6rWn3dna+3tkbjPN2P2vayWBR7g+yrK3G
+9lnt0XzGfwxrmaLfNz6D5rbWV1cNuaDqm7DT2CCedWWl2UxgQ/nFT3V1qUf
Jl+211W9PxgCtODFs1H2XV0WDTzHoDhri8vLYu4+rWrY3VmJO22yg+/hE4Wj
fMgzFAXM8Kptq+EP+fV8eFrOr7KnuImyvd3PXizn5fia9jSBOT77avfLR1/z
HpfztoYnvi/qWT6/hY+KWV5OESi0jtElruMPDc81ApjAI8u63M+u23bR7D98
eHNzMzJfP9SdnY+yn4p6XtRua+fX1Sxv/Kf/WVtraR3DG1rHx2ztaJQ9L3K/
saNpWbX6Ee3qsGzGVXZ2C1Cc2W2cwlrbEv7Km6bIvnS7+CmfTsummE6LudvK
4Q/Drx7tPLZbOYPb9reingJew8eLa8LsjS8e72aPH2dffflV9jXg9Ybf6RSW
9IcxroW2J8t/MaJ15PWkqeZuEy/wo2KaHUbf8inBjMUUwJidVZftDdzI7Keq
ft34qWbj+gu8wH9o9NHROLcAVXiarx8OxhVsrLxYtnglHDib11X2rPzraz96
AR+NJvDRHwDS8FKznMLlHt+O5tPBvILzbcs3BY5w+t3h3tdfPZVfn+x9tSO/
Pv3y6Z7/9ZH8+uXOI33gyye7T+TXr3Ye66dfPXqqg3319df0wPHw2ciQqr/e
NMM31XJ8XdTBt/MCF3o5bP7WLobjpk68Wl+OcfyLstkflPPLaB9P9x7v6tr2
nujiv9r1vz7yy3y886X8+vXurn769d6jrxLTMnHNaZ7jo6Oj4Vc7e6Pdg1P8
G2ggU3f8IpMvsrNivIQjf1a8KcdFdjwBqos0rqYXlKLh70NGl+N5A8Ms2yKr
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
BfBlFwIZBgEcX/o48yBwxRlkA5U3SDSwkzvTdNmuSC14OtrtFnwaHHDK7hRt
WTomMvaLwlumqRdXkMSOs+pTvk9rnpnqw41LCdOWQ9Ij9rgNfF1BkoQ3b8fm
D4bKXFqdVKurZOFiuM3FrMjnjeuzZ6wb1XI6scGE3jbltbREAY65GiK5UkHi
YEkb61jUUyaMbpKIR4IgXaSTFl7VaH0bAD3bHXGdERRMomCm+2CCsT5Ob9Ec
uzfKjsWWk/aKe5MKSkFkcH4Ea2EoJpSjj18OF/VrKRop9NIGararG6ZXu9N/
JqjXAet9bGDXP3IcorVuDFGQPNFp9quBXqbwmci6GFu9dsfZrQhSPl/4jVaf
sbWFnXHMeQ55jVieZ7ycYv43C9WaxutqSrmeO22xaLTSZH4B0jw3XqfaSd79
GK6qg/OFdRwyDmkZD4601/g3UWACxFNNzdhQuBjgfS/j0Fhd/QqtPxG3H94M
Aop2gKrG42UNaL10jTTDa9v6rKw4RbUu8gZ1HJvCkhT8vLWSY0mixOJw2XWx
0Nz2XN9vC6S+bX3rWj71hb1/Gcd3ildGZvCVhCz/CVYZRkwyN7ItV5zulupe
pIAR/m8aVCW0YCdFyNNqDg6khh6DozqlOunIEqASHkce9NN8g/tFc4ALpzHn
iI4ukTg1atMBk9MipCRp5UMZ2X90qWh2R74ynH7DkX+7apMj+MMHcEcK+YwX
hcaxYxUU8Z4uZ1QqMp8QzxP4bgTvDKWMQBBv6IxeOCIaIyVsbyBWuZRd0Dev
SdoE+yyC69oDP/g4x/VsgbjYX2yTGTrIfhtg+i66u3QvU5/weWPQwuzXhKHR
u3Sd7aPjoPutYrjoRhveQxcZrANXCUpd9XKMtmlaUm4C9gAV0ZkOqCVhR8Gb
vGkSly8K8sFta6mAjqjviu/19ysmj2tS61U68UkogLXLdzxiSYKApmRX/+gj
DPNhZ0qEmY1IdMJHwr2HkfFp/043bCQq0xLs6zMTX0mpclFWljyfINkmXyvs
rZlO8Hm888gk+ZgsrZUlwxzaOHQp1bspRcNch7y19Fvpdvyp1VtvOunTcOOJ
EwruNnu9GR/RDxU4tppUt9a1ejCFdcq3O3q09dyb2iHoqJ/7mlc2yXJFc8dt
l2GYqFfjWzQvfEJ7gP7GveywPxnh0rk4QVJvaHjqiidUF+d+IocGsKVuUwIq
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
d+ECrpnQXlRLbIhC1hppgDoa/P/NurV3D8YBAA==

-->

</rfc>

