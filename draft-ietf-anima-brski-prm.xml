<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.5 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>asynchronous communication:</dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>IED:</dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
  <dt>synchronous communication:</dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support the communication between a pledge and a registrar via a registrar-agent.</t>

<t>At least the following properties are required by the voucher handling and the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID). This supports independence from the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE. In constraint environments it may provided based on COSE.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDeID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar agent LDevID certificates.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects on one or multiple pledges at performs may perform a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.richardson-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.1.4.1 |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.1.4.1 |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.1.4.3 |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.1.4.3 |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Representation of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the pledge-voucher-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the pledge-voucher-request.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent may use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and it's own LDevID(RegAgt) credentials of site domain.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request  objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendor/manufacturer and an it's own LDevID(Reg) credentials.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]        |            |
[registrar-agent done. ]              |            |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
[certification request handling registrar-agent]   |
[and site infrastructure]                          |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
This allows the registrar to distinguish between BRSKI (pledge-initiator-mode) and BRSKI-PRM (pledge-responder-mode). 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note, the authorization will be verified based on the agent-signed-data carried in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one of in the pledge-voucher-request.</t>

<t>The registrar can received request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The pledge-voucher-request Content-Type header field used for pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the Accept request-header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrars own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and the corresponding registrar-agent was authorized for involvement in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code is more appropriate, if the format of pledge-voucher-request is unknown.</t>

<t>If validation succeeds, the registrar will accept the pledge's request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The voucher request can be enhanced optionally with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the certificate or the certificate including the chain of the registrar-agent.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent proximity to issue the corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA by HTTP POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an Accept request-header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for data contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert. Either in the LDevID(RegAgt) EE certificate of registrar-voucher-request or of the prior-signed-voucher can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion, e.g.: "logged" or "verified"
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher response format is indicated by the Accept request-header field or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA responds the voucher to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> provide an additional signature of the voucher. 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the pledge-voucher-request in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor.</t>

<t>The registrar forwards the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object. The JWS object is signed with the pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the standard endpoint on the registrar cannot be used. EST requires to sent a raw PKCS#10 request to the simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The PER Content-Type header is: <spanx style="verb">application/jose</spanx>.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and in additional processing at the domain registrar as EST server as following.
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request as JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request with Content-Type header field "application/jose", it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's IDevID certificate of the x5c header field, is accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.
It will construct a registrar-enrollment-request (RER) by utilizing the enrollment protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This handling is out of scope for this document.</t>
</list></t>

<t>The registrar-agent sends the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code.
HTTP 406 error code is more appropriate, if the pledge-enrollment-request is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: "application/pkcs7-mime".</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Verify the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully.</t>
</list></t>

<t>When all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
When multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher-status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher-status-object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose" and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge verifies the LDevID certificate. 
When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge enroll-status object.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the freshly provided LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
 requestenroll             [THISRFC] supply PER to registrar
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request and in the IDevID certificate of the pledge.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.richardson-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <date day='1' month='December' year='2021'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-rfc8366bis-04'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-rfc8366bis-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
Q93HUfyzD0rev+jUMCBSpoDkbhuuDjtxYBnGu5sjRO4JOGNcQsI/6mcgBq9k
KzHz+LtwhO0uL7iAMa4A0G6zL1Yzh2JN5vBfrOB/KVZQrMUKwuu5mhPco1mC
0fpdoH1vnUXXJskahmVVivfdrgnOYnvmSEVs19iMFzrsGEy7fQCevb/xNoRF
QP46dci8xTax+8g6HtYCS7hqKfFISxwPrOkFTj3i/DgEGRYeZF9dz8I6NCQw
NFllITycqfdDVpXXCu9rV5U3xlb+TzjUkqryzur6v3ZV+fVf8n8Ext6H1nq/
x0zDoRYZP2Ud7IEzcY1urqnuL0WWNkv/qLqxe27d8uLpLUgpaNnBbwes+77U
byl+puziy7AGdEhS72UHJuHOUrW4DVBHGYlJPEcKyLca99OEfnBxZAsVDCxB
1spBBaGr1ncDTDssTT0vJOTo3uxkMT6o0DUJVqa+daqX8/IYh2V2FJoQoyiu
q4mxo3T2ZHLThuioG+K630Njk8X8LIIah3L22MM1qy1lvuhvde08GeLDnRTz
cmyCv5xJPLBlJCuUJXMLlhqpyGbNASBej8Mw/9klYStqChoUJpQG1sGxK8Rj
gqgwb7KLIvF1L4l4tLqgSshjv+GwWlmvVW08rmrNPwmsvd4utk7AiiYyPtnh
toko41M46x0FvYQPucCWURKVbWtHp89IBnnubJLZYxqZiqS6MlEEWhC1r2bl
uMSOVIyjnQoqojJh4zGfwI1uayDpjf1be+jl85bLsZZW5zSSUwKX6E2iN6ox
ahstEcE0D8oRLi+Hnd+pfVoXz9nCyHeGyHeceMgeBtl6v0H/847yux4tdkGQ
KSW9J1m1Q4iXUuHYSGNsqVfVVIhab2TZuuQwufx/EDXktSgtHPxjaWHxvrQw
CdnfiiIm6zGEGfxx9OQq0pi2PoVdXDu1p7rQ8FaiICBdnYj+rHxA4yrz1DrU
Gd77T0af07tdi0IPHmX7iBg5KJRoFXCtebQdin4L2n5vObpY7bd5GMXbtohS
am0YfbokJWcVSXkeb1Ak41kTdQn2sRhh/kCQwRgmDYzI/pGd1UWRPS/zyzq/
jrfQ4ncT/o5DSpuWis1NFkx2kvnnQXEBJ8k6m4C8Idvo1AmJpWXvtg0CMclU
4d7FxQYhWLiPePURWaTYvmcUu3eYj69Aup84d5t5i6V/0xScqd6/7r/6GvnD
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
AtaHUqFvzjQa/H+NbZlBZJgBAA==

-->

</rfc>

