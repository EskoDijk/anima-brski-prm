<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.13 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-04" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge. 
If the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) EE certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and the site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) EE certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) EE certificate, used to sign the data, is  still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates during bootstrapping is necessary as no trusted timestamp is available, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) EE certificate or the LDevID(RegAgt) EE certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The RVR <bcp14>SHOULD</bcp14> set the Accept header indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) EE certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It can be verified by the MASA that it was issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format is indicated by the Accept header field of the RVR or MASA <bcp14>SHOULD</bcp14> respond with the same format as the PVR was (default "JSON-in-JWS")
Specifically for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This request handling to the domain CA is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the PER is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with the HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID EE certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully, including revocation state of the certificate, validity, and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID EE certificate. 
The pledge <bcp14>MAY</bcp14> omit the revocation check as the EE LDevID certificate was freshly issued. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID EE certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID EE certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll status object.
In case the enroll status object indicates success the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll status object. In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID EE certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID, may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) EE certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) EE certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2963obx5Uo+h9P0Zv+YdImIJK62GacTGiKtpnowiHpONn+
fDxNoEl2BKCR7oYoRtI8y3mW82RnXatWVVeDoOQke2YPv8Qige66rFq17pfh
cDhoy3Za7GffnJ798Ti7Kdvr7GRaTK6KrJxnp0WzqOaTos6eV5Mi26SHhien
z7cG+cVFXbyW9/CjwaQaz/MZDDWp88t2WBbt5TCfl7N8eFE3r8rhop4Ndx4N
8rrI97OXi6LO27KaN1k+n2TP83l+VcyKeTu4udrPDl4cPz/IfvxuMMlbGHBv
Z29v0LTw4C/5tJrDJ229LAbloqbfmnZvZ+ernb3BOG/3s6adDBbl/iDL2mq8
n316WzSfwh/jarbIx63/oLmd1cVlYz6o6jb8BCaYV215WRYT+HBe0VNtXfph
8mV7XdX7gyFAC148G2Xf1mXRwHMMirO2uLws5u7TqobdnZW40yY7+A4+UTjK
hzxDUcAML9u2Gn6fX8+Hp+X8KnuCmyjb2/3s+XJejq9pTxOY49Mvd794+BXv
cTlva3jiu6Ke5fNb+KiY5eUUgULrGF3iOn7f8FwjgAk8sqzL/ey6bRfN/oMH
Nzc3I/P1A93Z+Sj7sajnRe22dn5dzfLGf/qv2lpL6xje0Do+ZGtHo+xZkfuN
HU3LqtWPaFeHZTOusrNbgOLMbuMU1tqW8FfeNEX2hdvFj/l0WjbFdFrM3VYO
vx9++RDQ32zlDG7b34t6CngNHy+uCbM3Pn+0mz16lH35xZfZV4DXG36nU1jS
78e4FtqeLP/5iNaR15OmmrtNPMePiml2GH3LpwQzFlMAY3ZWXbY3cCOzH6v6
VeOnmo3rz/EC/77RR0fj3AJU4Wm+fjCYV3A2bfm6wNt3+u3h3ldfPpFfH+99
uSO/PvniyZ7/9aH8+sXOQ33gi8e7j+XXL3ce6adfPnyig3351Vf0wPHw6ciQ
mb/eNMPX1XJ8XdTBt/OiHVfzy2Hz93YxHDd14tX6cozjX5TN/qCcX0b7eLL3
aFfXtvdYF//lrv/1oV/mo50v5Nevdnf106/2Hn6ZmJYJY07zHB8dHQ2/3Nkb
7R6c4t9Av5gy4xeZfJGdFeMlHNfT4nU5LrLjCVBMpE81vaDUCH8f8lEfzxsY
ZtkWWXUJmF2MkXzlUyK6/GcFN67JjuZX5bwo6oZeVrK7++Vw5wl90hRIORA0
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
owhmT/VLYZ+2vyRhyWjwcuGqiPWRQk2U6aZFxvazTSJ9fkQO47222WV33wWr
UW948BO2m0xSg+uj7PjS127bTllcUoa+C7YgX5Y1empt6XEp91bX+S0b36Sg
i2BpBfdQKnD01dbBdCsMk70AiNyUE/Lhr1s1doSRMqaTrG7JYwUtn+7KGnsN
1L0VJk3d9nWRSyoSAaFrtvRwjy6/C+S5e1FWWHU07xTIVulGd6ULpRydizuE
BXSCCoVkUxheKT2nJVqpG4IWr6Wx9NcR0E0iMbr1SEHeijD0nnQaD5z8BrSp
KOAs29A4qw0kjRtw66/wdxMbamLQtBfyimZXa/G8rEsUXeFYpQDhOaQK1Xpb
wUjjve6BCI1H+XtQAECbaL0mMLLbjrOPoPs5Vx08bYvy6uKYuGZJvTGo3UW0
HjnmRChsGGnI+aM3JXbckOpc+moSJeDQnpKkJtWW3aT8tGaiSdePsrVdH0zK
LXbALlvSdR69eYMTPIZ/irqG30gedT68MVXci6Iyvd3qCQLZeiczDmRSxHaN
bCQPm8S0TiBvb1bvIBERBnwGNGrPrued8mQ+oXJCUUKmdJKzazXLC90GNQ0h
z7RzVX+eqD8Rf/B58g921bsaHZ3qHFFpDv83/yH1ashd793znWod8bDvkM/6
IdVWEY/irqSOkm3+4fRwy79oIgLecYj9VuD4/yi4pIINErEHiSdcd5t3gwef
ecuBULbPHujQqJxncGnr2+44d03+Tgb5emh/PnCQYIzffeAgK9+4exCAlFbz
tzGjJtrTAe7rYfZaQ78+fM9SwHl4WvztX7Vn/ge2U3z8dkClxtCGj9nOf4aP
RH/e9cR/4hEqI8YjpDYRQZkZj/rhWgSJSVtK4uD9gP8T0I0hEI5IZ7/nCZJH
0uXu/dvP668EdmKQK/tVt+NXc89BOIpeLLK6m/sOotrba6L7HzaI+0joTQQr
Pv4PuV8/FW9aSh9jFnX89OcPGoVr6AOwQdJEhXb9URwtdsXhPWFegfjB0/8c
Suuu6dF9runQEpnso6+pH5cqSiXvyvqDfD00ZamG6wzytd1Ps+jS3n8Q8Jnj
jyX8kWyP6x+AvPYRhOVrO8i62/4VWYPt0hGnfknRApvVYdm+vSofLOpkr894
9A8Xdb72B/HhK/l6aJDvI7ZTfOx2/gFnK+fny13oJ1RYR1WBf6g4QCOYs/7V
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
tUb6aI4G/z/76VUPbr8BAA==

-->

</rfc>

