<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.25 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>
asynchronous communication:  </dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
authenticated self-contained object:  </dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>
CA:  </dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>
EE:  </dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>
on-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>
off-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>
PER:  </dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>
POP:  </dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>
POI:  </dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>
PVR:  </dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>
IED:  </dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>
RA:  </dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>
RER:  </dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>
RVR:  </dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
  <dt>
synchronous communication:  </dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support the communication between a pledge and a registrar via a registrar-agent.</t>

<t>At least the following properties are required by the voucher handling and the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID). This supports independence from the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE. In constraint environments it may provided based on COSE.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDeID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar agent LDevID certificates.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects on one or multiple pledges at performs may perform a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agent-proximity"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.richardson-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.1.4.1 |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.1.4.1 |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.1.4.3 |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.1.4.3 |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Example of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
}
]]></artwork></figure>

<t>If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained, they enable the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and it's own LDevID(RegAgt) credentials of site domain.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request  objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendor/manufacturer and an it's own LDevID(Reg) credentials.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]        |            |
[registrar-agent done. ]              |            |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
[certification request handling registrar-agent]   |
[and site infrastructure]                          |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
This allows the registrar to distinguish between BRSKI (pledge-initiator-mode) and BRSKI-PRM (pledge-responder-mode). 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note, the authorization will be verified based on the agent-signed-data carried in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one of in the pledge-voucher-request.</t>

<t>The registrar can received request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The pledge-voucher-request Content-Type header field used for pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the Accept request-header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrars own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and the corresponding registrar-agent was authorized for involvement in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code is more appropriate, if the format of pledge-voucher-request is unknown.</t>

<t>If validation succeeds, the registrar will accept the pledge's request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The voucher request can be enhanced optionally with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: May contain the certificate or certificate chain of the registrar-agent.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c or x5bag header objects.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue:
choice between x5c and x5bag has to be taken. If the pledge wants to verify the agent-signed-data, it needs to know where to finde the registrar agent certificate in the array. Currently it is placed on the first position. Does this rule out the use of x5bag?
*/</t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate. If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent proximity to issue the corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", ...]
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA by HTTP POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an Accept request-header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for data contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert. Either in the LDevID(RegAgt) EE certificate of registrar-voucher-request or of the prior-signed-voucher can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion, e.g.: "logged" or "verified"
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher response format is indicated by the Accept request-header field or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2022-01-04T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA responds the voucher to the registrar.
After receiving the voucher the registrar may evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.</t>

<t>The registrar forwards the voucher without any changes to the registrar-agent. 
The registrar <bcp14>MAY</bcp14> provide an additional signature of the voucher. 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).
Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: Further description/example of additional signature</t>

<t>*/</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object. The JWS object is signed with the pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the standard endpoint on the registrar cannot be used. EST requires to sent a raw PKCS#10 request to the simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The PER Content-Type header is: <spanx style="verb">application/jose</spanx>.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and in additional processing at the domain registrar as EST server as following.
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request as JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request with Content-Type header field "application/jose", it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's IDevID certificate of the x5c header field, is accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.
It will construct a registrar-enrollment-request (RER) by utilizing the enrollment protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This handling is out of scope for this document.</t>
</list></t>

<t>The registrar-agent sends the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code.
HTTP 406 error code is more appropriate, if the pledge-enrollment-request is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: "application/pkcs7-mime".</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: Further description/example of additional signature by registrar
- Sequence of validation:
  1. verify MASA Signature
  2. install contained trust anchor preliminary
  3. verify registrar signature on voucher response and also the registrar certificate and finally 
     accept received agent-provided-proximity-registrar-cert (ending the preliminary state)
         When multiple signatures are contained, the pledge <bcp14>MUST</bcp14> verify all successfully.
*/</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. According to resolution of issue #8 not needed*/</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
                  min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
                         It is defined as list to enable inclusion of further
                         certificates along the certificate chain if different 
                         issuing CAs have been used for the registrar-agent 
                         and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
 requestenroll             [THISRFC] supply PER to registrar
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request and in the IDevID certificate of the pledge.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-13.txt' type='TXT'/>
</reference>


<reference anchor='I-D.richardson-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <date day='1' month='December' year='2021'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-rfc8366bis-04'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-rfc8366bis-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAHmgAmIAA+2923YbR5Yo+I6vyEM/mLQJiKRk2WZdumiKtlnWhU3SdvXx
eKqTQJLMEoBEIxOkWJJ6nQ+ZWWu+ZT7lfMnsa8SOyEgApOSqXnMOV5VFAplx
2bFj3y/9fr/XlM242M++OT374Ti7LZvr7GRcjK6KrJxmp0U9q6ajYp69qEZF
tkkP9U9OX2z18ouLeXEj7+FHvVE1nOYTGGo0zy+bflk0l/18Wk7y/sW8fl32
Z/NJf2e3l8+LfD97NSvmeVNW0zrLp6PsRT7Nr4pJMW16t1f72cHL4xcH2c/f
9UZ5AwPu7ezt9eoGHvxrPq6m8EkzXxS9cjan3+pmb2fn65293jBv9rO6GfVm
5X4vy5pquJ99elfUn8Ifw2oyy4eN/6C+m8yLy9p8UM2b8BOYYFo15WVZjODD
aUVPNfPSD5Mvmutqvt/rA7TgxbNB9u28LGp4jkFx1hSXl8XUfVrNYXdnJe60
zg6+g08UjvIhz1AUMMOrpqn63+fX0/5pOb3KnuImyuZuP3uxmJbDa9rTCOb4
9KvdLx9/zXtcTJs5PPFdMZ/k0zv4qJjk5RiBQusYXOI6/lTzXAOACTyymJf7
2XXTzOr9R49ub28H5utHurPzQfZzMZ8Wc7e18+tqktf+03/W1hpaR/+W1vGQ
rR0NsudF7jd2NC6rRj+iXR2W9bDKzu4AihO7jVNYa1PCX3ldF9mXbhc/5+Nx
WRfjcTF1Wzn8vv/V450nditncNv+XszHgNfw8eyaMHvj8ye72ZMn2VdffpV9
DXi94Xc6hiX9aYhroe3J8l8MaB35fFRXU7eJF/hRMc4Oo2/5lGDGYgxgzM6q
y+YWbmT2czV/XfupJsP553iB/1Tro4NhbgGq8DRfP+pNKzibprwp8Padfnv4
dO/Jrv765dM9/+tj+fXLncc7+usXu1/Ir1/tPNFPv3r89Kn++mTnS/3166/p
2eP+s4EhM3+7rfs31WJ4XcyDb6dFM6yml/36782sP6zdl3MHGBlgfjnECS/K
er9XTi+j3ex9/ZWu5Yu9r/wKebHHR0dH/a929ga7B6f4N5AfJqz4RSZfZGfF
cAHQflbclMMiOx4BwUPyMqcXlJjg730+qeNpDcMsmiKrLgExiyFSn3xMNJP/
rODC1NnR9KqcFsW8ppeVau5+1d95Sp/UBV583BMPz+vFCyYL+7TX6/f7cGUR
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

-->

</rfc>

