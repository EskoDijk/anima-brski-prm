<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.21 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To enable the establishment of a trust relation between a pledge and the domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode also.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>
CA:  </dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>
RA:  </dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>
POP:  </dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>
POI:  </dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>
IED:  </dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>
on-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>
off-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>
asynchronous communication:  </dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
synchronous communication:  </dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
authenticated self-contained object:  </dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support to support the communication between a pledge and a registrar over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the considered application examples, this is not sufficient to provide data origin authentication and therefore needs to be bound to the existing credential of the pledge (IDevID) additionally.
This binding supports the authorization decision for the certification request through a proof of identity.
The binding of data origin authentication to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID).</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection from the pledge to the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to ensure reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM).
This allows independence from protection provided by the utilized transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges with the domain registrar are performed with the help of a registrar-agent component.
The registrar-agent may be an integrated functionality of a commissioning tool.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes the same logical components as BRSKI with the registrar-agent component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like Bluetooth or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects from one or multiple pledges at once and performs a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agent-proximity"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.richardson-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.
Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to create voucher request.
It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to create enrollment request.
It returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided voucher to pledge.
It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll response (certificate) to pledge.
It returns the pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate to the pledge to be used in the "agent-sign-cert" properties of the pledge-voucher-request.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data.
The registrar may include the LDevID(RegAgt) certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" properties of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing certificate data (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note, the optionally included agent-sign-cert data enables the pledge to verify at least the signature of the agent-signed-data.
It may not verify the agent-sign-cert itself due to missing issuing CA information.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll.
In the following the enrollment is described as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Verification of usage of ietf-ztp-types to convey the 
P10 in enrollment request. 
*/</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In this case it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to achieve proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
"know" its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledges is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The bootstrapping exchange between the registrar-agent and the domain registrar resembles the exchanges between the pledge and the domain registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own LDevID(RegAgt) EE credential of registrar domain.
It knows the address of the domain registrar through configuration or discovery by, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request   objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors / manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using the LDevID(RegAgt) of the registrar-agent instead of the IDevID of the pledge.
This allows the registrar to distinguish between pledge-initiator-mode and pledge-responder-mode. In pledge-responder-mode the registrar has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as defined in <xref target="RFC8995"/>. Specifically, the registrar will receive JOSE objects from the pledge for voucher-request and enrollment-request (instead of the objects for voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar with an HTTP-over-TLS POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The pledge-voucher-request Content-Type used in the pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>(see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the "Accept" header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain the own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not contained in the agent-sign-cert properties of the pledge-voucher-request, it must fetch from a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) certificate data.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials used to sign the data have been valid at signature creation time and that the corresponding registrar-agent was authorized to be involved in the bootstrapping process.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code to the registrar-agent.
If the pledge-voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JOSE object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the product-serial-number contained in the IDevID EE certificate of the pledge matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt) certificate data if MASA verification of agent-proximity is required to provide the assertion "agent-proximity".</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA with an HTTP-over-TLS POST at the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an "Accept" header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following additional processing <bcp14>SHALL</bcp14> be done for components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> be consistent with the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to be able to provide "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert, which can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion "logged" or "verified".<br />
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted Accept header fields or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the registrar.
After receiving the voucher the registrar may evaluate the voucher for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge's enrollment-request to the registrar.
Deviating from BRSKI the enrollment-request is not a raw PKCS#10 request.
As the registrar-agent is involved in the exchange, the PKCS#10 is contained in the JOSE object. The signature is created using the pledge's IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request to the registrar with an HTTP-over-TLS POST at the endpoint "/.well-known/est/simpleenroll".</t>

<t>The enrollment-request Content-Type is: <spanx style="verb">application/jose</spanx></t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
If the voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and results in additional processing at the domain registrar as EST server as following.
Note that the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content Type application/jose, it <bcp14>MUST</bcp14> verify the signature using the certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained in the pledge's IDevID certificate contained in the JOSE header as being accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JOSE body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the content type "application/pkcs7-mime".</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:
Communication between domain CA and registrar is of content
type "application/pkcs7-mime"
Communication between registrar, registrar-agent and further to the pledge
should be of content type "application/jose" . */</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-03.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-03 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID.
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='8' month='November' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-11.txt' type='TXT'/>
</reference>


<reference anchor='I-D.richardson-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <date day='1' month='December' year='2021'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-rfc8366bis-04'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-rfc8366bis-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Housekeeping: Removed already addressed open issues.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" in PVR/RVR, Note for sub-CA information to agent-signed-data, agent-sign-cert writings.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked up. Pledge is awake but registrar-agent is not available).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related open issues</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAL8VqmEAA+2921YkR5Yg+h5f4YMeEiQiEjJTKYlSqwuRSKIqLzQgqXp0
dKqdCAe8MgiPdvcAUansNR8ys9b5lvMp8yVnX822mZtHBKSqqufMsKqUEOFu
l23b9v0yHA4HbdlOi73s65PTPx5lt2V7lR1Pi8llkZWz7KRo5tVsUtTZq2pS
ZJv00PD45NXWID8/r4sbeQ8/Gkyq8Sy/hqEmdX7RDsuivRjms/I6H57Xzdty
OK+vhzu7g7wu8r3szbyo87asZk2WzybZq3yWXxbXxawd3F7uZfuvj17tZz9+
O5jkLQz4ZOfJ7qBp4cE/59NqBp+09aIYlPOafmvaJzs7X+w8GYzzdi9r2slg
Xu4NsqytxnvZo7uieQR/jKvreT5u/QfN3XVdXDTmg6puw09gglnVlhdlMYEP
ZxU91dalHyZftFdVvTcYArTgxdNR9k1dFg08x6A4bYuLi2LmPq1q2N1piTtt
sv1v4ROFo3zIMxQFzPCmbavhd/nVbHhSzi6z57iJsr3by14tZuX4ivY0gTke
fb772dMveI+LWVvDE98W9XU+u4OPiuu8nCJQaB2jC1zH7xueawQwgUcWdbmX
XbXtvNl7/Pj29nZkvn6sOzsbZT8W9ayo3dbOrqrrvPGf/qO21tI6hre0jods
7XCUvSxyv7HDaVm1+hHt6qBsxlV2egdQvLbbOIG1tiX8lTdNkX3mdvFjPp2W
TTGdFjO3lYPvhp8/3Xlmt3IKt+2vRT0FvIaP51eE2RufPNvNnj3LPv/s8+wL
wOsNv9MpLOn3Y1wLbU+W/2pE68jrSVPN3CZe4UfFNDuIvuVTghmLKYAxO60u
2lu4kdmPVf228VNdj+tP8AL/vtFHR+PcAlThab5+PJhVcDZteVPg7Tv55uD5
k2e7+utnz5/4X5/Kr5/tPN3RXz/d/VR+/XznmX76+dPnz/XXZzuf6a9ffEHP
Hg1fjAyZ+cttM7ypFuOrog6+nRXtuJpdDJu/tvPhuHFf1g4wMkB9McYJz8tm
b1DOLqLdPPnic13Lp08+9yvkxR4dHh4OP995MtrdP8G/gfwwYcUvMvkiOy3G
C4D2i+KmHBfZ0QQIHpKXml5QYoK/D/mkjmYNDLNoi6y6AMQsxkh98inRTP6z
ggvTZIezy3JWFHVDLyvV3P18uPOcPmkKvPi4Jx6e14sXTBb2aDAYDodwZRGb
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
5Z3fmdKLaNTEdgMoFfpy1qPB/wdxfYUQNGQBAA==

-->

</rfc>

