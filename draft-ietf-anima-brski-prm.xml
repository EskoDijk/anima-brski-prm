<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.5 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>asynchronous communication:</dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request</t>
  </dd>
  <dt>IED:</dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request</t>
  </dd>
  <dt>synchronous communication:</dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanisms in this draft presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support the communication between a pledge and a registrar via a registrar-agent.</t>

<t>At least the following properties are required by the voucher handling and the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID). This supports independence from the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE. In constraint environments it may provided based on COSE.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDeID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar agent LDevID certificates.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects on one or multiple pledges at performs may perform a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge through a verification of an additional signature of the returned voucher by the registrar if contained (optional feature).</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.1.4.1 |
| Returns                |                            |         |
| pledge-voucher-request |                            |         |
++------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.1.4.1 |
| Returns pledge-        |                            |         |
| enrollment-request     |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.1.4.3 |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.1.4.3 |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            |         |
| pledge (OPTIONAL)      |                            |         |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the pledge-voucher-request. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the pledge-voucher-request.
The registrar includes the LDevID(RegAgt) EE certificate information into the registrar-voucher-request if the pledge-voucher-requests requests the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt auth+authz?]  |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a pledge-voucher-request is depicted in the following figure:</t>

<figure title="Representation of trigger to create pledge-voucher-request" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the pledge-voucher-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the pledge-voucher-request.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a pledge-enrollment-request" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent may use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and it's own LDevID(RegAgt) credentials of site domain.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request  objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendor/manufacturer and an it's own LDevID(Reg) credentials.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]        |            |
[registrar-agent done. ]              |            |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |          [Reg-Agt auth+authz?]  |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
[certification request handling registrar-agent]   |
[and site infrastructure]                          |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
This allows the registrar to distinguish between BRSKI (pledge-initiator-mode) and BRSKI-PRM (pledge-responder-mode). 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to connect to the registrar based on the LDevID(RegAgt). Note, the authorization will be verified based on the agent-signed-data carried in the pledge-voucher-request. As short-lived certificates are recommended for the registrar-agent, the LDevID(RegAgt) EE certificate used in the TLS handshake may be newer than the one of in the pledge-voucher-request.</t>

<t>The registrar can received request objects in different forms as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The pledge-voucher-request Content-Type header field used for pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the Accept request-header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrars own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the pledge-voucher-request, it must be fetched from a repository by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials (LDevID(ReAgt) EE certificate and optionally the certificate chain), used to sign the data, have been valid at signature creation time and the corresponding registrar-agent was authorized for involvement in the bootstrapping process. 
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate and perform this verification, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code is more appropriate, if the format of pledge-voucher-request is unknown.</t>

<t>If validation succeeds, the registrar will accept the pledge's request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the pledge-voucher-request provided by the registrar-agent.</t>
</list></t>

<t>The voucher request can be enhanced optionally with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the certificate or the certificate including the chain of the registrar-agent.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the list it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for the verification of agent proximity to issue the corresponding assertion "agent-proximity". If the agent-sign-cert is not contained in the registrar-voucher-request, it is contained in the prior-signed-voucher from the pledge.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA by HTTP POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an Accept request-header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for data contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert. Either in the LDevID(RegAgt) EE certificate of registrar-voucher-request or of the prior-signed-voucher can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion, e.g.: "logged" or "verified"
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert. 
As this field is defined as array, it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher response format is indicated by the Accept request-header field or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA responds the voucher to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> provide an additional signature of the voucher. 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the pledge-voucher-request in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor.</t>

<t>The registrar forwards the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge-enrollment-request (PER) to the registrar.
Deviating from BRSKI the pledge-enrollment-request is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object. The JWS object is signed with the pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the standard endpoint on the registrar cannot be used. EST requires to sent a raw PKCS#10 request to the simpleenroll endpoint. This document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. Therefore a new endpoint for the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The PER Content-Type header is: <spanx style="verb">application/jose</spanx>.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and in additional processing at the domain registrar as EST server as following.
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided pledge-voucher-request as JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a pledge-enrollment-request with Content-Type header field "application/jose", it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's IDevID certificate of the x5c header field, is accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.
It will construct a registrar-enrollment-request (RER) by utilizing the enrollment protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This handling is out of scope for this document.</t>
</list></t>

<t>The registrar-agent sends the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code.
HTTP 406 error code is more appropriate, if the pledge-enrollment-request is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: "application/pkcs7-mime".</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Verify the registrar certificate received in the agent-provided-proximity-registrar-cert in the voucher request successfully.</t>
</list></t>

<t>When all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
When multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher-status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher-status-object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose" and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge verifies the LDevID certificate. 
When an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge enroll-status object.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the freshly provided LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-12-16.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2022 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-12-16 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      refine "voucher/expires-on" {
        mandatory false;
         description
          "An expires-on field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
     }
      refine "voucher/pinned-domain-cert" {
        mandatory false;
        description
          "A pinned-domain-cert field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/last-renewal-date" {
        description
          "A last-renewal-date field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/domain-cert-revocation-checks" {
        description
          "The domain-cert-revocation-checks field is not valid in a
           voucher-request, and any occurrence MUST be ignored.";
      }
      refine "voucher/assertion" {
        mandatory false;
        description
          "Any assertion included in registrar voucher-requests
           SHOULD be ignored by the MASA.";
      }
     
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
        min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
          It is defined as list to enable inclusion of further
          certificates along the certificate chain if different 
          issuing CAs have been used for the registrar-agent 
          and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
 requestenroll             [THISRFC] supply PER to registrar
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request and in the IDevID certificate of the pledge.
Moreover, the registrar verifies the authorization of the registrar agent to deliver pledge-voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in this request.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
o8H/B1WlSW5YmAEA

-->

</rfc>

