<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.10 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-00" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to the bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping 
in domains featuring no or only timely limited connectivity between
the pledge and the domain registrar. This specifically targets situations, 
in which the interaction model changes from a pledge-initiator-mode as 
in BRSKI to a pledge-responder-mode. To support this functionality BRSKI-PRM
introduces with a registrar-agent a new component, which facilitates the 
communication between pledge and registrar during the bootstrapping. 
To support the establishment of a the trust relation between the pledge 
and the domain registrar, BRSKI-PRM relies on the exchange of authenticated 
self-contained objects (signature-wrapped objects). 
The defined approach is agnostic regarding the utilized enrollment
protocol, employed by the registrar to communicate with the CA.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch 
(automated) bootstrapping of devices (pledges) in a (customer) site domain. 
This includes the discovery of network elements in the target domain, 
time synchronization, and the exchange of security information necessary 
to establish trust between a pledge and the domain. Security information 
about the target domain, specifically the target domain certificate, 
is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>. These 
vouchers are signed objects, which are provided via the domain registrar 
to the pledge and originate from a Manufacturer’s Authorized Signing 
Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the 
bootstrapping and is the initiator of the bootstrapping. In industrial 
environments the pledge may behave as a server and thus does not initiate 
the bootstrapping with the domain registrar. In this scenarios it is expected 
that the pledge will be triggered to generate request objects to be 
bootstrapped in the registrar’s domain. For this, an additional component 
is introduced acting as an agent for the domain registrar (registrar-agent) 
towards the pledge. This may be a functionality of a commissioning tool or 
it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be usable also for a pledge in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the 
communication between the pledge and the registrar, when the pledge is
in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of 
arbitrary transport means between the pledge and the domain registrar, 
by keeping the registrar-agent in the communication path. 
Examples may be connectivity via IP based networks (wired or wireless) 
but also connectivity via Bluetooth or NFC between the pledge and the 
registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain specific device certificates. 
EST in turn relies on a binding of the certification request to an 
underlying TLS connection between the EST client and the EST server. 
According to BRSKI the domain registrar acts as EST server and is also 
acting as registration authority (RA).</t>

<t>To be done:
* include reasoning for not using TLS (IDevID does not contain SAN, 
  TLS server flag) between the pledge and the registrar-agent.
* Enhancements to EST state machine necessary to process 
  self-contained objects on the registrar-agent and domain-registrar
* accepting</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>The solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
in situation, in which the pledge acts as a server and only answers 
specific requests.</t>

<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.</t>

<t>Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to a domain registrar 
may be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the request and response messages to 
support the communication over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples in scope for certification 
requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
</list></t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To BRSKI wirh pledge in responder mode, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the use case.
The pledge-responder-mode) allows delegated bootstrapping using a 
registrar-agent instead a direct connection from the pledge to the 
domain registrar. The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and responds to 
requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-PRM relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2" title="Pledge-responder-mode: Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar this approach relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-PRM). This allows independence of a 
potential protection provided by the used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-PRM   |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to BRSKI the pledge acts as a server component. It is triggered 
by the registrar-agent for the generation of pledge-voucher-request and 
pledge-enrollment-request objects as well as for the processing of the 
response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-PRM, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request-prm:agent-signed-data element
(defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request-prm:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request-prm:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module ietf-ztp-types with the grouping for csr-grouping for 
the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. In this case it MUST sign it additionally with its IDevID 
credential to achieve proof-of-identity bound to the PKCS#10 as 
described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certification request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional 
parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang" title="Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-15.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-19 {
    description
     "Initial version";
    reference
     "RFC XXXX: VBRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
    
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired voucher and enrollment responses by Registrar-agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of registrar-agent credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='24' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-08.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-internal-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from 
draft-ietf-anima-brski-async-enroll-03 to this document 
This required changes and adaptations in several sections to remove 
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="voucher-request-prm-yang"/> as well as in the 
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to 
to allow better listing of voucher related extensions; aligned with 
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the 
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not 
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAFdcaWEAA+2961okx7Uo+D+fIjf6IbCoaqAvkrC3txGNJOy+sBtkeR8d
jb+kKoF0V1XWzswC4Vbv7zzIme+bZ5lHOU8y6xqxIjKygG75MjOHz1ZDVWZc
VqxY98toNMrarlhM/1zM6kW5n3fNqsyqZUO/td3ezs6XO3vZtJ4sijl8PW2K
i25Uld3FqFhU82J03rRvq9GymY92drJJ0e3nbTfNltV+luddPdnPP70t20/h
j0k9XxaTzn/Q3s6b8qI1H9RNF34C61jUXXVRlVP4cFHTU11T+WG6qpvBsr56
c/qH4/ym6q7yk1k5vSzzapG/KdtlvZiWTf6ynpb5Jj00Onnzcisrzs+b8lre
w4+yoimL/fz1smyKrqoXbQ4wyV8Wi+KynJeLLru53M8PXh2/PMi//yabFh1M
urezt5sVq+6qbvazEcwIKz8d5183VdnCQhlgp115cVEu3Kd1AwOdVjhomx98
A5/oWuRD3mJZwhZfd109+ra4WozeVIvL/BlCsepu9/OXq0U1uYI/m/ISFgv7
KK6LpioIzFOY9dMvdj9//CWDfbXoGnjnm7KZF4tb+KicF9UMz4lWNr7Alf2u
5dnHcEzwyKqp9vOrrlu2+48e3dzcjM3Xj3SvZ+P8+7JZlI3b7NlVPS9a/+k/
z2Y7Wtnohlb2IZs9GucvysJv9WhW1Z1+RPs8rNpJnZ/eAlzndmNvYPVdBX8V
bVvmn7t9fV/MZlVbzmblwm3l8NvRF493ntitnAJW/7VsZoCP8PHyim7pxmdP
dvMnT/IvPv8i/xLu6Ibf6QyW9LsJroW2J8t/OaZ1FM20rRduEy/xo3KWH0bf
8rnBjOUMwJif1hfdDVyQ/Pu6edv6qeaT5jMkBb9r9dHxpLAAVXiarx9lixrO
pquuSyQRb74+fLb3ZHc/z+WPz5/t7btfH8uvn+883tFfn+4+lV+/2Hmin37x
+Nkz/fXJzuf665df0rPHo+djQ7L+ctOOruvV5Kpsgm8XZTepFxej9q/dcjRp
4ctqcREtdu/LL3SiJ3u7O/7XXfn16d7ne+7XL/SBp8+e7gVzzYr5sh3Nqsur
7qbE/44m8yWQ0fqimpWJJ/Hb1RLpTuu27Hf/xZdP9B1AKIR2Myom5WhSF8tR
2XajGtCh4XGPDkfP9h4/3R19iX8CkWYK+il8kdMX+Sg/qeGiAIEmVM7njgoS
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
a0KrJtYnRqnQl74cZ/8POlv7si9fAQA=

-->

</rfc>

