<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.16 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with HTTP 40 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.
If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PER.
Error codes <bcp14>MAY</bcp14> be used:
* 400: if the pledge detected an error in the format of the request or it's not valid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.
* 403: if the pledge detected that parameter (if provided) from the trigger message to create the PER were not valid.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is necessary to ensure that the MASA is able to verify the RVR. 
How the MASA will get the domain CA certificate is out of scope of this document.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP error code 406 as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ],
          "typ": "voucher-jws+json"
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Voucher successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Enrollment response successfully processed",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge bootstrapping-status</name>

<t>The following assumes that a registrar-agent may need to query the bootstrapping-status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to supply bootstrapping-status data.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge).</t>
</list></t>

<figure title="Bootstrapping-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                               +-----------+
| Pledge |                               | Registrar-|
|        |                               | Agent     |
|        |                               | (RegAgt)  |
+--------+                               +-----------+
    |                                          |
    |<----- bootstrapping-status request ------|
    |                                          |
    |------ bootstrapping-status response ---->| 
    |                                          |
]]></artwork></figure>

<t>The registrar-agent requests the pledge bootstrapping-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-bootstrap-status"</t>

<t>The registrar-agent request Content-Type header for pledge bootstrapping-status is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the type of request, the time and date the request is created, and the serial-number of the pledge contacted as shown in <xref target="stat_req"/>. 
The bootstrapping-status request is signed using the LDevID(RegAgt) credential.</t>

<t>TODO: JWS syntax check; potentially YANG or CDDL definition</t>

<figure title="Representation of Registrar-agent request of pledge bootstrapping-status" anchor="stat_req"><artwork align="left"><![CDATA[
{
  "payload": {
      "reason": "bootstrapping-status",
      "created-on": "2022-08-12T02:37:39.235Z",
      "serial-number": "pledge-callee4711"
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
        "typ": "TODO?"
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>If the pledge receives the bootstrapping-status request message it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge bootstrapping-status response Content-Type header is (TODO: may be more specific "typ"): <spanx style="verb">application/jose+json</spanx>. 
It contains bootstrapping-status information as shown in <xref target="stat_req_res"/>. 
The bootstrapping-status response is signed depending on the bootstrapping state of the pledge</t>

<figure title="Representation of pledge bootstrapping-status response" anchor="stat_req_res"><artwork align="left"><![CDATA[
{
  "payload": {
    "enum": ['factory-default', 'vouchered', 'enrolled']
  },
  "signatures": [{
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ],
        "typ": "jose+json, TODO: may be more specific"
      },
      "signature": "base64encodedvalue=="
    }]
}
]]></artwork></figure>

<t>Different cases may occur, which can be reflected in the enum (TODO: check CDDL):</t>

<t><list style="symbols">
  <t>(0): pledge has not been bootstrapped: "factory-default", the pledge signs the response message using its IDevID(Pledge).</t>
  <t>(1): pledge has processed the voucher exchange successfully: "vouchered", the pledge signs the response message using its IDevID(Pledge).</t>
  <t>(2): pledge has processed the enrollment exchange successfully: "enrolled", the pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>TODO: check handling of potentials errors of previous "voucher status" and "enroll status" objects/information.
This could be handled by sending the previous "voucher status" or "enroll status" objects again, or embedding into the new "bootstrapping-status" object?</t>

<t>In case (0) the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases (1) and (2) the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 pledge-bootstrap-status    query pledge bootstrapping status  [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
DVZzNQe8SeisRympU2y34KVL77UVAi5xcMvsVfFs43tpttkdon0FyTQHINTO
I9HpJ4mvRfWKcHotiHJGSTEYBxDdRliCATU53QplL0OO2GoE+2E2Q7cUCJIn
+TV8sx/C8CBviHTgV6DRZfE1vJAOr1HHkRwuxqCV2byQxzOc57nIQsbj4LwS
Tv4A1LqEvWNbKDIThgkvlfhUK79Og4P4w7VinaheRNFMLF6X956QdYuj8WZp
TtWIazXKdQeVqoYamjCLYWEM/pWDYnNVL4hpKZwF1aovF2b5/sUmnHaX21bt
wbB5EuZjMnI2hBbIdYdE7IMbP1snEZ5blJ4qrcDRv9aCwI3VZSO7LGokKSuF
b4r+BHo02wcthSlgWS+pNHhCuTHUV7dL2oaIKlyREbR/tX8wdKq1Ezz55UmA
CKtL4M9wX+g2AqAEzkt/rTkZmWTLXInuX88u3nUmb95d3IzO2+nFu6NiOOnf
jc77H0f7zdvhZOP5aPKi+X5znAzjo+fw/Hi41U6G085ssPnsl1p8Er8eX2z2
5/z0i2fheXM2enUdv9l//fHi3evZ+/PbYjDtF+8n/fujD2l8fNC6P/74ttn+
MHx20j3Kjybbv9RuBpN2gt+2z1/sD7bObs6mo3+094vr3lm69TZpZf3z2cbF
x40XR/Ft/H7rdfL+XSe52G/eDGBNRx+Obo8/HP1SK44PhsVx7/XZ8cHb5+2D
q+ft3vs5/O/jeYzzHE4vzrc33rzbux9sXcwuXvav+ffxbHCebETd5v3F+eiX
2my41bl/D3B4v9m/H+3D+NfN192zo43wun3wtp/MLjYOt7pnr/cuNpJXb/vj
i/bH1/H7ZNZ+e/7i1duN9l2n2f6l1m4fJPtvz5oHvbNOP2r1n7/tv96/2Ng+
f3t9eNM7a2fHvX5nkFw8f98fNgcvjz/23o1b/dbh8dvJ6KR//Xrv/Ubzl9p+
53r79qI1ghE6z9+ebcsR2r2z1/nZ5O7DcfN166zf2bs4u9g6fpW0O63+Nsz4
YbSx/Y9Or9Put2a/1Mad6fA2um62Ou/giZftrd5kdthuNc+6k8N256DzrPNu
tnd2/XraA5jCLtpvN/O7dv9w3p/Oxv2P/fz9R9wRrOHs7dmdXMMHWMPL3nTv
utPsP+tsdPb6G2KEsyaMutcdTV6/60z34kFrlp9/eJ1Hk84vtaPuZPwhvH4d
wtvtzsbr7eHZqNfrvd1+ez467Gy0D9Tf70aH3Vbrtnt2uP92Auu5zm/C3nB7
0Hz9Sy3rfuxfAEa9vfg47p81j5692ep/PD7vvO2fJ2G31dwYbBa9i1eHb2D1
k0Ey+vh28jYb9l8ft5uj7sXkIulvFr/UtgFv48HGbNI9v8tH715/CHtHzdHm
dhqevTh/uzH6x8W72X77rLl/3BrtHff7193ksNPfaO6fnY0O3m614fQPf6n1
O9evt2A3+xebo3s4vUP4u/N+o3PUaR2e8mmOOyctwJcP40M8u7cbRxuwux7g
UqufHN0C5H+pHXbejd62W8n1+83m+WBy+L73Ye/D4Oxiu3c47iJ+nL3rfzie
3OXvk9E53NTt4/Pk+u3HfvM8Gffebozn3cndL7UQnnh+0Rr/FL5sz457e+F5
69ltb3LdjCaH7/rTTgjweN47HP103Lor2ud317DGN7DG6fB8nIXXL96e4Y5a
cBYnAPfW2+uLvfDs9bPBy85+eDi7O271N9tns+PjZO++v9HeiPrHm2Grc9H/
eLj9duOHm7PJYfP9dO+gjbg77p51pt3z8V7vsP3T+8noeDAZpe8nAIePe9fv
m6OX/f7FzZvN0aveh90b4BnPu0BazzZv70PAyG5/nB134U4b97Y9u9jcxlt/
Dbd/jNTi4l3y06iZvB+8asfH1xdZ93x2E/Zn7wet4gNg3kX/fOOu14c7/XJ4
8DrsTDqn7z8c3p732+/PJrO4n6Qb59cX1/3NfnF23Wmfv+z8433S2TsGCF+8
LOLOxqzZ74+74XWziF71f6ldDHqH79739p6dH/aL8GXRPT68uO0fHCF0z8Ot
WW/wbhz2Ny5+GjZHGdzn68HZ7Pas2QnhnmWDg/ZZf2vvl9pPF62zu06///7s
ens8eLV33j/sd/vX29nxWf8iSmanZ9f98+N+JztLXp/AmmGE8Ul38jprv2tf
HH84/Pj+DHb0U6fVfN+fFOfRNaxh8y6FOfon7/Z6sAvAuH7eTnCEi3b48Wzz
fDo7hxGAIvRfh+9Gs/cfX+eDCWBd0fmwd30O9/P9VvIaqPrH4WbyoduabQLN
OQ8nnVcww+tw8mIGWJZ3N9tFJxn3Yba37/v9W0DA2/AVrOXDcf/1+UWr0w37
7cPudfts8G7v5v35XQgnnF0cXpz3Wxdhf3KXvj/vnPeSUR+o0nl/Y9Ru99vv
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
17vZT8CBolHhVd5WPIDjOpP5cksHInzOAo5/MV9ObFrDBD2626YHazBsiT20
cttfpK1oXl57RmrGsmjHOiSg1Q3krCiCWbFKjGwAWvg0lIU1HI01GaTrtI+Z
HsWi2/Jbwx3i3XO8KObM7Kw9rutM5RKgq2feraQeaykbF7TnWr/5MnznhEVd
BvmiCPLbcxXzm2s6VyFG1sW5CiigIugLh3y7OVnx6lwFFO8PHA6vj4b/8eEb
h8P7ZTc4O1cBVKqONIMNwLYLdTzdvOFDsEnK6IOBgPW5GqLb3LLTQ5dUVxfj
Q7uN6BzFAVGO9tTZfJRZwFy/OTSfaPptfECcwox3KKKCV+0QKfQ2s1g3MJte
eN4wjwZgKH2wahd2c2ieEHAd3Kc5sA7rqw6sc2cEnJPx3OqLBUAPn4DVS9UL
mQog03M4p9MkZWeY72Jpb5qjUQviMT9yNGpoTKzIGI6inegvd2CMZco7o9jK
gNHeivaIdjueZt35oAmpnpX+rFsyvoPlQsXY1vOQt7dcdkaBKB5Hvd+3Q41Z
iJ8rxI6XcDFuS77ZxYiRrA3uKLmW8nhWPATGTSdspfc1xpDv0M4Y83gIDu1l
POpx6ZmEsoHyb0TaOx5ktX8rW+l5QMpXBwDr439Oi47/Qfos5OhuH9jRLjGs
W5982/YsddXBxp/nK4xDPJYsiEdCpmBlXDNbgZE98IV5kNxzWD975qbuJYtu
CDvi46J7n9K4jMCQCybudq7otsHYn+8P3dux5d3FgbOLWt2R7B3j0raKS2Jz
eY3DHx/G24jvdL+3Ob/I4S9e4/DHh3cvcviL1zgAIRCXTDB1aCwNnC6Ah+Vl
dY0Db/zkwkve8dQ/PnzPV3/UU+HTZ7761zgeookR6+yOTqtkLLGGB5Zn9y6d
qQ/GK9Hy7gLjbisEnq7Bps0x1JF4QEx8gshuu7fR+EH3ZjIQQ39eTFO0Jb0T
5t2KFdsXjNZTBD3om2nHFcXDuJ9SVJ9BbXVCWfpoq4m2OvUpG+t0ygacyhuK
QtkudAADpphRfbiVm+AS1vYF46LO3PhceMNZtzmMu+Ai7VXH/egp1YE/Nn4w
yrGKR/imZ3jVkT/8f2nrT+/xHIz8/RBIT9FNHb7TJpZ5uNcKFyM79EfwgFs2
HYg0hPcPUpntuP7ZgGVO0QN3qG9foiKKmF0yb35z68N2wXIODliydweNtnNb
xXI4421hgb9I59q//boKjN1S6MLAvz67pUPxlhnZHkvpUhV1ogfeeHam5y+d
6LmsdR9xzreb2UsSfrnbTFjyj5sBf87acprstmX08Ln/uRCfR57rh/rt5Po5
MTAl8cBZ9eL5x8HdKvr7x+HXZzjqvCPMvqO3QRY+S3vwvXM8x1McP3KU508O
4HzzNM/5cZ7TN+vLlqtTO83t/dVBmt/U1Vmn16k7qf7izUJvroh+5z1//pr/
/9cNvXvu5HtXC9WnTMAG/pWrheqLhaBS/5WrheqMA1jkRc7Bm33eq5zDolsm
8+pqksTQs1i2X10edB514K1nceefjTqUBfuT64N+IOqgR2dx55+NOlCGP8gQ
vxd10JZvMMS/EnUwumdx55+JOuELnQz2Ik9072PpGJGW8eF0Yz/oFo/naZGY
WX8SWJHf6rYoPxO2vAAKiXZV9Jip93xea5sRnTup1M2fRJzeTW+oMk1gS2fX
DTE7ZQL24vyo+nknd5UO/Jwu8kFbujGprH7G3P3GCcy0x81C48ZXLZwVI2ln
YbAQyzECnpd/XYVTRJr9zVwUhRkXppGo6xcQI/ruQvhDLVsLsLKJzHpekHFp
6iJclHeD3uYxsbORGEWPieWYrh5ZY87yULdadP3C+8fEf1DEbCoRYxeXIkaL
enHurShZ8g0R85cOh//xoTke/i8cDp/RtmpIDrpli27delSOUzDHNXU70clV
cw3ObZFjMdqcZ+bbgAMYdXYNUg8w2IB0wJgF6PUSvWAih6MUlaRoHI2Z4qIN
PLjrgArjjV04oadoCyOXaKVG2hz2rr/Bpq5WAoiiOJ2zUTC/iaVZLESgbgZS
x80n3HEh9WmDKSeCzEBkvCOR8asbr44/0w1Yqda5HXIrGB6iKWCtm0gBSh61
vHkBGescBhZJaFmMV55NG5/TTmTro/HB6WNEbdFKpzEChDvvONL8eghaEDt6
pA/67p4vonKYp4MYhkXCIe35ZqYN56xkuYjlghJ+N20fs/knt26dpc8AW+/e
peAHbCil00773sG3Pu/xpDaIFy1FgnaCera8TmRuD67JGAFOx0ptbzCQ+i0I
17AS+5EDufhyr0WPruZwBCGXLbzML0ofM5t7rfIxHXnPeCoobgkRhjmyfMM5
wOlLAUcZ+dtp2i+2FNZOQVJ/SlvuKl54FJwo1b2O9hRiRODOuEEUTnuXkfWt
p1LOxH24+MfYfygmwTI7+Puv/eTlH2m4O1wvy3zh3He2/4jiB3u1tPeg2ofu
2hh8yX+/XY1uDuFURivB/h5e92/Hu/BjbK7MZPr5O4zsSMQq2vI+E3vNor5B
vYgjqRs1++A0y5Wqz9erCqWoqoJXZjrdUH1gPJMKJtBFqJvJf139989gKv/I
qi+BwD2ulvgmfZnuAi83+JfKpje3WH/4YBG3UmVD01X8ZXOlta8+/q+LX3T+
/cOHf7u6qyqup6dLKukqzPXkRdGr5k7ni8t1j/db/g++f1tXLqLLUpuiKOoR
36tPMV3Q9db731TdocnVz63O6zecF49Rt/Oqei6vb9Klqq3HL1Uv/MekVO16
XD5WzaDiFpuq8u9FBY/LC+PrQYjXdD1rSjUpmtat0TxDvern9g0NWNXkjnZ5
Vbo6e76q7/OkM9LV3emTi4oGzX2vp8e0/14R4OpS5VMFo1cXONfPXMfz87ud
f21uE+99Pj2xpf92NS7i6o7m6kj3eDlP1CTVc0KXltOt++jtuJiiYX+rShHW
lUfVNdNXv6wmv56aftZi483zT3x9MZmkr2sW1HPesP51fQ29qvWwVp5UHzvf
o2GbcVUHIH6GH1wVy6+v1MLpWPuSWrmdUlHgTf3edLUsz6sI0DtWk5dlPnlz
BTfd4X3qUutNl86ess7oEtnmTv3mzm66cPzsPuDp169UJRvmEFO5k+oyY/Uh
ujiA7uBVlwes94txtlouyDB+u9pPqDb1G09tvfbUdu2p1dW0rLqaFjZ3ur62
oMolVFChtljD+Pjztd7U3aZrZ+kSAkzFpKyGbLGZfF3Rxc548FkV46rKLbl0
dRs93fpc1XVtyp28Kq5WjUFT6Pu8iAoVMaDnkAzcfKLR/pxWOFMW8aIydHXr
LlVkrqt9/dQgyE9n15Sf3WF9BAz9+vi8euJq11GT9/pKe7J3eF1BxVnpRgMq
H2yqf9R151O6OHhC9QJOz//78fnx6YLo6ukLQtyCbn5vxuJYBICQmCa2ecrv
l6N7vIj6Eu3Wz+XHyeKFUK75IgENm8yXdCkFwqa6dWK3ry7VBiRWIai+Gjq+
GFaKKZvJ7jRUhnbsynkhXsxQXYWn97kqVnRE77Kgm5ZrGKDr4Yv6vv6qwldV
Y/1VGaOTfzdYdar88y1cb/3P//xHdXd91QUKIcfCByegPrbrl289yKhH4p0Y
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
SNsG5uAKqqg3DeY0eW48s84IXeT+GwPquY+nxqtcOL0FPDgDgtD/qk+cqT38
+FuDFpUtNBn6um8NOi0mVCElhjlc+NZxNmvoPFuiP6vhXeX+VWaeUuSbyXFi
1bCcLd1/uvKJaEwW72xtoWUIytNBo6q1HgTOZFpltNV2gHrllVbRdrWKPhZj
/3Rc/I1VXXoEl+m5LFmfZyJOlPEivlOu5egUalKVhK0Kfd/cdCgRT/pFVwTg
ZTlFF5bPSbWivKo3h6yUFR/3koynk/Xlykac0MvGFbi/XtlIJhX0YlzW5Ymd
1XNULTLTxpFloczl03EfRLPrgnaTXKbmzvJBeIFKCcaNUEjVMFZvPzGK0xz/
djRiGpvTdFWlcppWXHrF+o0R0DL0ce/s0VRowROTu/sukCnpfrGnRQH8mYpS
U7SeFGr1itYT66ef+OkkVSmhi080MU+N+GnjTzNm23pPj4q/5K8nUVcv728m
R6ZKv6mfV++SPNonIdJx4fLTq+CziOd1Ikhp1PoR9b602rkIl64IvuICnV5U
6EVJqeP+Nczjul6wqZ5Q0bp6A9tpOVDlxVfjbEotpyT6UfU12NaskJ6QlKyl
GgY84csaX716vL97l65X6+BHyKuyRuq735mIIwUn4bdIljD2Y/K2Zvax2roz
XdebKZQRL4tm7bj6xCXzOk96XgTS2i9OUaaK1icIX5NII8VRaT1lR5fOpL57
6nhVxgoDWTQDXWPzb1V64igqFY2pmIR66cdH5p5e/Ok7DqDSLnWu5eQAl7BB
uKM2nDWJ00KtMNdbmtW6rwLWu2oZmtpWrTJ8unzqKzy+sJZJcdqYdUwCqImr
RlHx5/Nv1PriqLYuJF9FQGsMf2ev9dl400wrYP1yCgBKdZ1FovOI0IDS+m3o
+R7QKLnyRqM0Sw2/Xa3LyVj5E1U0U8uBtAuhNvBlvbijknxHfr5dKp84N4/G
P9avdE8t+IrJceybTcfL5/V5Bq1CmOb4ZUWQ4SDVGyb1hFfveA03b2LfWKUx
GjqQTKrtUZVEpJWu8ybMSbasmgJplKNRm3WI3y03x7klolQtgR3dkLh79cjV
KThXM3sOaWVcL92pruHTVrXSpx/l1SljdBmK/szyGqb5/8K4e/+MTTcWXTGd
v2zTryz63668M4KNSLBS32iWQvGS92jTu81LjhuuK6BNloh6RAjHtK2gDuT/
B8327NpULAIA

-->

</rfc>

