<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-01" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To enable the establishment of a trust relation between a pledge and the domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the target domain, time synchronization, and the exchange of security information necessary to establish trust between a pledge and the domain.
Security information about the target domain, specifically the target domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the registrar's domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning tool or it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode also.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, when the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute target domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the target domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
As the described solution will rely on additional wrapping signature it will require pre-processing specifically for EST, as it currently uses PKCS#10 requests only.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<dl>
  <dt>
CA:  </dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>
RA:  </dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>
POP:  </dt>
  <dd>
    <t>Prove of possession (of a private key)</t>
  </dd>
  <dt>
POI:  </dt>
  <dd>
    <t>Prove of identity</t>
  </dd>
  <dt>
IED:  </dt>
  <dd>
    <t>Intelligent Electronic Device (in essence a pledge).</t>
  </dd>
  <dt>
on-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in the target deployment domain.</t>
  </dd>
  <dt>
off-site:  </dt>
  <dd>
    <t>Describes a component or service or functionality available in an operator domain different from
the target deployment domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>
asynchronous communication:  </dt>
  <dd>
    <t>Describes a timely interrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
synchronous communication:  </dt>
  <dd>
    <t>Describes a timely uninterrupted communication between an end entity and a PKI component.</t>
  </dd>
  <dt>
authenticated self-contained object:  </dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the EE certificate (IDevID certificate or LDEVID certificate) of a pledge.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environment</name>

<t>The described solution is applicable in domains in which pledges have no direct connection to the domain registrar, but are expected to be managed by this registrar.
This can be motivated by pledges featuring a different technology stack or by pledges without an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role.
Therefore, the pledge has to offer endpoints on which it can be triggered for the generation of pledge-voucher-request objects and certification objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples"><name>Application Examples</name>

<t>The following examples are intended to motivate the support of additional bootstrapping approaches in general by introducing industrial applications cases, which could leverage BRSKI as such but also require support a pledge acting as server and only answers requests as well as scenarios with limited connectivity to the registrar.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation, a use case can be described by a detached building (or a cabinet) or the basement of a building equipped with sensor, actuators, and controllers connected, but with only limited or no connection to the centralized building management system.
This limited connectivity may be during the installation time but also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, beyond them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore implicates higher operational security than other components utilizing the issued certificates .
CAs may also demand higher security in the registration procedures. Especially the CA/Browser forum currently increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be the situation in which the target domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the motivated application examples described in <xref target="app-examples"/> the following base requirements are derived to support to support the communication between a pledge and a registrar over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature using the private key.</t>
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a certificate request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI utilizes PKCS#10 <xref target="RFC2986"/>.
Here, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the considered application examples, this is not sufficient to provide data origin authentication and therefore needs to be bound to the existing credential of the pledge (IDevID) additionally.
This binding supports the authorization decision for the certification request through a proof of identity.
The binding of data origin authentication to the certification request may be delegated to the protocol used for certificate management or it may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using the existing credential on the pledge (IDevID).</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use case.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection from the pledge to the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to ensure reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment of pledges, not directly connected to the domain registrar, this document relies on the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM).
This allows independence from protection provided by the utilized transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges with the domain registrar are performed with the help of a registrar-agent component.
The registrar-agent may be an integrated functionality of a commissioning tool.
This leads to enhancements of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply the required data objects for bootstrapping, which are also exchanged between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
A general goal for the registrar-agent application is the reuse of already defined endpoints of the domain registrar side.
The functionality of the already existing registrar endpoints may need small enhancements to cope with the additional signatures.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes the same logical components as BRSKI with the registrar-agent component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent uses its LDevID.
The provisioning of the registrar-agent LDevID may be done by a separate BRSKI run or other means in advance.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating the registrar-agent to perform additional authorization of a pledge bootstrapping action.
Examples for such user level authentication may be HTTP authentication or the usage of authorization tokens or other.
This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other transport protocols may be used like Bluetooth or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge, in the context of the triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, pledge-voucher-request objects and pledge-enrollment-request objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping information such as voucher-request objects and enrollment-request objects from one or multiple pledges at once and performs a bulk bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are applied, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar bases on the LDevID of the registrar-agent, provided by the PKI responsible for the domain. 
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>.
Note that it may be used by the registrar-agent instead of the pledge to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but  through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the  registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /* Note:RFC8366bis</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended.
To define an additional assertion RFC 8366 may be revised.
There is currently ongoing work for a RFC8366bis. */</t>

<section anchor="agent-proximity"><name>Agent-Proximity</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
In case of "agent-proximity" it is a statement, that the proximity-registrar-certificate was provided via the registrar-agent and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate.
Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as a server component.
It is triggered by the registrar-agent for the generation of pledge-voucher-request and pledge-enrollment-request objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI interface based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to create voucher request.
It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to create enrollment request.
It returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided voucher to pledge.
It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll response (certificate) to pledge.
It returns the pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate towards the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar in the context of for TLS client-side authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge, like scanning of product-serial-number information using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge at âproduct-serial-number.brski-pledge._tcp.local.â
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number.brski-pledge._tcp.local."
It can then be discovered by the registrar-agent via mDNS. Note that other mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the pledge-voucher-request object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the pledge-voucher-request.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate to the pledge to be used in the "agent-sign-cert" properties of the pledge-voucher-request.
Note, this may be omitted in constraint environments to safe bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data.
The registrar may include the LDevID(RegAgt) certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the pledge-voucher-request (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" properties of the registrar-voucher-request, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged".
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between the registrar-agent and the pledge including the status objects.</t>
  <t>Status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent can be configured with the product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own LDevID(Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is: application/json.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing certificate data (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note, the optionally included agent-sign-cert data enables the pledge to verify at least the signature of the agent-signed-data.
It may not verify the agent-sign-cert itself due to missing issuing CA information.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHOULD</bcp14> construct the body of the pledge-voucher-request object as defined in <xref target="RFC8995"/>.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The payload of the pledge-voucher-request (PVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: contains the pledge product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a general certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll.
In the following the enrollment is described as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Verification of usage of ietf-ztp-types to convey the 
P10 in enrollment request. 
*/</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols like EST, CMP, CMS, and SCEP.
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the pledge-enrollment-request as PKCS#10 object.
In this case it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to achieve proof-of-identity bound to the PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
"know" its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the pledge-enrollment-request object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for Values to be 
taken from the IDevID into the PKCS#10 (like product-serial-number 
or subjectName, or certificate template) - provide at least hint 
that product serial number must be contained. 
BRSKI references RFC7030 for this.
*/</t>

<t>Once the registrar-agent has collected the pledge-voucher-request and pledge-enrollment-request objects, it connects to the registrar and sends the request objects.
As the registrar-agent is intended to work between the pledge and the domain registrar, a  collection of requests from more than one pledges is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Handling - Registrar-Agent (Infrastructure)</name>

<t>The bootstrapping exchange between the registrar-agent and the domain registrar resembles the exchanges between the pledge and the domain registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own LDevID(RegAgt) EE credential of registrar domain.
It knows the address of the domain registrar through configuration or discovery by, e.g., mDNS/DNSSD.
The registrar-agent has acquired pledge-voucher-request and pledge-enrollment-request   objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors / manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS server certificate) as well as IDevID CA certificate of pledge vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using the LDevID(RegAgt) of the registrar-agent instead of the IDevID of the pledge.
This allows the registrar to distinguish between pledge-initiator-mode and pledge-responder-mode. In pledge-responder-mode the registrar has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as defined in <xref target="RFC8995"/>. Specifically, the registrar will receive JOSE objects from the pledge for voucher-request and enrollment-request (instead of the objects for voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the registrar with an HTTP-over-TLS POST to the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The pledge-voucher-request Content-Type used in the pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>(see <xref target="pvr"/> for the content definition).</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> include the "Accept" header field indicating the pledge acceptable Content-Type for the voucher-response.
The voucher-response Content-Type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar <bcp14>SHALL</bcp14> perform the verification of the voucher-request parameter as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain the own LDevID(Reg) EE certificate to ensure the registrar in proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not contained in the agent-sign-cert properties of the pledge-voucher-request, it must fetch from a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt) certificate data.
If contained the registrar <bcp14>MUST</bcp14> verify that the credentials used to sign the data have been valid at signature creation time and that the corresponding registrar-agent was authorized to be involved in the bootstrapping process.</t>
</list></t>

<t>If validation fails the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code to the registrar-agent.
If the pledge-voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection with the MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the body of the registrar-voucher-request object as defined in <xref target="RFC8995"/>.
The encoding <bcp14>SHALL</bcp14> be done as JOSE object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The payload of the registrar-voucher-request (RVR) object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the registrar-voucher-request creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the product-serial-number contained in the IDevID EE certificate of the pledge matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt) certificate data if MASA verification of agent-proximity is required to provide the assertion "agent-proximity".</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the MASA with an HTTP-over-TLS POST at the endpoint "/.well-known/brski/requestvoucher".</t>

<t>The registrar-voucher-request Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> include an "Accept" header field indicating the acceptable media type for the voucher-response.
The media type "application/voucher-jws+json" is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it <bcp14>SHALL</bcp14> perform the verification of the contained components as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following additional processing <bcp14>SHALL</bcp14> be done for components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> be consistent with the certificate used to sign the registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to be able to provide "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the serial-number properties of the prior-signed-voucher and also in serial-number properties of  the registrar-voucher-request.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the registrar-voucher-request <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the agent-sign-cert, which can be verified by the MASA as issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the agent-sign-cert information is not provided, the MASA <bcp14>MAY</bcp14> provide a lower level assertion "logged" or "verified".<br />
Note, in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA, sub-CA certificate(s) <bcp14>MUST</bcp14> also be presented in the agent-sign-cert.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The error codes are kept as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted Accept header fields or based on the MASA's prior understanding of proper format for this pledge.
Specifically for the pledge-responder-mode the "application/voucher-jws+json" as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the registrar.
After receiving the voucher the registrar may evaluate the voucher for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the pledge's enrollment-request to the registrar.
Deviating from BRSKI the enrollment-request is not a raw PKCS#10 request.
As the registrar-agent is involved in the exchange, the PKCS#10 is contained in the JOSE object. The signature is created using the pledge's IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request to the registrar with an HTTP-over-TLS POST at the endpoint "/.well-known/est/simpleenroll".</t>

<t>The enrollment-request Content-Type is: <spanx style="verb">application/jose</spanx></t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
If the voucher-request is in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/> and results in additional processing at the domain registrar as EST server as following.
Note that the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content Type application/jose, it <bcp14>MUST</bcp14> verify the signature using the certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained in the pledge's IDevID certificate contained in the JOSE header as being accepted to join the domain, based on the verification of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JOSE body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the content type "application/pkcs7-mime".</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:
Communication between domain CA and registrar is of content
type "application/pkcs7-mime"
Communication between registrar, registrar-agent and further to the pledge
should be of content type "application/jose" . */</t>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar) and the enrollment-response (LDevID EE certificate) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined through the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is "application/voucher-jws+json and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE. The pledge generates the voucher-status-object and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the operation path value of "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the defined object is provided with an additional signature using JOSE.
The pledge generates the enrollment status and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type "application/jose", signed using the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description assumes that the registrar-agent has collected the status objects from the pledge.
It will provide the status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher-status to the registrar. This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/voucher_status". The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher-status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll-status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object without modification to the registrar with an HTTP-over-TLS POST using the operation path value of "/.well-known/brski/enrollstatus".
The Content-Type header is kept as "application/jose" as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge enroll-status object and validate that it belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll-status object.
Note that the verification of a signature of the object is a deviation form the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 but <bcp14>MAY</bcp14> simply fail with an HTTP 404 error.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
The enhanced fields are described in Section Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-26.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";


  revision 2021-10-26 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: "BRSKI well-known URIs" with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment responses by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment response for domain 1 in domain 2 can be detected by the pledge-voucher-request processing on the domain registrar side.
This requires the domain registrar to verify the proximity-registrar-cert leaf in the pledge-voucher-request against his own LDevID.
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns have been raised, that there may be opportunities to misuse the registrar-agent with a valid LDevID.
This may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID certificate for the registrar-agent may be provided by a prior BRSKI execution based on an existing IDevID.
Alternatively, the LDevID may be acquired by a service technician after authentication against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore, similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data content type, as described <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected from modification.
The use of YANG to define data structures, via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter and Oskar Camenzind, for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='8' month='November' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Housekeeping: Removed already addressed open issues.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAHuhl2EAA+2961ojR7Yg+l9PkUP9KLCRCqrKZZv29m4M2KZdFzZgu/f4
+PROpASyS1KqlSkwXa79zYPMfN95lvMo8yRnXSNWREZKgnJf5szwdbtAyozL
ihXrfun3+72mbMbFXvbV6dl3x9lt2VxnJ+NidFVk5TQ7LepZNR0V8+xVNSqy
TXqof3L6aquXX1zMixt5Dz/qjarhNJ/AUKN5ftn0y6K57OfTcpL3L+b127I/
m0/6O7u9fF7ke9mbWTHPm7Ka1lk+HWWv8ml+VUyKadO7vdrL9l8fv9rPfvym
N8obGPDpztPdXt3Ag3/Kx9UUPmnmi6JXzub0W9083dn5fOdpb5g3e1ndjHqz
cq+XZU013Mse3xX1Y/hjWE1m+bDxH9R3k3lxWZsPqnkTfgITTKumvCyLEXw4
reipZl76YfJFc13N93p9gBa8eDbIvp6XRQ3PMSjOmuLyspi6T6s57O6sxJ3W
2f438InCUT7kGYoCZnjTNFX/2/x62j8tp1fZC9xE2dztZa8W03J4TXsawRyP
P9v99NnnvMfFtJnDE98U80k+vYOPiklejhEotI7BJa7j9zXPNQCYwCOLebmX
XTfNrN578uT29nZgvn6iOzsfZD8W82kxd1s7v64mee0//UdtraF19G9pHQ/Z
2tEge1nkfmNH47Jq9CPa1UFZD6vs7A6gOLHbOIW1NiX8ldd1kX3qdvFjPh6X
dTEeF1O3lYNv+58923lut3IGt+2vxXwMeA0fz64Jszc+fr6bPX+effbpZ9nn
gNcbfqdjWNLvh7gW2p4s/9WA1pHPR3U1dZt4hR8V4+wg+pZPCWYsxgDG7Ky6
bG7hRmY/VvO3tZ9qMpx/jBf497U+OhjmFqAKT/P1k960grNpypsCb9/p1wcv
nj7f1V8/ffHU//pMfv1059mO/vrJ7ify62c7z/XTz569eKG/Pt/5VH/9/HN6
9rh/ODBk5s+3df+mWgyvi3nw7bRohtX0sl//tZn1hzV8WU4vo6U+/fwzneiT
p5/56Xklx0dHR/3Pdp4OdvdP8W+gLUw18YtMvsjOiuECQHlY3JTDIjseATVD
2jGnF5RS4O99PobjaQ3DLJoiqy4B64ohkpZ8TASR/6zgNtTZ0fSqnBbFvKaX
lSTuftbfeUGf1AXeatwTD8/rxdsjC3vc6/X7fbiPiKrDptc7vy7rDOj1Ailu
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
GjWxeDZKhb4466D3/wFWUgGvl10BAA==

-->

</rfc>

