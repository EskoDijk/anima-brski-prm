<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.13 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-04" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate request objects to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the object exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is an enrollment object signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request object signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is a request object related to the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request object containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to requests for PVR and PER objects and consumption of the result objects.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. Especially the CA/Browser <xref target="CABF"/> forum increases the security requirements in the certificate issuance procedures for publicly trusted certificates.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate request objects for voucher and enrollment. These voucher an enrollment request objects are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment objects:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the enrollment request object.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher request and response objects as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher object, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification request objects: Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request object and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by the certification request object.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PCKS#10 object using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response objects as known from BRSKI and the enrollment request/response objects as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM 
* uses existing endpoints were the required functionality is provided
* enhances existing with new supported media types, e.g., for JWS voucher 
* defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both objects, PVR objects and PER objects, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request objects and enrollment-request objects on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on voucher-request objects, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) EE certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) EE certificate can be verified after the voucher has been processed by the pledge. 
If the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER objects as well as for the processing of the response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and the domain registrar, which are the voucher request/response objects, the enrollment request/response objects, as well as related status objects.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the request object is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) EE certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR object.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) EE certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) EE certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) EE certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) EE certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) EE certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error HTTP response code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes objects exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes objects exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes objects exchanged between the registrar-agent and the pledge including the status objects.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) EE credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS EE certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": ["base64encodedvalue==", "base64encodedvalue==", "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) EE certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>,  section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:agent-signed-data": {
      "created-on": "2021-04-16T00:00:01.000Z",
      "serial-number": "callee4711"
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "kid": "base64encodedvalue=="
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR object as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This object becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR object <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) EE certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) EE certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) EE certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2021-04-16T00:00:02.000Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
      "agent-signed-data": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER Content-Type header is: <spanx style="verb">application/json</spanx>
with an empty body.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: initial or re-enroll as shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" = "intial"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the enrollment request object.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification request objects such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10 object.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the enrollment-request it <bcp14>SHOULD</bcp14> respond with HTTP 406 error code to the registrar-agent to indicate that it is not able to create the enrollment-request.</t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-ztp-types": {
      "p10-csr": "base64encodedvalue=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "MIIB2jCC...dA==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}
]]></artwork></figure>

<t>With the collected PVR object and the PER object, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired PVR and PER objects(s).</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and the site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[objects available. ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10 objects).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) EE certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) EE certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) EE certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates during bootstrapping is necessary as no trusted timestamp is available, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) EE certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 error code to the registrar-agent.
HTTP 406 error code <bcp14>SHOULD</bcp14> be used if the format of PVR is unknown.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR object as defined in <xref target="RFC8995"/>.
The RVR object encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR object <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID EE certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) EE certificate or the LDevID(RegAgt) EE certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) EE certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher-request-prm:voucher": {
      "created-on": "2022-01-04T02:37:39.235Z",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "serial-number": "callee4711",
      "assertion": "agent-proximity",
      "prior-signed-voucher-request": "base64encodedvalue==",
      "agent-sign-cert": [
        "base64encodedvalue==",
        "base64encodedvalue==",
        "..."
      ]
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The RVR <bcp14>SHOULD</bcp14> set the Accept header indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) EE certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) EE certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It can be verified by the MASA that it was issued by the same domain CA as the LDevID(Reg) EE certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) EE certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP error code to the registrar.
The HTTP error codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format is indicated by the Accept header field of the RVR or MASA <bcp14>SHOULD</bcp14> respond with the same format as the PVR was (default "JSON-in-JWS")
Specifically for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The MASA returns the voucher-response object to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MAY</bcp14> add an additional signature to the voucher-response object, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
{
  "payload": {
    "ietf-voucher:voucher": {
      "assertion": "agent-proximity",
      "serial-number": "callee4711",
      "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
      "created-on": "2022-01-04T00:00:02.000Z",
      "pinned-domain-cert": "MIIBpDCCA...w=="
    },
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      },
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10 object.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) EE certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either enhance the PKCS#10 request or generate a structure containing the attributes to be included by the CA into the requested LDevID EE certificate and sends both (the original PKCS#10 request and the enhancements) to the domain CA. 
As enhancing the PKCS#10 request destroys the initial proof of possession of the corresponding private key, the CA would need to accept RA-verified requests.
This request handling to the domain CA is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>If validation of the wrapping signature fails, the registrar <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the PER is in an unknown format.<br />
A situation that could be resolved with administrative action (such as adding a vendor/manufacturer IDevID CA as trusted party) <bcp14>MAY</bcp14> be responded with the HTTP 403 error code.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID EE certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request a signature wrapped CA certificate object, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
{
  "payload": {
    "x5b": [ "base64encodedvalue==" ],
    "signatures": [
      {
        "protected": {
          "alg": "ES256",
          "x5c": [ "base64encodedvalue==" ]
        },
        "signature": "base64encodedvalue=="
      }
    ]
  }
}

]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID EE certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and provide the objects to the pledge(s).
The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the response objects from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status object.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status object and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 404 error code.
The HTTP 406 error code <bcp14>SHOULD</bcp14> be used, if the response is in an unknown format.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID EE certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status object and provide it in the response message to the registrar-agent. If the verification of the LDevID EE certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enrollment status object is provided with an additional signature using JOSE.
If the pledge verified the received LDevID EE certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "payload": {
    "version": 1,
    "status": true,
    "reason": "Informative human readable message",
    "reason-context": {
      "additional": "JSON"
    }
  },
  "signatures": [
    {
      "protected": {
        "alg": "ES256",
        "x5c": [ "base64encodedvalue==" ]
      },
      "signature": "base64encodedvalue=="
    }
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status objects from the pledge.
It <bcp14>SHALL</bcp14> provide the status objects to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status objects avail.]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status object to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status object and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status object to the registrar.
The status indicates the pledge could process the enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status object without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status object.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID EE certificate referenced in the header of the enroll status object. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the enroll status object indicates a failure, the pledge was unable to verify the received LDevID EE certificate and therefore signed the enroll status objects with its IDevID credential.
Note that the verification of a signature of the object is a deviation from the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 in the success case or fail with HTTP 4xx/5xx codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request 
        defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
          
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
                  min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
                         It is defined as list to enable inclusion of further
                         certificates along the certificate chain if different 
                         issuing CAs have been used for the registrar-agent 
                         and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>The credential used by the registrar-agent to sign the data for the pledge in case of the pledge-initiator-mode should not contain personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of a potential service technician operating the device, to avoid revealing this information to the MASA.</t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<section anchor="exhaustion-attack-on-pledge"><name>Exhaustion Attack on Pledge</name>

<t>Exhaustion attack on pledge based on DoS attack (connection establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-objects-by-registrar-agent"><name>Misuse of acquired Voucher and Enrollment objects by Registrar-Agent</name>

<t>A Registrar-agent that uses acquired voucher and enrollment objects for domain-A in domain-B can be avoided by the PVR processing on the domain registrar side.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR against his own LDevID(Reg). 
In addition, the domain registrar has to verify the association of the pledge to his domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate.
Moreover, the registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests, based on the LDevID(RegAgt) EE certificate information contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on opportunities to misuse the registrar-agent with a valid LDevID, may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) EE certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) EE certificate used in the TLS handshake. If both certificates are successfully verified, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in Section 11.7 (Security Considerations) of <xref target="RFC8995"/> apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by Section 3.7 of <xref target="RFC8407"/>.</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="CABF" >
  <front>
    <title>CA Browser Forum</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <format type="uri" target="https://cabforum.org/"/>
</reference>


    </references>


<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID EE certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID EE certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
EE certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2961okx5Uo+r+eIjf6IZCoauibJCx7jGgkYfWFAWTZW5+O
JqlKIN1VlTWZWdC4u+dZzrOcJzvrGrEiMrIoumXPntnDZ6uhKjMuK1as+2U4
HA7asp0We9k3J6c/HGU3ZXuVHU+LyWWRlfPspGgW1XxS1NmLalJkm/TQ8Pjk
xdYgPz+vi2t5Dz8aTKrxPJ/BUJM6v2iHZdFeDPN5OcuH53Xzuhwu6tlw5/Eg
r4t8L3u1KOq8Lat5k+XzSfYin+eXxayYt4Oby71s/+XRi/3sp+8Gk7yFAR/u
PHw4aFp48Nd8Ws3hk7ZeFoNyUdNvTftwZ+ernYeDcd7uZU07GSzKvUGWtdV4
L/v0tmg+hT/G1WyRj1v/QXM7q4uLxnxQ1W34CUwwr9ryoiwm8OG8oqfauvTD
5Mv2qqr3BkOAFrx4Osq+rcuigecYFKdtcXFRzN2nVQ27Oy1xp022/x18onCU
D3mGooAZXrVtNfw+v5oPT8r5ZfYUN1G2t3vZi+W8HF/RniYwx6df7n7x6Cve
43Le1vDEd0U9y+e38FExy8spAoXWMbrAdfyx4blGABN4ZFmXe9lV2y6avQcP
bm5uRubrB7qzs1H2U1HPi9pt7eyqmuWN//Q/a2strWN4Q+v4kK0djrLnRe43
djgtq1Y/ol0dlM24yk5vAYozu40TWGtbwl950xTZF24XP+XTadkU02kxd1s5
+H745SNAf7OVU7htfy/qKeA1fLy4Isze+Pzxbvb4cfblF19mXwFeb/idTmFJ
fxzjWmh7svwXI1pHXk+aau428QI/KqbZQfQtnxLMWEwBjNlpddHewI3Mfqrq
142fajauP8cL/MdGHx2NcwtQhaf5+sFgXsHZtOV1gbfv5NuDh199+VR+ffLw
yx359ekXTx/6Xx/Jr1/sPNIHvniy+0R+/XLnsX765aOnOtiXX31FDxwNn40M
mfnbTTO8rpbjq6IOvp0X7biaXwybv7eL4bipE6/WF2Mc/7xs9gbl/CLax9OH
j3d1bQ+f6OK/3PW/PvLLfLzzhfz61e6ufvrVw0dfJqZlwpjTPEeHh4fDL3ce
jnb3T/BvoF9MmfGLTL7ITovxEo7rWXFdjovsaAIUE+lTTS8oNcLfh3zUR/MG
hlm2RVZdAGYXYyRf+ZSILv9ZwY1rssP5ZTkvirqhl5Xs7n453HlKnzQFUg4E
DQ/P68UbKgvDS+p4wTA/x1sBdNJu5NN9+dQ/mB3XFZDpapq9ui7q67K4+dQs
YH9Rl1Om/vghH4vOf/zyO3+36/xmdAm8a3m+hJXCabcAGLrlDOibywcRK3oA
iD5/sIC9P6DPfoXPfq1kEaPF/BKmOdj/5ttgBwf72Td1dQNTZN9W9XKWWFZA
csb5+QU+N4KzeDAYDIfDTCEzGJxdlU0GTHOJbC+bFBdwAE1WzK/y+ZhYYQMc
LDuvqhbfWCyQUuZZXcwqOM2G8eB1cQtU4AIIEPDBcYsfMZPezt6+lZvy/v0W
DnSRj8tp2QJgozGBz08qhEaTXRQ5jIEfzivAn6yaT29h77MC/pmWs7ItJkC+
5nPAm/IaSF12XrQ3BfC3PFuw0IB41V4VMiKs9pLoYz0aHLVZsyjGgK2Afzhs
Xl8WsMcG0JMlgW1cys0VkCsaooRDREjBV9kMaOg0Azo2vwQYXdTVzE05LOdl
W+ZtVQ/xqe0MmBIgwQQHE1DA7t3TtYo09DQ+PCmacV2e8xutPZTR4KzKmuVi
AZIBAK292jaYC8urq8lyDOvJs3lx4/c6BFEGThQlDiDp83ZbNuVPoKENwgMz
5He0ewdKA0g3YjbhU8G3wsNbXOVNMRoANtKXBUhJ58B7rgin4MrnLCDBUNPe
aeKzsruE9+DeAyLw8G/4CGhkIDZIfWD5ADrgdhdDvHcwEvxZnf8NcKTJNpvy
co44VQxvcMn+qy0ALuIJof0kg+/qKgcgAfjzy3kFVGuMKwLGpRtftgC9v8Oz
xbyuplPa4ULIxzYMtJhWt/Dt+W0SAREJPMALlnTxwWf84MH+aMA3dFZOJtNi
MPgEiCcfMQJuwAIy4QsvGV4yd0yRm9ChqaZLgjbcfr2qwOmrYYvsKdsE2MGs
ALet6DgBrhMi7QA6PqFmCyfKs80xHGM1K+otvDG6vxFTkXI+ni4nglYTlBCA
kN3iaMD7boC1Z8VUSErJJ6mj0WAPBFh6ee0x0+rxqju2CNsCAlA0TQ5TAFQd
zgmq3UETRlk2GJymRs3Pq2Xbu7rtiHz0bWJc1C091QItANjoZiaCQAhmkRIc
mqZOFcSB9+8JSUG2kxfgSThJxGmPyNuIhNflBD65LvNe3MPPDTyqugSGi4go
xAw0oCUQCLwq9acgQBMrJ3Q/helw0fIRAG3zxf7pPlwgxcnJBKhaA8ffjIt5
XpdVE1JSnVe2OoYrDXfnQmhGxGFgcWUjBFgIK+JB98nNgFbCbi8QQLJVd59h
viSdhuUfzWGKyRI1KpBIivl1CcKIMD6/6lmObOYqvyZinaMkAsgtSLXEBcDG
QU3T5RaJpbrLnmBLQvMN6FpGG8A2pGztVd7a9dyU0yksCJC9vLwsanyiyoDg
oz5bwMj/voQL4TALObhdjXKZHuS9L0xDbraljKAErATpHhCjxJsF0HXMKCNy
IaxrgjhBp97Q85cWLzpYvBlxOBQrblCzMOARgsSHBqd1sZyPeQmIuMSQkAqX
TQMfEsWrUaK4KC+XbA+AMUEahE/hGGSU4hqoybgaTivmNe40/TEiTTnCh+ao
jLUIMb4bwWPCmGM+zGflqZ4b39xXuePNg7qAg4cVNSij5uacH9BFTiOZsmcr
0vTiZHLNhHUg1sAq4XMEHO/PcqBiPllUMEUzGhBvhblm7kMnE7HkAQt50/K9
tgiHFwHkvCnTLMCualkjM0IGWe0f83SoA8F0CJZ82lT45fdnZ/IlKj1AN7Mj
GgzvJU0Mo6mcBSjAPG4EWoesmOhqPkauUp5PC6KkoxvQoIev59XNPPvx5Eh3
dVkBOpd0KURW1qP2spqwzozAqiYsvCHKLxtHNFFgGAw+c3dCpY34AOCGoJDn
71EoUvfLcxEiBWMDg7qwD5SJJYO04O4o0z6k/J9lsPXJVFfruDSy0cViqouY
5reFivEIrxyBax/AG1mfl7gYeKTO5w0BcFbAb6u20JUZQe56XRSLPvg5zLMw
WuTt1QgUp8M3+QwmcHQj0DEQF46Os/McD0vkGRCPbkqkvXCx8Bd4FwSlcxAf
CCM7738zXRZAWODGwQsvvz1Y63R45URbPoNxp9UNba5SSTQbwwpQBIY5Qeq6
AFpN5EXpAI8LzPwI1PWjZ6GslGdnz0/dQonu9QCW+TheJid1oZgD4MDTWzaq
F4arxjWTTKMHYmnPJtEuR/BICTDUbCshw0U4yLe/e0t61T+vonjp3Ui7fIW9
tnF4eibEZucR0BOmRsxaabU4bHmOdo0kH1VRUca3QiHQERwc8XFZz82UeXYO
4ohI4YSr7iWEmU6PyuQ8W+L9nN7i09E5WszCiUTaUsjgRwzC0WB/PK5Ev7H8
qsMQVHDz76qYRtjuz0ZfYXHay4sn+1vE1su28YqDx+NwXZ6PqNrHrwwNTqZu
uJGgQ6ZCvAvNPl72tIJDF1fO+higbteMdHNFwoGjKlbaWzhHRsQFssH3cFe3
6ejoad75sCnRgGCQZchUx+i6CFlhbBMgPOMWSKsQVKCtZH0wUxPlXVQonKN8
DogjtCDQUviGO0FW1GiUdZcsmuRTuLtzMkmSfTfbPN1/ueUktV5ljoYkoIXj
4r7lsC+m+SXAQ9ki8DYAVt6I7gq3g3Ac/rwqL1FlYo7i+A1QfaZATtHPIkXf
rdKRm3Vobya0d7APImTd4syyLFFOAiY2N+TXMTGQgXFqBi7uGJkLwgFFkOsc
hBw6sGn5uujwB9QLmrbIJ57E4ghwTUUQVK3es8z1OYq1rxBaI5SJAgUi+41q
Lx60QpgMCVWqJFYPEcLROtkloQF8EaGBoxQTkqQmlZ15URdD2CdJYzA/jA2Y
Ul7cMishGVFWZLlTheYYUJaZ2cPsyNkHaEc5A0G0nFfT6vKWZTg0WwIbh7k3
Xvx4eraxzf9mL1/R7yeH//rj0cnhM/z99Pv958/dLwN54vT7Vz8+f+Z/828e
vHrx4vDlM34ZPs2CjwYbL/b/urFNJ7Px6vjs6NXL/ecbXZKF4iirbsQ2YV+o
eOTNIDAWfnNw/P/9v7uPAcr/C70du7tfAZj5jy93v3gMfyB14tmIEvCfAPrb
Ad4ROAa8joAB43wBcuS0IfrRXKHICyhfIBf/GSHzy1729fl4sfv4D/IBbjj4
UGEWfEgw637SeZmBmPgoMY2DZvB5BOlwvft/Df5WuJsPY2t4aHZsPf70WN+2
8T4SLdgdPWQGclE5iQ1eZw3DWRsdrk9v9waDNUyZe4O97JmcPdFx/tjg/7i+
XbTVJVzaKzFRnVfL+UTlOmCqGc6B7PjwcMsygGyzyxSQDj1/dvjn8NMtvFK4
OZVUUARoGoDZRNDV2aLaq7paXqKcOSkvEbe6ZAStTfC5qL9M5VhGr4VfkoW5
Lq9xQXhn5cXDQ7soEpAP9hFCB4HE5AQQtMM1QKYiMWxwEFgCUPHHQc7QANBW
TmBlDq2CoiHBod2ABNjB4PAQxzh00B4MZkC58bMXS9pueNhnjn4/J8amhklY
XTUfIj+NTt5ogGTbrUm+hF9DS4djMKvMPTjJxcVHzII0d82ZEG+sYWZcoKlk
ysZkGBg+mVbLic5FThPGbaJcOdwiWBGpiUbYRfzzrNRxW9Zjc8OV8wncYJFN
r731OgPcOT48wd1z1MnQ87ah8raSLpzVGxhjxQ4bsD4218mbYiTA92Q9NO1g
cPzqmKasK8Bo+J9IaKQakY3KIP0WPn4UPF5O5CbDV3+2ixczcbByZ2wOTYNr
rh6vdF6LK0eXf0KX7SQp7JPhr1oIJ28oZiG0WvAR5ejMnIDifEl2MEt6Zi4Y
x6EbMKUlGx5lor/ztLCx8Wu8yid8iCdO0uk5xxgK5JcqHJUEXAAM9FQT1igA
8pILTPbnaLIk3KOZhKIrkYODyxqBCP6NJnWWVk7H1YJo5Kl4ceBD+JRNS7DU
Q2uoRtb+I2jiB6iOOzPG20+a5QJAcP1ebPTsMWyMpsCoaUa6QYbvLFd4T8nm
7a8QGcHLqt5LG3/p+nVen1eipqxhahhlhyVJ2jfwto6EbNPbwgkhGT8c6jao
kATaG3LDfE6PVi1dJHpYh3SuunIeggDJ2W3hlurRotJoMbRkp5QdMQttZ8Xo
cgRXgMZgnzhtuJyh0rcPE1yRgusmFQT0NnYgBLPzKbE6OCeQAFCPkCuD51MX
cB957fnkmsyPKig2wGWnKDEgqUlSYVgCaS91wRJz/9kYRSii72gDjl0lzt+o
TsgJ26usLkpbRHbKmiVrf3BH8W0SSfXMvGMD1afQkcLgPb/tmPGReY+yfTXk
XIAg13gBziviuertOPO2+mzSvu3NtOPIqk8aNeGw1bszdIubaVdJZkQcb1xi
bRVpA15spEbORTin0AeQtRZqOOVzapZT5+4hUSgUPgtn2pSr4IzUMILfSMJ4
3TW5AZEo0Ari90uiUTIyI8YjoNE/XZXTIgE8nfjCEJCOzWRb8FYECHlOrwai
juAWxknQG4073qqWcAYZEO7BkeIy2jEbsyhBQsCucxK/aYd3+d5hAh5h/xA+
7wmyYisi3Qva6qyqY4y7mBZvynO06d+OiBkA4f9mWU4n4n+t2FNNvqZz/Tx3
n6OUdLug+KqlbI39NUrd0fPR5sCqJv71TRa+mNZsZeqUhXd9DId7GB2T/74s
yb4ihqt5U9WoN6IwD5B2mNoi/y3wKzSL08MkySm2wETzKkF5VDB0cxpxgMUJ
IfFJtEP0oC1ryIqQxdzRYRI20SQlDzjazlR68MyHugTvinSrgNmWG45ycVuM
r+bluMzREjidskOOgkvoa2cMtsEGzkrvIK2hEtbdh0/M1oeM8h81yk9zUAkX
LF7PqnO8frImHNKpHrxXt7bRYL9rA9Z7J8LgeusRH11d5BN62/JRgWcAYwEB
K9BrDI+XlQxJqpLZCWCpIBm06MBWE2Bklm/iQxXM6hkFQYCSbF1iREY+XRaM
7E3RIqVsiIiXtXdzBuNcicOE3WV0ax64SwPYNKsY62akHHlpmFRXJ+zwkBW5
R60mmeWXGEEHZ0MShhO4dYWEqI2Gk/RskKxOBpxO/ukBl3FAemmscyc+bQQP
R0LRjsKAwSOQHvj4jysQTm/FFuNjD/L5LdOyIKhEr0sUfkhyDSAyGkBKGhkF
Cb1sR6jTw5vMoQHd26JmBQxn3oZLAiBEiyy87WKnkK6w8beheA1WRWhJ244K
sfOYQ/36Lg/RfkaPMcD6YomLdKRygoY35L9FXVaThnAFKBJbkYWNs7sBCHLe
omZ8QT5hPR22MLFsy1QXzvEK+AmtT1EDx2z0KJ7jml8ZbDCBUQSwM4qSHD4T
zc96RlJOHhgJyYgS0FBZ4+gLg9qBujSGUYh1HQOr9Qqj2LABWsgu5YY16g2w
iOzOCpTYefce+OgrIjt8q6xBKBsNDvb5lhN/kLl0qiaCTAAGslYDQwHIZodE
ZVyQ2MH+A43ZffsWI3pBDqCgXIyaQ7SSKBCDajRvGC4XEQSS+/2kLDotzwGJ
cVYMg4s2Rzffi08+6DW8VEnlxjmGKlQFQfonw54HdyXHgPLFyf4D0JnDQ2OT
vdAFdJ8g44GRJHYJsXn8mpRutD7QJIgQ6vAprosp4k7qrBmPs+d4CXk/jKOz
An09ZTNbEV1L3gL4jTGVtZxSw4SsTaQncDPhp3cmLnHzoF2nFNWJFUK26XYV
b4o9RuZajpdT9HAugFIA4eCARnoZhfAJzuJk1yB0WexUMEC5yIPAMYL3uChR
htfoMRq+QA/dzZypnmyaVVXZivhT2JoBkvPfr6slflrBnmZ7UeTIcu5VRcRH
RD9Enw4963FLmeAfdFry4ajOv+bgI/H4nNg79KxsAK/Jusa5Xixsw8BqYRke
anjq20/g+g2Bb6DlhHyvlcopLUJgInHjgQ4f4Njbt2p7ee92ap2FTiHrfasN
FLiAHDCJr+EoJ1Zl6wTx9qpRfdE8Z2tGE+W9Tu0wYnzb+vNCozFFkhQIyoLN
PVVIUEFlLi+iT5yjMDTK965FXeOkz7A2jul7Q0rf81wBlCyxSxuGI8EOLh6x
ihdDsjPZKCIy0RuFiRirZth8biPIR9mZDfCNDM3xOCyg5fPY2aKyF1AqNgHF
V6urjcu+HUNlMe+CNGbm1Z0wDHXuItAQZVaGnPVF5gi0yIeIVFJ9z14biTz8
m2fPT7csshNzFlkGhUz2y8H5jjEsixWgb86eH27J6SobWithIPdCxmRkNhpv
RwlzOGjHVpwHvpRttakQrK7y6UUHuWjOI++Hj8Zz04oFl/3iagXpxKzkRAG8
ka91N8eep9+lHA6oVXg0SObUJln7mFHSfLINQL43yHZvN1RIERwmH3LJs3Nc
dO8K/MY6pr7o8PDpDdrV0EzsV8aLCoLUcMgJB6suy+aKiZ4833ibO+qQDVI9
oIP7LSY5Nm1EgmHGBb5XhPjh1Mr01Vac2kP66nw3R+q72Tx+dbS15zV99B8O
OSw/jvdh54sPkHNm5q5vp4eCbBvxFx/QIF52/CI1ODAS5nIxIYEYJRkbo2Wl
UJIuSvUR8RuTUbDVY+PVOn51LJslWpO3vE6ChI1PcqYjMR0b52/oFtaUBhJ6
5Xu9zIKP6QC6bbWRTSl6CC8a2Uq8e9p7ou30zo/eQ51h7ypOeB5/riKEg7gh
WWzPFxLu7gSZroNXjg7PvsUkTsakP0dH7i2bTWETSjTe2top1RSj5hLOKYOz
YXPzK8xVW+G3Z993i1dZRaLL2gjMYVoLUaWpChP27BrJKLH4JKcnmR96SdRe
gr7KmrDrIBkUqVct/bXITXiBnKGgiR1yHeOc8+AVTJ7IY4nKAMCwLUJVVqlV
T8wmj+wyAvHeHP9wcPrJ7g4fDyYqY7IPkX75hoMcA8OGuGzJc9fQZ+4E5FxU
xl0kPMuq1XTjKfw+6Wb6w3JuKX+3/IWT5fbJt9usbRFykdQlMVrN8gLgU5Ls
Axjnokg7VDUNSvGmhhqmEw+RNZrYmigERi+Uj5uOVD0JhNly4pHGuYjs0SSs
GhNQ9hvNtetft79Xi44bn1hBHFqDwclE8tMsoSbgOctwako12SqJcfGiIqas
AjCuxvhrsqWaKXR5MDMIZtYXlpcY5dRGUYSdqJ/jgx8I8YOwn8TRxM47dzZ8
MnwDUL6ZFAvUzNAi4syrU3HfqlBJdoJsvx5flXhNlmhX1oxvwqWDQJA9fKOp
vm8/yf1LxXsOIze1Svo0kG1nKHWmcDOO9SN182hKl4U9SWR5oMVPvTts1ulL
LWYPrMZYTCItsSdwnwzyEniaJ/zD98jJEDN+AFlOpNZBUkqCh2gUEklxZk0W
58OVKU+l9/Y11rsKaPDSyYdxprvTL9bRE9QGoezLiAU55cUvWroLGYYdzZYz
k/5SF0v2BCg3dlGBFkNcwixF2vvcicakMqy1UpIDVtKm/nxrXdkMQXZZ+JBg
Z19rEjHBmhTdsFwtUojaVd5jnu11IdlUTs2jZeKVKjXmX869GwSgO1toEiHn
8LG5KIxnOs8lCuBPr04PJRr5ye4TShAzJrk2tMhJ6p9Xr1WKO3CjYPEN5NiD
/bkrqZBp+QaFiQergkTdyxfEl2CrMFq3agUNjHbN4+TF3sQCSDb8iC9PSMJM
JSWkYsvxQyBeppzAjKMROWU6TNu3V7ybC+KuaJSE0AmaSSdRh5faJ60zg75v
er+VOgWbH6SEYc7iI7FOfPmaat4R55Pvm4xVQDBfhsqL7VfFdME0s5MJRfxK
qHHArmg9RnKL7Tmu4oA3jigijQbJLBVh+SVKYLgpChpHjsySIjvD7kqJ1QxY
sjuvyHrFdB44F3XHAy3jgMc3LTBnUrLlHoC2Q54d442RWy6HYQmfC0AnqgF4
SzG2BV7ZwctKNU98+U8VPALa5huxKV4K15ex+b1MrBBicowtNP6MUimDTHWb
TkaPes8vCs2WFdk1yMntUC4byNWSIw8FX18gYB37WZrJOnNRbE9yW7mYLhHn
1Nf07/KXPB/m492Dx3cKmBhBhnK8YqbHJ66MJQpaboAsSX65eE4sbwLtj8RQ
Jyx6CyU6M8KT6Nic9XLBKML5zUh0wChZNS7MEphJSfE0qMqwvQUP9E8/nTqK
oymOBefmRstZZQDXZdqRNW8pyaORIQz+A36kzE/65/Nhz8/nA/02e1ZXi+z0
qlxk7tt32Z9h7RVGn7OTTn/e4WvvPmy23tfeZaAr+GIT/rnVs73L9jNflCJ7
9+pmXtQN7OOu104zMTfQn2c1Ohvr9WeDA7PP3Qskn68Jkujn/7nPw++07pV7
yd+YVS+R9TOaaLTq5537Dd/6s3nrjuXJUwOFxuf6loXW5/IYf3atn40G74KB
RiFg3kX/yu/wlhSRNG85ecm8JcV33FvdufaJfoZzBSP5t77WvfzBQE0//AOI
bUD4MEiid67nnIazcl/xW/0w/NzAUBJ83Fv9P+a8OnMFwycQ/fPkKbtRfihu
49gft69wEfYt8egg8KyN+o63+MeVrNmyMOx7q5+eJd5a76ePWm8w4m0YkYip
+9u97BMn83DZt99/um/lI6dksAIfcfpPQbiguKgh8JrL+e83psVFuyF2i8iG
1Jvxn5IgiPNi/jYj6Sbcgf3LVqpoEW91FVXSIoggN4bXLcmp2lCew4UUjHE6
AUcuiSA7IcOhD3VXo0WDUfCIBpK3vySLGAh37Bfk8hGUWRskaVH0RMsMGGVe
8ehXZFDh6Ksp+dbTi3dia61ayiS/bSjtqChek6IAe5v6CGHQbn9FJfNXGA9G
akmIHRwFWgKG5LKaYWyFGAejFZoab46OhDoO+RBXYAMyjETx2EgZ0hiN4qOZ
/sgfwmI5XvSh+HoXKznPZ1KmD8c+3X+ZbfblhW/ZvDFGgxBdIpv5vn9/ertt
sRHXxNUAC0ooQn2gaZa4kIN9SQ1P4lcQ9JQFulfHi8+Qj0cyXptWIsV42lEn
uH5KgcYubU7CJoyO01c3jX2CxKL2rOc1KPxUqQ3L6x/eu7la0+g4/FXPYRuz
M0eQ1WX9zPFuvicV3rmjqg/O+orupbcMCc7R/HRPsbzPts+D35ZEeKYGqDAF
VCM1xX63VohLwpBY7xBGTmNt4HxcopMkedIlgWPKss8ogMhVtLPWpaQy6Zz0
qsOMeJT9ZuXTeo+VCNxxwMFKtu2qaEAO1QvdbrY+Ey6oz4Cg3kGjwNBiwipy
qUP3xhgJkNEAJva7VjA8HDWbDTLkGLLnpGKb8Spf1ROO0S2cUV6nxsz1C0yn
UG7h0z3TsHbR+ZQk4groYb6NzbMxeTeUy1Uh6+kNyw+CasRv5EqluWhSRXb0
oXKQLOVVTF93z7UpANcQ6IUEbbvTCnDCWYdcwbR1lXijvddFbFsLDW9rFdJE
YhZZI01gQ54ousR2IllpsKt7+ReyJA6f19VrDCHFOjx9xV07doy4pkpdwPHR
nQwsytsatDZZFhLs7St/RNFISMLkMbKuoXvL5Kr0LV+uTuNj7bzTOaqViKyO
DFSaHRsnolqsTmTE6tdUw4QyY2bLaVtioLnLAkO0Z4TFFW0iysZVQwN+KXdM
jGF9m4wYnbipAye8mqY6ZQDLUQEKgRcsAqnCfXGwH30uFde23BGe30Yp/CxC
+vAPX8nUxhOnMsBGGqwkeZVsVidWuVi7Gpuv9MYp7+vGqyFdCUyLai0ufEnQ
pKdNzc0eHmZ5Vd2lbniSK7fWZ7UM7lmALiK2pZWG7Y5J/JiqdJGBvtRYYI8l
HJvYK/P5YMggdcYWgzJaEOudrl4R1rtrroB/ISBMaHDZbHe3qMzcxJ/569wj
zpsayxqyEfplXMFDF/jnbeEpQc1bywzTIbd0SpLgpY41/5OCbYyFfZNiN9Aw
v7XHKdcd222fHRiLDLL5HUHnbfhdEFDAWYOxNX/DmRc0c9cFnq5cZ6saMm7R
MjGZXKZjDUjrqFbL6aQzm0QXlOQ3vVhOtdSdZlCmYO3yIyjjHbN6sF5gpwag
IWYuXRw9l2b0EscgAmL1WNgfO2EiPJMb5JLm4MDEnuWYMRbgl7DkaZqawnIv
yqmE2yXONayBvUIGXaXu4O11Z+jLvFipIBzLKTwUoqm5I5EggLRAvpJYJFt/
NajOk9y6qdxrg8rdPfXxMksfv7NCq+qq9GWqbjH6IvgydtzVbsaqXumpmhn7
uSeRXvV8oAl/XKqZAOfs5cgf0AS+5ZhHf2Yzl45VFTj3Ib7ubEhhUIHW1Pul
whyIoj0iCakDlIVlwlgxtkiK6EWxvjYsxdQB3nIPjMhhTtba4bF7a98FCL/9
JL9sf13Ub94PBhv7cSAxZaDdFPlrSnPXd8hHZwKdR2I8cgEbjd2yee92UTAg
e9t8vH8/6IYzl5Ko0EqGsQ91cRvyOGajTzDUulMFPCFXBIfs9KlfMTiAk1UC
ETjQ98K6GsR+ymTEuzIp+YaQxLC2GB18nbeRce9q5hLla1+w9NszQqD7SuS6
445mZZ82gcgY1pCiZQvppfi8IfyvGzvZX5mqG2BTkPXJVNZxeQjjcbGQUEK7
ImdEpcjFJUgnU2QIcBiYutUE6nXMbePj/PURxZCckayGkguKsZGmjSK4yhcG
bTaASAGODKXoptlQHOg/CmpebwcpAUb7SyK0kPnVCQohVuHDYd7DqqOyh5M2
VURCXWDHpiPggwLQrMCb+D7kF20RJgUgVp0XxVwxPSb6WIxChV+sCItH4cih
tFXoC6mMb198F/gm9sqKJvJ+JXaji4TI6zdSAoii+x3Xlygl16xtSM3a3n7C
6/i1WLxfURw96g2gpWmZ0PpSMD2mNr12knllzj9ZQ8UXMNEXTZlJX1ElCv8R
qSOcA7F6GSisWDrCWbOWPtm/o9Pgh+tVYkeCK7EhYViMu+ygvdJ93w3DLZLD
Jxci8Hf31QcxeD04jNnwTwSK3MYDUzCdexptYN30DJuVjTplaYLK6y4cRE7l
M17VZ50oUKGpOCyZkc5hS3OJz9kwfcEkCJ06MCWWxetQTweONKSw9Dd8SUQM
KRp3VOQncm6VkYRiRE0E4eEytrli4fi9Qb9nse+L8MvPB+98ln7oSXznPyeI
hF9mz4o2L0G6fzf4/Pc9P71fhF/iGs4k7XERlpt7lz2IPlHuTms4FT3tHYyg
XzBHd5tZGezwLnsyejLaxd8G6HxHKtnQBQ8eWjmC++03OYsIDn4ahUPC1hbC
IfHAh8Lh8D8PDsfiKXBW/yqCg34RrMHCQchP/0J74fAogsP9RvBweBdjs1D2
/xxImnhUnqaLUWYN4c0SvoXGHg/VD4BkB6vXhqTBaoXivUb4LSF5sE+CWiNI
6SF5sH9Anwdr+C1x8uN34UJBisUiDAU5TCdl94Z9xFKbd9OQDpyOIi61pZzp
2mPjdUWQJinNCQ7JvnxreHEkWcMlGJm08x4HQEPOSUme8BUHY8vFUbfTjg0w
/1CvUxTEe2f4+bbs6s44820rn2pdUrlGWt/PpX6Mu8H+Zu0pUVnchU30qgd3
bGr3er8tM68SmWuGpnV4nTBIIQEaw6O+TwrkYYlSUvdNrxfNJREbQ4h56vT1
Ivg0EG/vGazcG1vedxOsm8rlz4q7CjSsKL6l61vocV2mZnNNlgjC0chU+ckp
7CqacycF1nz79QiUq8loLr1AgjgwXks0W6TmUrkGUUeBNpxy/M8Pxa3vAJtt
Aml4tmUqkqtpkSp5UcJDVxHXKhtDzm0dmlu52mDFGo9NCJC+SoGqbIqncAMS
sWRGphq6em/f2ha4WNVxPnXVmBj/cIeu3CoBg3UWwkcKGG8d4/GVl47mPuRq
249T+hzti/yayXNYHwv2fonF/0txWl1X5SRuqraUukegk/zYSHq/+NRWnjoT
eQwxMCnPgc287Lbw872ETAqt7sM4me7ANaMcR2hnvHapJobGnUatqzqGde3B
Nwl7tFLl8rTXjeyVk2rhU9prBK3rbpVrj5zp7WiwbyuFEsda6aT9cBZDXoOw
G5B6WTRp2Hm9grzoskvH7ZXypqNihoXiXKGD8Hj5mHTl6QSVu2jtqn5vAfNg
EwAl6MmMZC7yFVCqBKakg1Tt7j1P5B6qQ2whnU+H8+XsHKMrArCmGiX6Xm1B
u1Eu4NpeRY1OdZweQxWzvtmzl6cMW4ocjBO0qRxFUKeeHYCxKz7z3lKt0WID
J9CSKylfHRuQbdBCpTfnWGufO+c9fPQlUD0fztigNV0wMM/+9YQ6yW/3w1Rc
qufauVOik7T24u7Dl9k3OztPUELHlzHbBOnHS3oZUyltO6qgta0I5yBg97jy
XISKxcwgTb8bQSfJpmxeYi+ltWfJKGn3VceeZeFPAXje3m/b/WRpdz2Fg4YI
vkcxrzaSFy3Zi7zkMhjycB1Fv+yFPTzSAjQNcGpPbrPh4izdM4VvPHbjH6l7
wrUkgyhJnyIBSB0pHdnbT9zVIVYOK3vPAJ3EkZZ9pTRJnsybXvHfYfzAszi2
7bEHD1//sHS7RMxyTxamBhdZYiRBSL3b03nXO8Yu3I9dZOpdQF8s8j6g+/DW
eGcgPcsVZwhqtBTQNWlVpilkflV0Kk+/ePoIRSp0Q73AGLMxegLgNff1Q66P
rYsJqJXxo7m6+ii+YFgE8GosX0htydwFlirH/L29m5tJLN/yFbSwnDo5pTaS
T45+5XLesrJf2/FiRLNs9GTkvtj/K7JCvHL3HXE7gIeJyHehiBShJB3oTPa1
AkYjQzBRcaN3Gq5ch/ExxJQML0ve9bPKRitLCL3BGs/ptl2N3sA2YNIfpVEY
0kosylt25JcGM5l9xxeRVtywuAoe46ejb49cc87tcELx0dlxNY8EO43ll3WB
iHsqInNUhgwPleJiXEyvjLcUV97T59VPx/svH8yK5io1MHwHYtUo+x7FBgC1
CQDqAOaOIHc25wRc7JXxUh0ErgdbxCT09TOmWvmgJ/qmh7ChTAznwn5j3nGi
/50IL5s+6J8bj7vNu3jZsmhM62hfHYAdaTnbazjToJH6m6xZavmUgCq75IIo
pSB7DgdwOC/qy9ts85vnh1ucY1DkNfCPaVwCZvPltwdbo0FYJDFVbMZLx+uK
+0YvJ9nIAcxXtT2jopAxKHFfDGh6kyup5lQHStfVyjc4T4WJyZ0MjztDNKVU
MMou22uWYcDn97L+EHFur4xForxOcP9o9R4Ka4PyO61Cwz5n/Y78rSi7IVLy
4a7w1z5oh2iJj97xU4YhE9Miv7A+aZUfpYgRUrBEZpLWdTQiCz4jtWdDw07Q
iNmliweQitorxdJJTwxp5aSti6LlphFp5caxXWpcpVYHH6AZhrH2mqlGVu1L
S1Y+rKRjNIrKuaU1FMG982oCwJVyam493czGu4+IsBRI2B0lOHtqbwrztt0t
CUtGg1cLV8OsjxBrmk43KTO23m0S4fUjchDxlc1tu/suWH1+w4OfsN3ksRpc
H2VHF75y3HbK3pMyM56z/fqirNFPbAufS7G5us5v2fQn5WQESyu4h1L/o6+y
DyZ7YZDuOUDkppxQBMG6NWtHGKdj+tjqljxW0PLprqyx10DZXGFQ1W1fFbkk
QhEQukZTD/fo8rsworsXZUVlR/NOgGyVbnRXOFGK4bmoR1hAJ6RRSDYFAZbS
8VpipboBcPFaGkt/HQHdJBKjW4/U860IQ+9Jp/HAyWtBm4rC3bINjfLaQNK4
Abf+En83kakmAk47Ma9otbUWz8u6RNGVrVUKEJ5Dqkyut1SMNNrsHojQeJS/
BwUAtInWa8Iyu81A+wi6n3PVwdO2KKsvjshrltSZg5ptROuRY04E4oZxjpy9
elNivw+pDaavJlECDu0ZyWNS69lNyk9rHpz0HClb23PCJPxi/+2yJU3r8Zs3
OMET+Keoa/iNpGHnQRxTvb8oJtRbzZ4ikK1vNOMwKkVs10ZHssBJTOuEEffm
FA8S8WjAZ0Cf9+x63imO5tM5JxSjZAo3OataszzXbVDLEvKLO0f554nqF/EH
nyf/4EABVyGkUxskKgzi/+Y/pFoOBQv44IBOrZB42HfIZ/2QaimJR3FXUkfJ
Nv90crDlXzTxCO84wH8rCDv4KLikQh0SkQ+JJ1xvnXeDB595u4VQts8e6NBo
Gsjg0ta33XHumvydDPL10P584CDBGH/4wEFWvnH3IAAp7SVgI1ZNrKkD3NfD
7FoDzz58z1I+enhS/Pt/1p75H9hO8fHbAYUeAys+Zjv/ET4S/XnXE/+BR6iM
GI+QmlQERW486odrESQmbSmJg/cD/s9AN4ZAOCKd/Z4nSCYFlzn4L7+svxLY
iUGu7Dfdjl/NPQfhGH6xB+tu7juIam/XRPc/bBD3kdCbCFZ8/B9yv34u3rSU
vMYs6ujZLx80ClfwB2CDpIkK7fqjOFrsStN7wrwC8YOn/zmU1l3Tw/tc06El
MtlHX1M/LtWzSt6V9Qf5emiKYg3XGeRru59m0aW9/yDgM8cfS/AlWT7XPwB5
7SMIy9d2kHW3/RuyBtsjJE48k5IJNqfEsn17VT5Y1MmuT3n0Dxd1vvYH8eEr
+XpokO8jtlN87Hb+AWcr5+eLbegnVNZHVYF/qDhAI5iz/s2I1RBNyyN1rDo2
kd2HazHd7w7RzynM7z+rwfX+HGrFnyvBWPzmYFw5iI/6TmjTGgDuuhaki/67
V3sjws96NeysAc3fxMFJwfmwHrjz8wWFztqKQlgSMZomnmh1PNldxtfE8A9/
g+ETmcsRALoN4MLqBFGoyMF+cq2PfjNQiFXU1QqJIsQTcz8O5jYv+ShHDkuJ
wuSb+zoOOSCFui9irJT6pvfH/74sG47mS0SmkCwg1pjIVQ0YFGMsb4RLz3R6
QnTWqC0WxBpRhDhlyx9qRFFUxaQbNPPem+45nk8WiG2bSpeXYVMNeh2j2v3E
xeDHiZC+tMbbtz6dFlO7j7GC5ZzNwk1QTtAn9XIwZ7o6lz70gOr5uLje0BPE
d4LLLybsxT4G+KIToigFecJudmmnHrlNMD+z33EnYWgeJD2haNqGKRWFY0NA
VgeHck66Erqb/BYAjCXYvMvUdWBr1gqbIWOqBFC6sEoa0iCmC0uhVpV5PXER
J4XUMiXL2Voo2jt2LkqsDybSSXRLJ9/C6vMxtdL9zFaS+RiU2TLIkjTkrvgJ
TJeB3XbFT2B7DQysK18yFtz1XzIG2w/b092T2PmGXAvunm91HSw8AMpkzgTZ
k8XrBbR3wzX9auHj1q2TXl7ncRol21Sv9Vbq8bU3L6OTVLdij2qGGTYtBu4e
//nkvkDOPFANWBM9A619RMffLGYLX6q6fx8fsm2370TicbTtzePDk637bnyF
8LqroquKBaLuUpRVTKh1nVu98mvYAyQVGJFozqv8iSJw5NdD+hV9hqPsKEr1
chlF2i+bFlF4x5z4biiErRyXQPBwrVSMdFKFWRUcZz+dSgVqrMriaqOGURZS
5FEXqnHKTLnJ43f8Clhl1JxJ3lchIlWIoSc9vy9mFSc/wJQNQJIzrGUksQdl
s5f9m+n19+BvTTX/N8q01D4Yefan01cvTQhfZbzUdVFgj/N8VoBwTTLLmtRk
j0Sup48Be5GFhhVZUF8OvdcjP7ShPJ1B/vTT6dCF89sXZE4KNEHGHr1nuR2R
NE+lBKAUqyVYGIlytoGkHnKxKIPGNU7WZWljT/jlW7yU6wY2bOxlG7xuWTZ1
yP397ze2zSgGOms/r6P/3PN43zDZxmg02vhl8N6TikV+DTTeUQfpNu/LuOg9
diADgK3Ua20xk6iMT2OiDO4EHlvlfMRCKTWApT6flGSahEECGlhhA60idkbY
YuNaDGKgiKomDtuGeI1ICV+pRYKmXOREkOPoEjPvDP/gzVws65bCA0w2I0Vy
diIzon2SmH+rtWicTh3UTbpCXRmQo5yYxECtYA3XLirjFUNSakjnQa5gK+Wu
uKofFV2yFa6UpjOZdCW9TNTviNoDSAQJ0t7tVQWdFA3k0nfPhVIsTWKb62/s
oqeSCUR7PN5dAV86EBPS6eUe/ge7XVzNfNO/oHJanARIZO91OdljFUwG5AjJ
kOSd37a+WVQ6WI2igoLPNrJXB2eHZ9np2cnRy++4RTdW331jzRf7py9HuxnN
I6lmG/atjTX6CAwYXhjUeTe0KDMOK/JFvBBowWyv+5q0Ycw2g0zkxLvDWxB6
3r/f2qNq2EyvJkM4zC5sXe2biepLVOcOvsUx9vDTIXw6pE8ZK+ikAh01MW5a
l8UrgjwcqJtUxU+XetzOXMTQw9Gj0a5WtQxHs72B71CiO1TiL08e7nDaGaf8
ZRx3L0emicXdxCdnAfRscGOR306rfAJ8iLhitrH+mbp34C1/Tsj/Hu483B3u
PB7uPj3b2dnD/+2OdnZ2/jfzQHw+2CG+gjXoi+LxF7u7G/TMe350w92xBlml
vK7TZhQo2JKsaVZDX8AdxnEPTx8+eermpW/govYyaffce/+KX8Ndr72nf9Ge
/t6y57yZ9DPnDlh7GfOPi0ppZV8RSOH0QUWy0+/3nz/36V4ubrsbTL+ifCnR
c5Lh9aKY9Hkb4xgnTSeKZwaphgHxFkOirOYcW8s4UXhYzofYM65nqVGB0L/d
NIrEVMIkTP1usuVcE69CwJAk2QLMXv34/FkYRUh6w+OdpxI4SCaodCQf+8Qn
UrjCZx4gM3XTBirKKMWpcC3u8Bxx8pzOaQBN6uC4PetH8rQ3T8Z7IaON+JlA
tEtzyGDJaqSR4wLq3ZFiXAujkCmRQMNkKoGzHerdByD4ywkrvUQuqAuaugl7
MVfqntB4WZO9855caY6ScTwe8Nv6dtFWl3W+uMLen1PsiVBX2A4Eq5HOUPVe
NMVyUg3lg7mmgXcYXXepXs5PM7yY07B+pxHSqREFmKb45oqAalTiOYUucR7u
LGwbbzYbeNLjj/h+arAmSDgFoiNRrlCU46wQR/PyxlsAdWE9hHCrT7e+S4Ls
ilabMbICvwEBKmxNkFpaWltH/anvnkbNuvna9vQpQ5N+qPin9P6g7ieRDFA0
XGDLyoNIhdsbWmNrU9KdT+boMJSqVv0vCVWN0m9cUy+KM6dDctqlhdbq5d11
HHgXgnbqAtu/7oPcP4NLajo1pO6MEyUb7m+PyRhhZdA7xG5Zgy+CIrldXjNe
UcDG9L5pkHWYSyD7IB2Oudzow6RQ+ew+sufDSPYkQouPFs+azz9/8O3y2fff
/Tg/efPy0eHu44N/VVPNXWKqe8gROHwgJnH+qd/C3PQBFqceo5OXble+usb3
aI2Sv375R4vugFQ4Vrbx4ujom4d/OziAySf7sB6Z+reW3BfXdb/kfpcRrWP9
Le8hs+IVCkzEehngqc/FXGxNPSKxamkxEqNSpmdWFU1/AA7SEC7oezU7MuPL
8nGOTLJWGFqmqFLOxLdbtu0u2HSYS6OZWd5pc+ZHJw1AHrIWvm6B/I7/thPU
AiB6hebGFHvq2B9F9Kccnq7jg2o7UC4B9VHs7QFFta00nZ4DGLpOK09e8+z4
h4PTT3Z3pD+fk2xQzruD9GrqZq7llalWkJ0vL2eNbYWX8x7KcWjPnFchR2xh
/7AaMVI6nhW1MVjL/ZKA02/vjelO0uuQObyPQ2bA0uY8I38iKc0W++MNSM01
vDjBO3K00nCopyngtnRvPD2x8KfiUl65zs+rZWvgSjd1z508NfMUaEQlGuuc
FWHDc/m5IQ6xkf0eWC4x8Q1L/vAtVzCVK4Gn/Qk5QraXGB7Fill0LUp7k/Mm
hcmpk0gZRAwqrGsLQZzI7yhA54sNyBFJOBTGTWE9C+qfQKErK/snhCXN5T75
WRbLc0BAahQQJqsGKc7JBgaeSDBt2PZLcoXuTEmY0eD7gqpSBFZ1LD5aUHc9
lqjCyoVkM3LFT2OplPjY39sF4ZMxaV7W1ZLqq5DBoamHwQetwrOPM86LFoOF
hg0ODa8TDndyQsf5Ij8vqc1S1M6zbG2hox5yjMaBKTdCIlo8inzjEpImBVux
6CL2miJ4TvMxn4y8imPpr+L+oOIjPqPex0OZlfjSLqJGRBH9RBsOT8+2s4MX
x/ifU65ZcnpweOwdZt68pfiJVX9Ik5CClokpXd7slLplXsq+w+ZVriuLWtw1
97SPtwkIxWUF4608UxEgPP0krq+3yPMmFizClovasREAgwTw4MVBUjBK3nk9
KV2zLTDq1Dy8ZPhHwJsJv8s2pQUZGu/aqrg7CAR87jipwRlP/84LgMJosL7J
MsVi/8kWzO4SsAqhyRgPSfl0KvXBuNWZyiTdxtOJ8E38CzVb9lSqL9ZWkjLy
jmrzm4a1u4C9rVSna26xp1UqCRVRC3cNK7KkWMFshQsO28LbkaU77L8xWH0l
8JABbWqPpU6KQFSnMlUvDhB30vdDLItZSMputNyVZx2ltMkMtx0QRGql2Zri
3DK6hFP69ZyqnSTyuLtpQztsWVN4oz3xaPlpMS6B8kldByWxTEOFdS9dWa9q
ClapUlZ4J4d2plzLNv/f2TSfdf3F/dCSTXhyLPbtYzgSD61NnEhOasvCjq5i
IGPsLXZ38K7cKTFwUPfuzmpwOV4Q+UrPropYSLqHTcwRKOPubbtRHHS0pnJD
aCe701DmYGLNYgKe1ZaP/062mmKVrWaFevKTyqq+47L1iUp2hu9/lQ6+F7M1
C29r9KRCDpluq0tWD2mVFPZsDTsO3KsQdm6jRQEgci3Fzj6rqAlDzu2rvcyB
6gy2B95m4YwD39PN1jsNr/31oKqPPfV61q8XyzkxGvt67PuNiWWoW6c1tgfx
ZfYSXriHbrJOam2dQrOIaDMSiXTsxEjmeLptuMWKISXXK05A22LMaapZ4YvL
N8l8lf6cFBBegCglkk48gXIuBtNltpNsIhqCdmvwambsTAm5AGdIPAiarNqW
y74Wbbc4mTPNKf+YoXByiW0AiHtdidXrrjrA2m421aDc5XtoygbmhTyA/58+
62u3jtPmYy66mmqNt9mwYy+V7vFRcJNskMSB3n2asB5MsEsiRmouO96my8kF
monX5HUB4OJuGdhhMKx3p91WXOskxxL1XuPChi5n5nkKGnjVo8SW4f2rEvlb
QdH396hElH9w9aGPrjh0731mWTK7IJEfa6oK/axn+rkR1H65I6n2Z9fGUWuw
j7K4jEgynfeDEok182N2nyTuvqInK2u42I/WrtnyYXv6kMIu8tEm0Jqt1FP3
AsTK6i/2pbWrvdiX0tVdspUvuS8MwptD54Nf8VKi+stdL/E/myceoGssL7GX
nnox676drhPTm+1PgOnWhQkSpVZVgvnwfUYvDeMyLvdB4sMPQ2L3RYAdqVIv
yZf6a1vdAYjNE1nwmi+tqMnhyZotGtM9p9+Q2AyzcW6qvaxzTl8HLyWqk/wW
y+vPcHsYZ7iZrsKrhPLIWh7K9ZJitrqQQ8fC5NId0EcblWHulnUnr6/rpNeq
8ySICscXpGETjrc7epRtUhH3m6Le4iC3cbVECzx2zKEnHmb6AH5/cvivPx6d
HD5Tr0dHAy0nhb4ZjC02l6B/SjwGOyl1WknzRnPUfUdEoWbFYHEDa9tqpL/H
VmylJh/H+Kosrm1OdgyQFUqPqTUb2cn8Q6PBAYYkACbO2+mt6HZ92hradn1T
LY50QM3aa5v6ZlhoZKsT2BDbmBXYvd3HTbNJx+MRYg6HSfl32NuBJSygH/IM
2X5Ieu+TmYJ6lyVcCsH5mYwivhxhnyG2rgYt4S87vYXWKHZL9bO1BDl7ax0I
5ehdIlLQJh3r2np4xsVa4z6H5IIQpbXjowrcfmo6XxVsf6p9vaad1jjqP+GZ
upHxjYtTiRpQkgk1jhf0JZYCY+2muR+M950X0eN2KqDnXNWesTp+tmarx6zP
R94Ucx+QAzvwARYdzFVPy14yOkQWoBGDPGd/TBSCx4KTk0r37ojCyjabosCi
ItfotHF+Up6FD5iMKFvb90xZ6IEQkYJGmpXts5iuMV0CHQ6W1MiWMNLLBGIF
kIiivYY2Hqv76Qooes5Ai6zuAt89gbJPWYQ+5sMhChHbCFzxzWH80t6KtF1b
RzpciumVFld9XtFeIQPaD9fTmLiS6QguuBmW/gGB6+o9cV8mjEJR5DHyAyJ/
MSOllB2erC+SWzJdJwXyN98FjvxBnLySjGQP6SMtPOZhQTMKafziqPHqthJB
50xxVfuq6pjjZb0oNso6y5RjhUXy0bkdF8qP02VhqQt8yydxHmN1djSQYsqs
afFRLVv0/GODhG7sYpko8W8SJaRVDuVR3B2kj4xq3Qx78lJo074UVOMCAFnQ
eyLaRvJM3YCJ8badi56iKgirKPgNvWotMjbKZKbyQ+lDUiG7eLMo627nCL7i
dfE3babl4hGy7M84tKA5LUNNmkEAwGRJEY2djqjePU5p0ZwjXXByD0B1tqDV
qTS8nSFbIG/927dASn5Fdz7254Mr1VLheLPF4O5wVjZjo16Mj+mPEUWPubu2
qlNGR4iC63RXGjUHJHniCluw1FUqSpkmUNsJUZakqN6NdetF+ApuqzoH43Ur
3sAMmHcT9Qv5AeNoXbSNz6PPLuAk4241K4JqHt8dVDMapAJwPMPkxjAXwjU0
SlpqWyznJNqMUkulOJti0nQvAw0txjzllLC4v1XaO4pt4OtzvpCmt0Er7ZSq
DJNxbb/engqPoznwlepcggPUUB3GAcXCUTKsM8oYPFkny5WGNU+6bHqnjFgB
8QPkufAOnayb4PkBQSRhgNaHRZB4AHcjpcjR9Y9M8Ty5X4pnnOHpEwucFrJm
QmcAkfvncjpcxQ24eEl8wGZ5jqtFyVEtTg5MJGwGS1mVq9lxV6ZZs9g4ItGw
WQp22JICoUdyM04E3YJjb6mgHjn1grxRCtew6nfCnaz5l3A6HDLZN8yKEikq
MDKRjFNTA9h1c1F9nmqoJG9GYtlWF7SmT17ZBPH52DKUIsJt6GOgY2jCvxG6
Vxs0cPrBZytb9kR7RRp/Rxa+3DjCUI6cdAm25iY7EXEditSfUriXFGCDJd+R
01mv8VBYy7VDeAQHnW5ueqi7ElulZOSwMeNeqatEGqgIrEdUinq5oRZHlAyp
tF/qy6I8hLycYi9BMIelT23iZQfxcQxzcxL0+g5R/sgE6XRKEcWKD8zG4gRX
QvrwWaVFEkkByyZ1a8guZS/JKhNnoK92DEKoWLTK9MJsi5Vp6GGQbKz0ua5S
5wl6tLHqam7A/apr25FQBbygBDGO5kyKK+IMY4Ych3/8c6INPzQt9+FwBzNz
z3Ye7j36Yu/RV6OHj578p6flrjy9/wsTa5OL+m0jNk1+2ar02pM70mtj8d/Z
jU9YyVFnlE8htMbke5iMT3qqOIrZ9X5JvXfZk/2UaVtv2qwL0ghFpPXn70YW
XfNgeVei8X0VHZdyS9AXT0XjjqZs1zLEJpXFJx2NrWuLNdKK9x47BU4mlYhy
JMhdtxGu8g6yTmd/P8ut44KmQKHPomZk6pGKthI2uabygrSn94r4Pe92zW8n
LJ8jA9wzfc8zarjJ4Xyeh+SNcEknr/TNU0rDbEJCeMG7v3reYCkE31EmRlIJ
SNNeiiWJCtsCkEjcY3HugthBF5OacMBVtlcD3aQ8nqgWt0Iv207ICyHzCmu3
UV9Wcg6sg39bvtUCDL5yYDnmszvlaEUQl+xOgLfJQqWaC925sLV9VbEPVasM
ILeMIX5Vz1VrC992RKRbCzAQ9u4yHOpZdJqvOqAVoPwU6ygezKkQ0cVYt/bx
sZW77TRaFagSImvuHbW/7l4G1ypDiwD0e4BG1uLct/Gk3dndKBat8wzL6tSU
Lzo1R0c8nyOp93xT38q2+3WE5nR5PgyNtNiHgKvqqKANgrNAo7PabTxAoUZ3
KoYWcNgJlmbGi4M7NUZQ+JREASs70BFJmsYKmCl3dCWPNkGe2trWchKsGKaV
L9YDUTeLbc8G+Cm7M4xLwswKszOz+ugpJrSv1SJMaNRn/4373W5nX/+v4TD7
y1/+gnF/XDJrBpjeqMIFw+9lj3cebaNFHP/zlN0Cj3efaHUjLQ3e8Snbmh/q
zhNcD2WfmLAhjvWCye1Rhs+9kQTvFJYjzTETdcNYdje2ggCMyPocdwrCb35D
AYpsENw6OHC+Z80tULs3YbEEDCyhpr8IKT6oR0+fon/p7VsEyZCiErAOBNVr
LUwNhysXpUCuTGdrX78uU0rpW0/pWkt/u4c+2K9qpitALco5sSG6+K7sEuap
LZ4dgIAxGt38MxPk/qk6l6BFv97FPeaZZMoJr9TDRMrHlvSBsdXfbLFodMlT
J5zD2mqTvqwCd0lkXQztWFwBJA+AwS1RGuQ7JPsv60WF5iZMXV6207uJW+zc
Qo4HmgW511MlN2Q7PbvdxhupDuZSi8VgMrlxdto8G8O5tzRgLZC7qGgOdYJ2
NE3DjISo0Ul0ypzbhom+j/hHlSyxUoYRgV3OlohXceV+km4lXAor1r9/DztN
uC00kZ72mLZ0iWDU+IzpKG5RloDuSGS/zVX+mo7M5oPA3zd5PUlmYY6ydMhg
d03W1ByWITBRQP5UqPJfUBGkx11VyoOgN9VBOGPoCbm7Br9rMDfKvqU+CMoc
Tg6/YwZBNSeCJvMRp9DlMUu9qfx+UID5H4bx34JhbP9XWOQqrsb4fC/O1iko
ayL5dE293K9ThwiYy7JGx8SiAmnQxdNx+ZCKSlEFVB3pheo7FMACK+66JEFk
htHKNgqQ7nRTpJot1CHHSXcStEXtHPL5GN6OuRxaTUMfaU/wSraSW/fkxLvB
pVN0xP+fcWIzFoNysfLucS03k9X5TadSz6rU+etqapiQJpnwCn0REFcXhAJN
TGXxEPjINW0gYlzqwcdVdov9RKIHcD2xkHIAx86jHaC9h1hiSBvV+dIxmw8a
Kt7EAdXbmfxZmw8o/xZ4NOwc/hznSJawvV+U2YFYxm08PLN0WQkqaaDDMaev
Zftc6MthWlTKBUmnj223o8HB4I40yItsjSSiBMfo6tUzSgR7dUDYjvyzM2Dh
zJx8hVxK/qClIhbhzJh54jQ/OPxi4bIeSFbE4jR5dz/x0jgLoy4usDJCTiWH
nB8hgGAX3qFBYIWbgfe7IjCdC1esqlhDWrUU4fR1Anx8cWpUIqkiObloIkZG
xHYuzUQHawtte1t6HphNTCGDnM+eEXNLy1N2gOOK593ktfG6diIuvamermha
+54snSQuyVVrmIS8bOiC12a2+IQLn6AM/yaRZUHRJkcxBXa+DqqHyGiYOIHe
0/QWfSM6Jko2eY9wuK0oCjr0634Widpileukw3waBGdlm+QJYGq3te3Mcmhw
RlYfGGW2OS8L7xxLwJ1AQ+IgNjjGG728CVyBiy3lNLgxxqOgEGFMVjpGd0ve
K6rbmG0c7+5ERmsWVrVw0B4Wz6G7rmXEzB3or39346vJWM3JNDVmoy9JoIgp
noelEnEoAzUgcoKgVLzPm9OEbPtptINr55piNINYt4WQJmEI+/YFbzOfXCmw
dQklvlhpWwUV9WVFB/so2ijr16Cr58lINGK2JDPQ0VMrJBB4QKEHChQvUC+r
rZe+pbQghMO+dhBwgRjRWJjaUFe3YSHdFRpyeLZGX97WPd9Uy+kE2AbfAwnB
PdkfOiu/FuAZ2bjogtpuSS/peCtUqW1JgUvNuHIuXltVTqNt7sqsSkhjyVSr
tRKsHBsLjdgCqgT5Mubt1bHVrZqvw/hqY9deGUy9rcE2Ik5yroREUrsCeRlW
KizbpYk9GtPhnePyGhYmRU2YAW7gclvMvZMKT5tagRK5pekMHNZU8XVfyADA
uQMYsHq7pQmyytm6m38UbD6srLiq2BTiYVxtUeTa5AUMW9sRiNBAkogj7Ksb
6TnT3Xxv8XrcfDGclbPi33wxLFkeLds0DYyqBCZKRd5cmU5yxEhJs8Ib2CTu
bJQiYORgsrMBqA7JEqXbUfnaSKcMKxMN2k08IHMdB8U7VdqEx8OsXo50InNK
Oo3qBamxcZuIy3VVularvqYS26LCTt15fV7iad12UyTmUcLrTX4rmchJ62dH
+6QToyphdhWhFSxUYI2+2j2N/TRA+wuSdxsMBpWftV6UT+OJAneFchVeAESC
T7xeJb6zymwwmd6sZdbvPEA1Ev/WmoVMJ8i6sSrP1lWAwzkQ2WGJ1lJAnvJz
KnRsILVZSno3IEB0OFuBY/I0++7wTKt2jVbqOLxJMZ9rpM5/TZUnui9mCEmi
7NygCDEsrD316TGC87o5/UmwTpOxBWlJBFx5iTDbkgxumQb0vnlyfodRF55Y
aeP7L2sC7bEuHh/sH/SbFWPwUoTJx9gVU3eWm7HeZJhPTk1YrW2r6S8z6Trw
YmHe6W3aZcUhR2Qehevk651tbaeI8LYRvY3ComP1SBY0xUE8QdxUQsJhxtNK
fEDdfLLeXfr+2IWrhRAMTzlLZ1febxbTHmfT8nT2PACZ9bE7KNjrS98/efjl
Dtn5pGKljP5KKuDyQcDAvkTdvrKQY+ZWce3KR4IVPraRYwAWEi/ZLGdWkU8h
D+fUuRTeaMeOenbrbh65kt1Dyh4WHSkhdeohnlWZ1gLzH7sqkqJ7avHFgIV3
Wrq4Eo0EhsUiB7gDa0JTT9NW7BczmQS6C9O+edx2FxgW0bRkn0vSdBrJ3FVn
0/pYE7IpfmwSa2Jpp1Pu8POs5yeoCzh4p+jSW7YrKIM4COoP9jy/74sfrvW8
KXl47/WvHDrLfrZQNYUK73xPsdvkY9/5kt+SKaiGNbSEbupazAZ6y1/1jekr
3LmYHuAiy8bWusuGjNjrjw3/17qhwah2H7qLmFVlH7SPr82IgQVMiMrHwUa8
ADFoPhI2wajdbRzss3a3qdd0696gWVHX7JEXHgREZOniHTp7T6JYcETIeyWG
pMgQaKaWTCIL5mJVQByjPksUMGMa8q5jTurIE6Fidn/Dkpj6NVygZxVrVaVZ
I7sh7vxpesDGeZQcE7rv4yPKi+yyvC6ky5IPuePWAyRRUYKfiOaWosEbPeEY
+LILFg0jLY4ufOx9EB3kTN6B1hskX9jJnfG/bFekWzwd7XZrUw32OYl5imWX
dUxk7OeFt/1TF6cgrR9n1ad8Y848M1ayxmXFadsa6Qt61AYOxSBxxBscYwsI
Q2XORpe2Wl3QCxfDLS5mRT5vXFc1Y+BQo6A2QPHmKa+odfMFNG7n8IRrNyQO
lhSyjs8iZcXoJs54JAhSaDqJ8lWNBrgB0LPdEVdCQcEkihi7DyYYG+T0Fg3P
D0fZkZhz0qEH3qqCUhAZ5h/BWhiKCf3ow5fD9QdbCvkKzjDUtF2JM73and4z
QQUTWO9jA7v+keM4uHUDtYKEkk5rV42mMzXaRNbFcOi1+4tuRZDyidPXWh/H
lkF29jHnnuU1Yhmh8XKK6fAsVGs+syt/5frttMWi0aKY+TlI88Dy4D9U48n7
eMNVdXC+sK5ZxiH1qnBaggYZigITIJ5qasaMwnUL73sZh8bw6ldoPba4/fBm
EFDmYsGvxuNl7YoM0cjBtW19plqcpVsXeYM6jo1+Twp+3mDJATtRbnW47LpY
aKp/ru+3BVLftr5V811vgsAXcQyt+J9kBnUghvwnWGUYlsrcyLZbcbpbqnOR
Akb4v662r/yOSBHytFqEA6mhx+bIDDuRkS1unfA4wtaL17hfNAe4mCVzjujS
E4lTQ2MdMDmBRJxDlY8XpcQXdAIymt2Rsg2n33B45a6a5Qj+8AHckUI+40Wh
fexIBUW8p8sZVbXMJ8TzBL4bwTtDqacQBHU6uxeOiPZIiY0ciGEuZRr0jWuS
ZsE+o+C6JsH3Pph0PXMgLvYX22CGDrLfDJi+i+4u3cvaJ3zeGLQwDThha/Qe
dWf76PjoPlYMF91owzvpIpt14C1BqatejqmZOi4pN1GRgIoYrgCoJbFdwZu8
aRKXzwtywzkHbkfUd0UC+7vTItDSWq/Sid+EAljTfMcpliQIaE12FaE+wDYf
djdEmNmwTyd8JDx8mH6QdvF0A3OiqjXBvj41QayUV/ghrv+wP+M/xO/v0KXX
+b+Wfiudcn9r9dabTvo03HjihIK7zY5vxkd0RQW+rSbV8XOt/kthSfXtjh5t
nfemfAr66ue+CphNSl3R2HHb5WImCvf4Nr8Ln+QfoL/xMDvsT3ohRln37gSJ
zqHtqSuhUI2g+0kdGiWYulDpKKiwnJ+sxYuFXFaXeDdrrDcl4+S3+89PDxWl
fzsZ76tOiT4SZfQEWWkWP8J25BaKIGk6EDtf8Yp2xigHjqJGqC5+6u7TDuRw
L1q70gfuBGNivlKcK0Scy1xbayBpHMwfqQVhV1BfKP9o0q00f4dsuLYk+MES
LuLN/4iR/wwxslhLjAwp0d1SpCu6kvL9+caGkSnYpaiLoWxFO+BAGOVVeT9L
IrWTfJ9njsrExu7NeIphx/W41XGDPl7pBvUmwlV+0BAWAX0yblDjj07I4uFL
nUjKdMzwh7kd1/M7yoq8o8w7OoKtOen4t2ywps3O1m6wZnyM/J9wqBUN1pyz
8b9Yg7Xsl56X/B+DnyO0IoYx+uX/0AZr95hpONS+VKe0ww+dCVYLV3woXcl8
56xsVbcvbozVfSXp3PtZjXjuuXV7eqX3zZ2edNv/OAjf96V+T+VjZUzfhD2U
Qup9L1sGiaCWfHoKvMp82eUpmhTPT2m2SxNVVOTYbSG7od3RioPYy6hqfTnt
dJyR8f4g68CopDgT5cMaRpFQafpEdUh/j0boMypXwg4nxFSBWTUxpt/Onky4
5hCjbIa4btJjUzUnXZRqSqeVdfwqUqEEHqYdslR8Jm/6TS2dMKCuR108ipNi
UY5NypPzywaW12S9wGR2/hp2dfafei8Qa72YQj+/bNTPqH5QITywHM7TmHVa
GHlXQ1zAS7bUbeAOW6FiamO/7zCYttcfMB5XtRZyCJxn3qK/Tl6G1h56uLPj
qt3y5RKVpCatyBbIf/PmwZM3b7QCUSe+jh7SNNhREvXReazKlDXFsJ/ELeCB
U8h8VWk6A1AGrubluMQm15SQ3cVw8RNgQ3DdFje5BVbQ2L+1i32+4FIgeLhe
ozYCdgL36E2iT6oFa2duDDQ2JUwcofORG+e3avHVxXN1feRXQ+RXToBlz65s
vd+R+mVHtV+PhrtUwaTFJF2IqkO4V1Lt2PZlLt9VNU3mdJg8rHXJZ3L5/3zq
yctQ2tkbK/9PpJ1FD+2Ms1P7SGcKsKPB/lQLK3aocUBQrXn14wlrsjSj7jpt
OrqLwia319O4D+8lUYjimsjLkaldl8Q/f0NyJWaBYQllkeU8CkNZwx4mtl1J
ahdPRt8qJKYcXQad1oic2u2PqlPivosW3gKYTNrwOOssBHcaIddhZ/De/zC0
NENLg2Utljb4JNtHtMoBTdDQ4xoPa99W/TZ7+0lvY4DYlGOrOhRv2rguie0n
mO7kwQlllH1srcpkTLX9m9A844Muw6oDQQROWGpgJCatuiiyZ2V+WeezeAst
fjfh7xDVZ1XTUnX/yZKJdbL0XlBg0akKzjQkb8g2En2XQnXEB/4E6RcU0+Pe
jbpeMX7Gq4/4CCU+PKbEhsN8fAXq08SFYJi3WL3y78p9+Ov+y++QoS6ZwZzK
De1vHDHkh+mik77Kf+9lfTXoB4Pssq6WdI6pQfXLARl49BG25uIHvibUv3T1
6eCn2/vFj8J9yZqPHMVVxbprELg1yxnd/WruXw8Z3aofwBkGibxZIm2eDKlI
Ur1y8vNyDpfJv9ktkdX3evymeQUO7LpiPjKE0xm/boJB4LJOi9xslAJR74RR
atJp3uBs8+IGAIWn0DvKqnNaVeU3HLADrp74vO4y4jc7FKB35ek37wwR/JdV
c648WT+nWph67ERISIkivGCK0M8mlAzEpNbSE8stLD+IuZLlDyr+5MqpuvEz
wqYTpauRB6EM3wkSTlNfFbwGKwgwQ+zrg1fPDrNvDr87enn6ByD5sLnenht/
5LJ1Xwx3nowQUhuDgdLXnjfIDUZAFW9etjva/R3GBM/zGfC6HISKjWU938MB
9qg0SrP3Zjbdmzd7dAv6Bt74HYyxALmyfJNd1/AB/g3/K2dUboleA6LYAte7
EF+cPF2Pf0d/Gj+O+tc4yZdHIFPZTCp8UYCBuM20uEbTqCcPz4P2SNHXhBq0
VSMzAIZkX+483hlt8ORO2M829Ku97OTw9Ozg1ctvs2MJm6CH3w+ibcXSSbC7
63G9entyYLw2xiXTRcz3v5PRbSqsq9TA2o2G03ufte2GJnfCvF7Nz6u8npg2
CR1o6EoJJvD2XhYahU+KGWoBpxjeVWQ/FLfZURA04gFW1Zf5XGKJcdSNo8Oz
b7P9l0cv9rOfgDzgaN8he94gbJS8PXryp++yn4rzPfj166u2Xew9eNACE2io
fPIIxn1wc/mAqig/+AOtF55/XmJPrOxr4CrTttqjb/+oz/NT+xTdjKOetsXF
RTHPvq3LojHwwR8doeFnRhf4zB+bEjGxGY2rWTzY4bSs2ux5kdc9I2XAvuo/
jjGpMfX+2RWwwgY2XM+L3iFaemh4Qw+tWs0LQJC8mGYn+G89aRzudYacjevP
EUB/bIBSFdNZPh+N8z/wYUSoey+8dbfCpSvw7dDeR67kSZ2RhI2FkVCHb1SH
j8dxG4hvM6CnKV6CZd4x2LDotAMEdbaYXoxonCOTIqUZwbZvzAVFlwH1mFgB
S0K3O3scDehr5FJYNxe4HnCkT9Fc8uk2/5u9fEW/nxz+649HJ4fP8Hcyfrhf
aAR5ivUx/5t/++DVixeHL5/xAPBpFnxEY3z6Yv+vn7LQ/+mr47OjVy/3n3/K
wrqtqJezUhlVn8wbQ7NE/P/m4DjbfZxtIrAf7u5+tcW/frn7xeMtikDjyYg0
058DocW3WMy84EbTlBqSL8o2n3KCDYfVoEVCoHdQLW7r8vIKuO54C7Txh7sZ
kYozCVqUHAA4WnKg+04UsmbOWmi8loVItY/JyzgoRSyg/juR6U4KTIOj+lWl
NHFbUr2LrKmW9ZgZN0s0hMKN6GcVX86UnXBbKtdJkM5iWTfLnBCLISTNFhk8
jGygGRak+sNbYd831u1OMR2Kt/nN6TMgb/Q4jYAYDgtDO43XqR6PxgoAD7xP
G6BLl1hGS0NuGwHBVAwHFT/9TJCDv95Eotsg1aWSRYWnu7LqIVoGthzyc9df
XyoL/g40P8+WEH3ewM/vqFMySke0HPiU76hEUcDZTWnd86qFGYlL4WSgKNAu
Mi8FCe/t8NqNIynopTFMST5HbO4v8LMndUipP5CjVCeOUoHIqqyNhJwHD7Kz
ajHkdhhOUMEljve8IJKSb53syQuHgQhW9DyMsphqpGSC2OALSxMCklR1dZUw
8neqGivlZPBKtB0IpvDYWupzH5SzDTdFq3Vy6gKW+MDJYBTyInOiVqASB+9j
7OpDu3mjOflHfs2XlzOTBWoesTFBG9+opTUlDy8XzGfM6CDKU1ZTNS9kdfgD
bPsikdtnl0W9tJhW/M583IWTQAsZRXfEqA1UzrkwP0u/31+CIdSmGiepJspK
4MfHGvsTjEFX1iGiD3BPjxW+G2TOYg+txW3oBcA48aBNrQHp+0EKuncnyX0M
zPfn2V9GT3a+yq4fhYGiPs4ZuRL3/iAghBtGEoHFPbY9rd12ofne6bN/+nK0
G77J6daXS67d4vpK10AUm2zz2eHJVjh1+DZcm6OzH2HtT7/aGcXn56pddCuc
eusuuqbY9Bu+bl76dQrPwkNwPVAV2mTHwGQoxYxhhN5XmYaTQPD48dMtVc4c
GoUv3llEzgRcY15H+LaNzosgAdirfUoX1WI51fCK3KNjRAXCESiSHp1MYRl6
0+PINqOyyNzVmgTj3LHtZUfGj3uGpvtqWl3eZkNGF4cTEawQQfYy145GLcJA
1spxdqh4dMJ49A3iUTjAQT6v5tjHpvPwAVYWRVA/s7gZvh2/g4iavhJ7Pv6N
r9jx8hxEhIRaGK0vMpPYv0+cMZB0OljyyfNoepBm0ErSXRMiIjeEO3Nln5/n
t+i713SkTUDp7nCcIvFnZyB51E+zhnRj4m6xaxAo/ZmV82HBme5Ntvt/LwkL
+8EHbTSCauzbXVLgaIevSsWN09LtNyIGmmDqpISWVGfcZWa6Dhrh61FfqMhY
cw/yZBKrwpdi/fdOChUB3ZKrBP7JD2/YVBYkvKbK9uRkJqOpyvQS2Nw/WpjO
hs571sXizB6M2/NtIfvHQ18EV+xsTOK4K2WfYiD9gymO+NCU/6Hi2f8pVDyg
tPZfSvjAinxsHz98+ez0D3e5GA45msUnKlEtd5td2Rt4OfgkO9p/uY8hON74
00jZSWc8MekG1jFBb3JltIZcxpnokybqR8Xq28GAHrf3lO+dr8utj2YkhwGl
2QOlhgb8Ccf7gcb78eSo2fC+Y+tUl7I+e+JhwEf7Lsczozj1/Jz4C9JTpgJ/
2JW66ons57Pvj04B7X7J3EiJ8ufRSKknUiMpJbY/UR0vF3BhflauqTNSqvLV
ipG0fnBiTXGmLmbbsOEhHCmot52lRpLC3l7C7tldWCY2GMmxmmTh2iYa6Y5L
CDfpGIPyxreJy1TYUqaW2Seyj1zSHmvJAeO1mXCGHXMZ97aSRhHNFVdkr1x7
ALEj5tMwuuVMI6QoOYquJvB/OGfJMl9S+a5kmb+mqcYlsXVfj1Pj1FyxGdBG
qlZ2fWcoD79uyjzXxXWRc3l48o+FRYxV/GEi5iTdEPbZ20+aYvwrmrbJFZsd
vrnKlw2Nsd+2+fg1mt/ZXIB01H2Zuy81Nk/j7Z5Vp/rtpol7D7prgJjZjkdb
lBmWvSgbadeRj4mMTpy3FvnHob9bGo3WrZeJlahOYlTBkDSyJ7lx01UEfV4U
psFzBMI+9dPk379RKZTA7nETuYjtAxG0t7BFjDhdXSi74xOdB0M5daO3bI/m
hPoucPkl2l1ain9EHhAVt4nbondmpuzQsDy34K+JOvJlvPvCLNPBlZ0COrTi
+SSMsErEto8GL+DqYThtHLfnS5ZdJKkEyuy+vBf5+rlGaVz/kys7hUyp2Q53
dVcDGX/rUjuF6wcIfl5Kc7AL75clH+1F/hojWOMDoXplS1w0S+GhA4ZYviul
MQ5v9KZGPO7ujh5vjaIrFhsED0zfSU8LfoWVAChboAkHGFaD7TwRERaoOy+R
mDJrmvG4qSOQFHOK5RUQbruib5NJjUmLk7CbCZDlugVFGqNWAz6ziY2kt2Us
NoJP8tutbg/HlAFJrkYK7znWbUWDcFfKTugHu9Ux0EcOoV7O+zQPqjwhSF2a
8qNZNY8fxWBoFLUpRVpLXglTSS4hwSviqr3HiCK3wGlmmNhk0kuVkcl4LnB3
BRjQk+Ngz840lKfbuFHTAuhIoblZRCzDpjZ8Iq6jBmMP3U+R7XxPgo2OMr5h
k2y17F1Yxy9cDd21ulpeOiMhtRJIjeyWNOHKZL59gNZBw1ivtTpKbWsbKtgd
m1CkwQeOADxwtuhYZBkuYR2VDKtnVXpTiMH3BC8bom3PLIJsFJ8/T4EB4PMt
a/Szqo6L2lEHDdMn6i66qPX18cmg8+rItXPqFLsJsvK0ukMyxy7unHheODLI
BJMODuvRDKLwsh5BSDqSs7I16Rhbkikz/QGr3LrbhS8EUb1YjpClEmPycCY0
x3lWdwY3oilAYlaimyriAzHXOPVs4YtsswcMW1EQMrUfv2U6aZ233qjYCSSw
gSANrHbGMjp7MqVTb7M8Z+dCS8rTOF80YgMj8kaOLusK0wQYsqF201pWQ2of
5xtfbVPMgVxh3AvpAlhUj2tzNqYtizIN681nIAgbJVjA7eLN8gjOHtJQVV2S
4ZzTd8O7g7eZ/k6F2g+w6wfl4GgZXkfKAd9d6Hp6YkD9/eMjCXtj8M0LUr+w
mCpclaDaDwMCAfjykAPa6KifPny8K3lALtKNcWCHY7y/1eZSUpME1garuVwC
3kzprCcVKVNsa+Clq886iP5WHHxkqwU+3vlCTS37Y7SJILHmsIPBT4XUWp2W
ryXpIZ+/FtIMfJgqT1yXxQ2ob1i/0haj/KZGvng4yg7yeoEuKBAjXzWv4ZuD
HIYHkWPChuLvQZ+ry9fwQjV+jRqO8rkSQ1UWy1aPZ7yUzl9kcyRFs5GmCoBa
F7B3qsCHWebnoP/gjr4vsUw1+UIPpD8DenCzQzhYDM0CzoTqKiJiW/wCIhhc
uF+v+CWQvr5FVKBYjEkNXCnbeZQN/xB88Jjq0e9PUC/B7rD5XNJpcAsYeyJW
yQ01/2wY0mzu7TZ3w80+2X3qxhsDGG25yLxNJq5IziLJ9RgocUj/EIkvEVgF
ikl+/C/c+LkJ5qTR7ywm7Ef5EkYx0TDu8oUEulkuhsX8GumuvvgVldGYVShl
Uk9C1LNumZAsxw8vqA6zXIc8ACueI9alcWM93HFbsYEGrnKLlsvzCX+LKWKX
1ANxiSf4AlkiOZosMrf44ipRtbFgp3GTiPe/Y5bNW0Aa40S+RCLiZt9ADwUS
ZJscR7yiI/na4jAr9uEBuAsAlPaNE+91OD+vNS2scWklyl9oEWj5aqlkrQz0
kE4VCR+KPXBIeEldxwjEH58epu88IvmIcPxW2uhRSqkcS+L2PYxv3yO6fT8u
WG4s1M6MViqqRNtTQQgB9+bJmEvAkg21wTaXEpAOk7/GIU7//F12CTC8KsdI
s7k62ZQaiSHJox0r3gsauWw3fP8CCDDACdR1eK8eX93CG4cq4Qg2sL+RCnJX
LabMSsXot2+xvkZTTd+/x4tWXNPUBVEttFbBzYNzlted0MK0OGMbGdJvEMA6
QNyNgfiQgHgk9/NJ5tpGpruNzR1xIEZplOb++6Bo7L8H7fbXRf3mPfoTzhJ5
i6lywHEi1Irbhzt3J4rQDmo74fl/J8eJ/UipTdMpWU20zDI+ovg0sENxqUNf
b8kU80GNk9U76pYtSaGqW/X4JjMqipxqX7pihyAvDAwdhaszl2sFxyGx5Ja8
OWgenJ40sfnN78XUQg51uTxsx9nm9WVBtRbE7GQ6tKHWR1cFbk3XMMvFKJTS
OPoXVkNGpqO92J1z0chT3vUZNW/JEjRjJ0b33Qjdp2gMFsoeuFed25ltHj31
8TqFRsN4aZ8IHNYDOGflQdo6mh6jKYv7kgw/nTty/Oq4M31jU+/XuZKJy0NN
f79RoqKMe7fTIu/G5H8meZE4rVFMJTZgi5EWkxTOR1W/qLI6mvXQ3cnOGDau
SOv4ecbtymWoLVr5M9CNVE6UxX+J7+KldNyx7zQl/z7RTSvsSW9q4ew30Tte
YKBuTbYKJz0ZXY+4MCYHYXh/zPmy1CILVCDW1jTDNB6UmAQnlm2jZSH0rvpl
YV3BJHS+UOgoooXkoo8qbGtRXGeqXbmx+IaL7yzYTdiK6bPsgMr8WPr2yRND
4uILQUoo9oxGRbXhYFqyRmilSmALqBvm3FB4CP8bo8i7CIntJzGx5Yr6n2Xf
g8JTvC4K3P2eo76uibozq/r12tJCJEYRDZoA5x+3VJE+FptKMSXC/WJrvriT
dHHJfGgc5tvyTaJwjTNs4K3588mDE9ARvMKyKmfSuQdcW+5Ixm45h8TTq8QA
Kac+zU9FC1g2Tj+GvLRZng8x1CSvtZiws5ZSapItOGL9AKU2wI4rUos/Tri5
0vkpenmkQYJAeVPwtJkW2DEB6aR0r6Vxb8hrAGtYLkYuMB0ew8/JwJRwiJBI
oEborWxTGdDO1oiRa18Dh8TMMuXoXzLku5wZyrHBpnfnaJBktXXC1gxekUG9
kZvk8VYgwrRElUnCca2G6BR4178WC+l8c160LbEwLBcKWkJ7OxqEYpUzTwY9
KihfmEaIASG0BIU+a5TM7uBUmDnSVN4+yFoiDpMoqoLY43P3g4VhAwwkVjg5
ZQnQfpxQHmH4/bcHCwoIYrIHzd37HGSdrX7APhEb5n2RH7J7RDw2jEzCxVL8
pBR6qWsg1y6T4ELbx9C9U9I9yHrdcmw7QpbkwsfoWSczRJZsGKrj5PNlWsyh
xAFkrrTodRGGs9m4tXQhHoTlpko6D7eI4LMbBc/Dqe7a41NoY1RJYY0KCnLV
HaegEUACJNnZLWDLqC9KpQobRJW7FjT9CobN1CNjyjzrBu2MEiri0NhyqSbS
MG9u52MJwBkaG5h9Bre6s0Oy9Qtiiz8ePHSECc2CIiuqKNGXeUjsD1a15lKI
shs7mp5b58jYnpQvWm/XaEStlgvZcLwOMvVBJiEfprMn9YCTkCt69MeD3dEg
OM0L4BFoeUy5tW1RFdEaOcWoGreUxFbk9fRWVfiV2MTl5DXrvdS8mV6PNLX1
wcExt3zCUhLDMZphSwSSu57TDLVkZjtlCThqISxkyiGRiMheMZqK1UZzkn4X
MD1i8XO82KXJLdr85OEOcbMf1WyVzISnZdtQn9RTA2I7OrLv4IuRRTy6CPZp
r1TIC/VlOlmDvPOCcu2HDcql46Ye7jw1EiyfHCMC3Q7lPfgkS7Gw+6qrYAhO
yZpH6xvLrAzrJYikBYGWlYRZwh5BcnYcI025oA5+cSNmDNwPgWgFZ5hG6Wsx
dfZhmMgv0MZak3GvG42N3oGmNk6ustIWDaf/G+tCLc+Fgm+lgNhjLHsmWq9z
PHDKrYljMl15aStADUfadphZo5UVeHB8z/jefLiUFnhiIjZ11cJI/MZwA7pa
tlYY0URQ0+oK6wN1TwzASJA/My4K/nrP2WeVn0hR8D8kTBO4B77gSyTgU/KJ
XTKGTrVE1cpZHmXHPz5//uD4x9PvcYpkwKAwsKTqwxI5LcE76x13kQg+WcZB
NZst56ovOujc3ewTSZEISVT2EVgEQhykyOHx6Q9KYJ1gh9JlEG+3pSzYRyWG
rIQ7NxAWcGZmfl3VLIJObzm4DYa4Ki/xsSnlzuhxktmZMYIETEEDMrQ1RfAZ
rqIujH0XZZuwzlanwhcWwRQDGVX78VU8jCtXZSAV6OJRrGTF16fF5jMkJVM6
uWJLc1Uu3HkkctGsvulGfbydffIE/v/Vlt+aJxfC0iRuNJfy9EpBemOeLogn
d5bgw51YL0fjXZNY0xe4FpEieviyUD6j5tN5a/0TBDgXyuzWqFEC9sPRM6bH
/klFAwfy3a1Qx3GN1eeG4611BRxP79j5tFZ3RHwDdxkM4OXbJEX6aNRwNkOx
FPXjw+liWpIdWf3I2UNDy4njImNwgmHPcte2NrOHiq4q+bnKwDlqqyER1nD1
DEPHmPg3EnpW1GIkpAo8aE2D8bz/aMDpUH5rxswU7dlw1bZy+CmspXXZerZL
kUERQzekwY4XhctGsJ/qbwPc5sDEA6KYGDVsfORPNKrx5AzQVmSy44zYIFa7
yCGn0usZTlx9XJKxNtm6Q3FXCKYtNj7mYRtX789kv0AjNhQnlpnOza2qEHFo
qeP5JgfFv8eRHER5QFohG5oRmGy5Wko0GRnMIg17CgpjW3OvF9EYUcULa4QK
44AT55q3Md32ormuC5mPtnnDXq5z8oIq7+BYTNqnqmEj65f1vC6U9oIaO4Te
fqtszzCtRN24fOkwoPe6nCx9LYlEcAaro4Ea3T1DxIrf8gjpBqOfRMWBHBnE
YpqPnffKF0XdHT1iCs4me7cn2oC/5ShNatKDGukpwGNJ1Uc4Eiby1FNz7BRC
2N5PdCAvJFRyIrTXmU0d9CM92JJKd0vl8jrqIoRlO8PoYZYVMQxgBrICBSbZ
ci/ddooBAh28OLYlkSXzY4qFZG4KqlGDTxhtD/50baMZF9RIr2WG5Gx9KdLg
brnTFNJpfPUmDonN/2ScRyt5W7iDJbAYH/4oO0VBo5gnQlXQEzGgBFguogOM
U8PVuVH3Qit5FG9Ei3YBZSPnBc4ptg6YS2nVksZaIrzIGPD3QWYuBR0qqbA2
CpH0l12f+TKpMBeRWllLsEdNWOxiQ8Zl0YTOjfwcJ5Oq4bFzA4ORkfQCXJqF
l87kjNjbjEFG1ZTQZeQCIjT8AhODQ9OcsQdhxgSaBHNVFDTSD2f3EoU/422H
xIMg/VvKBskqwlvRdJAA/dEu/syhCno+4XDfrCRkpLoHwS1E4I0WRUeEtXmG
psF3GI4/IZNQ8ISvCa8BuxTIozC7kRgd4r94X71SJ37+tnCSKn5iGwOjeVHw
c5DZAtUR85nnMzEEkY4qQ0icmVwuTpHexzJVLi6fjFcuHg3OsdFGXdpSwQek
ha39MPamxJVTI3PV+pS2qZ/UU1LEFgYDjHDRwKsYzZ8U19kh7kiez6VYdRA2
kF5q//msFJbsc4rhKRuJqiAkrlwzd34ilLzC/CbDSOVeeC7D3NqTcFdmhHU9
jloPLhO96zfOEeGm6L3S5m02TzilksQYliRo0uHxyQs/8WjFBSCzi9ha/AUI
yQbSHQogU8MpxbuKzsGuXyKskgOCa2NHwygcNaLHAba4ihCsYBgDIUOR5Gf7
hugXTtsKVD4WQIWGJ7qBGnhLCz6K3VEGQFqX4USWIyhRarqsZxWhIXWlo6Oo
q2Fb48zxzLhYN8UiCIJX4t8hI5+Tz28quhMWPXywbqj3iMI3LRzs0Wp7VVfz
atlYCxpTGC0mwQIy5cD4wAKdIyY3Hd43JjOGigPnBcdJsYqIzi67hBmqLbX2
G2415B/lu6q1GQ/iBXPXEGV3HrL2zJlP1pK0RS7eO9oaPP0tO/t2nXrlLUYh
K7oL81TS/Ecg98GH4LRiNEs698bpCKM/y14aARs4QU1vqDcUJkmJTcnlnbsA
aia059USGwWQtUbaA44G/z/Oq4/O1bsBAA==

-->

</rfc>

