<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-00" category="std">

  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to the bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to facilitate bootstrapping 
in domains featuring no or only timely limited connectivity between
a pledge and the domain registrar. This specifically targets situations, 
in which the interaction model changes from a pledge-initiator-mode as 
in BRSKI to a pledge-responder-mode as desribed here. To support this 
functionality BRSKI-PRM introduces a new registrar-agent component, 
which facilitates the communication between pledge and registrar during 
the bootstrapping phase. To support the establishment of a trust relation 
between a pledge and the domain registrar, BRSKI-PRM relies on the exchange
of authenticated self-contained objects (signature-wrapped objects). The 
defined approach is agnostic regarding the utilized enrollment protocol, 
deployed by the registrar to communicate with the Domain CA.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch 
(automated) bootstrapping of devices (pledges) in a (customer) site domain. 
This includes the discovery of network elements in the target domain, 
time synchronization, and the exchange of security information necessary 
to establish trust between a pledge and the domain. Security information 
about the target domain, specifically the target domain certificate, 
is exchanged utilizing voucher objects as defined in <xref target="RFC8366"/>. These 
vouchers are signed objects, which are provided via the domain registrar 
to the pledge and originate from a Manufacturer’s Authorized Signing 
Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the 
bootstrapping and is the initiator of the bootstrapping. In industrial 
environments the pledge may behave as a server and thus does not initiate 
the bootstrapping with the domain registrar. In this scenarios it is expected 
that the pledge will be triggered to generate request objects to be 
bootstrapped in the registrar’s domain. For this, an additional component 
is introduced acting as an agent for the domain registrar (registrar-agent) 
towards the pledge. This may be a functionality of a commissioning tool or 
it may be even co-located with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be usable also for a pledge in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the 
communication between the pledge and the registrar, when the pledge is
in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of 
arbitrary transport means between the pledge and the domain registrar, 
by keeping the registrar-agent in the communication path. 
Examples may be connectivity via IP based networks (wired or wireless) 
but also connectivity via Bluetooth or NFC between the pledge and the 
registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain specific device certificates. 
EST in turn relies on a binding of the certification request to an 
underlying TLS connection between the EST client and the EST server. 
According to BRSKI the domain registrar acts as EST server and is also 
acting as registration authority (RA).</t>

<t>To be done:
* include reasoning for not using TLS (IDevID does not contain SAN, 
  TLS server flag) between the pledge and the registrar-agent.
* Enhancements to EST state machine necessary to process 
  self-contained objects on the registrar-agent and domain-registrar
* accepting</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of Solution">

<section anchor="sup-env" title="Supported Environment">

<t>The solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
in situation, in which the pledge acts as a server and only answers 
specific requests.</t>

<section anchor="building-automation" title="Building Automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.</t>

<t>Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure Isolation Policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to a domain registrar 
may be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less Operational Security in the Target-Domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirements Discussion and Mapping to Solution-Elements">

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the request and response messages to 
support the communication over a registrar-agent.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples in scope for certification 
requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
</list></t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To BRSKI wirh pledge in responder mode, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the use case.
The pledge-responder-mode) allows delegated bootstrapping using a 
registrar-agent instead a direct connection from the pledge to the 
domain registrar. The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and responds to 
requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-PRM relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc2" title="Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar this approach relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-PRM). This allows independence of a 
potential protection provided by the used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V    BRSKI-PRM                                        |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |           |       |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of Pledge in Pledge-Responder-Mode">

<t>In contrast to BRSKI the pledge acts as a server component. It is triggered 
by the registrar-agent for the generation of pledge-voucher-request and 
pledge-enrollment-request objects as well as for the processing of the 
response objects and the generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-registrar-agent" title="Behavior of Registrar-Agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-PRM, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Discovery of Registrar by Registrar-Agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Discovery of Pledge by Registrar-Agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping Objects and Corresponding Exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request Objects Acquisition by Registrar-Agent from Pledge">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request-prm:agent-signed-data element
(defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-prm:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request-prm:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request-prm:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module ietf-ztp-types with the grouping for csr-grouping for 
the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. In this case it MUST sign it additionally with its IDevID 
credential to achieve proof-of-identity bound to the PKCS#10 as 
described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certification request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request Handling - Registrar-Agent (Infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTP-over-TLS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional 
parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTP-over-TLS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTP-over-TLS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
Note:<vspace />
Communicaion between domain CA and registrar is of content
type “application/pkcs7-mime” 
Communicaion between registrar, registrar-agent and furter to the pledge
should be of content type “application/jose” . */</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response Object Supply by Registrar-Agent to Pledge">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTP-over-TLS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
</section>
<section anchor="voucher-request-prm-yang" title="Voucher Request Artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2021-10-26.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request.
    It is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 8995; see the
    RFC itself for full legal notices.";
        

  revision 2021-10-26 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
    
      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}


<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion Attack on Pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired Voucher and Enrollment responses by Registrar-Agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of Registrar-Agent Credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="voucher-request-prm-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in [RFC7515] to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-10'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-10.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>


    </references>


<section anchor="app_history" title="History of Changes [RFC Editor: please delete]">

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-internal-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from 
draft-ietf-anima-brski-async-enroll-03 to this document 
This required changes and adaptations in several sections to remove 
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="voucher-request-prm-yang"/> as well as in the 
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to 
to allow better listing of voucher related extensions; aligned with 
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the 
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not 
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

